From d1210dbb39e725f82f298a0f3442bcc61b63f09f Mon Sep 17 00:00:00 2001
From: Fotios Sioutis <sfotis@gmail.com>
Date: Tue, 22 Mar 2011 07:18:25 +0100
Subject: [PATCH 8/9] Move code to work around a BCC bug

For an unknown reason, BCC reports this error:
  [C++ Error] Standard_ErrorHandler.cpp(48): E2092 Storage class 'static' is not allowed here
which disappears when GetThreadID() is defined before static members.
---
 ros/src/Standard/Standard_ErrorHandler.cxx |   17 +++++++++--------
 1 files changed, 9 insertions(+), 8 deletions(-)

From 63bfacb18355d6e03bc3098c50f25486e533acb1 Mon Sep 17 00:00:00 2001
From: Fotios Sioutis <sfotis@gmail.com>
Date: Fri, 18 Nov 2011 12:03:23 +0200
Subject: [PATCH] Fixed convertion from int to Handle under bcc32

---
 inc/AIS_InteractiveContext.lxx |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

Index: oce/inc/AIS_InteractiveContext.lxx
===================================================================
--- oce.orig/inc/AIS_InteractiveContext.lxx
+++ oce/inc/AIS_InteractiveContext.lxx
@@ -78,7 +78,7 @@
 {return myCurLocalIndex != 0;}
 
 inline Handle_AIS_LocalContext AIS_InteractiveContext::LocalContext() const
-{ return (myCurLocalIndex > 0) ? myLocalContexts(myCurLocalIndex) : NULL; }
+{ return (myCurLocalIndex > 0) ? myLocalContexts(myCurLocalIndex) : (Handle_AIS_LocalContext) NULL; }
 
 inline const TCollection_AsciiString& AIS_InteractiveContext::CurrentName() const 
 {return myCurrentName;} 
Index: oce/src/Standard/Standard_ErrorHandler.cxx
===================================================================
--- oce.orig/src/Standard/Standard_ErrorHandler.cxx
+++ oce/src/Standard/Standard_ErrorHandler.cxx
@@ -23,14 +23,7 @@
 // request will be ignored. If the abort request do a raise during a setjmp
 // or a longjmp, there will be a "terminating SEGV" impossible to handle.
 
-//==== The top of the Errors Stack ===========================================
-static Standard_ErrorHandler* Top = 0;
-
-// A mutex to protect from concurrent access to Top
-// Note that we should NOT use Sentry while in this class, as Sentry
-// would register mutex as callback in the current exception handler
-static Standard_Mutex theMutex; 
-
+//Somehow borland needs this inline global function to be declared first ... ??
 static inline Standard_ThreadId GetThreadID()
 {
 #ifndef WNT
@@ -40,6 +33,14 @@
 #endif
 }
 
+//==== The top of the Errors Stack ===========================================
+static Standard_ErrorHandler* Top = 0;
+
+// A mutex to protect from concurrent access to Top
+// Note that we should NOT use Sentry while in this class, as Sentry
+// would register mutex as callback in the current exception handler
+static Standard_Mutex theMutex; 
+
 //============================================================================
 //====  Constructor : Create a ErrorHandler structure. And add it at the 
 //====                'Top' of "ErrorHandler's stack".
