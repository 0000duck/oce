From 7b768a0f83fca911a5f28ced1ba771f89c1ce847 Mon Sep 17 00:00:00 2001
From: Denis Barbier <bouzim@gmail.com>
Date: Tue, 19 Feb 2013 15:53:23 +0100
Subject: [PATCH] Fixes two GCC warnings in Image_Color.hxx
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

  .../inc/Image_Color.hxx:409:46: warning: missing braces around initializer for ‘Standard_Byte [3] {aka unsigned char [3]}’ [-Wmissing-braces]^M
  .../inc/Image_Color.hxx:409:46: warning: narrowing conversion of ‘(((int)theA.Image_ColorRGB::v[0]) + ((int)theB.Image_ColorRGB::v[0]))’ from ‘int’ to ‘Standard_Byte {aka unsigned char}’ inside { } is ill-formed in C++11 [-Wnarrowing]^M

The first one is trivial, braces are missing.
The second one requires to cast to the desired type.  It seems that Borland
compiler has limitations with respect to templates, so this commit may have to
be amended.
---
 inc/Image_Color.hxx |   39 ++++++++++++++++++++++++---------------
 1 file changed, 24 insertions(+), 15 deletions(-)

Index: oce/inc/Image_Color.hxx
===================================================================
--- oce.orig/inc/Image_Color.hxx
+++ oce/inc/Image_Color.hxx
@@ -54,6 +54,7 @@ public: // access methods
 
 public:
 
+  typedef Standard_Byte ComponentType_t;
   Standard_Byte v[3];
 
 };
@@ -94,6 +95,7 @@ struct Image_ColorRGB32
 
 public:
 
+  typedef Standard_Byte ComponentType_t;
   Standard_Byte v[4];
 
 };
@@ -134,6 +136,7 @@ struct Image_ColorRGBA
 
 public:
 
+  typedef Standard_Byte ComponentType_t;
   Standard_Byte v[4];
 
 };
@@ -168,6 +171,7 @@ struct Image_ColorBGR
 
 public:
 
+  typedef Standard_Byte ComponentType_t;
   Standard_Byte v[3];
 
 };
@@ -208,6 +212,7 @@ struct Image_ColorBGR32
 
 public:
 
+  typedef Standard_Byte ComponentType_t;
   Standard_Byte v[4];
 
 };
@@ -248,6 +253,7 @@ struct Image_ColorBGRA
 
 public:
 
+  typedef Standard_Byte ComponentType_t;
   Standard_Byte v[4];
 
 };
@@ -255,7 +261,6 @@ public:
 //! POD structure for packed float RGB color value (3 floats)
 struct Image_ColorRGBF
 {
-
   //! Returns the number of components.
   static Standard_Integer Length()
   {
@@ -282,6 +287,7 @@ struct Image_ColorRGBF
 
 public:
 
+  typedef Standard_ShortReal ComponentType_t;
   Standard_ShortReal v[3];
 
 };
@@ -316,6 +322,7 @@ struct Image_ColorBGRF
 
 public:
 
+  typedef Standard_ShortReal ComponentType_t;
   Standard_ShortReal v[3];
 
 };
@@ -356,6 +363,7 @@ struct Image_ColorRGBAF
 
 public:
 
+  typedef Standard_ShortReal ComponentType_t;
   Standard_ShortReal v[4];
 
 };
@@ -396,6 +404,7 @@ struct Image_ColorBGRAF
 
 public:
 
+  typedef Standard_ShortReal ComponentType_t;
   Standard_ShortReal v[4];
 
 };
@@ -404,9 +413,9 @@ public:
 template<typename ColorType_t>
 inline ColorType_t Image_ColorSumm3 (const ColorType_t& theA, const ColorType_t& theB)
 {
-  ColorType_t aRes = { theA.v[0] + theB.v[0],
-                       theA.v[1] + theB.v[1],
-                       theA.v[2] + theB.v[2] };
+  ColorType_t aRes = { { (typename ColorType_t::ComponentType_t) (theA.v[0] + theB.v[0]),
+                         (typename ColorType_t::ComponentType_t) (theA.v[1] + theB.v[1]),
+                         (typename ColorType_t::ComponentType_t) (theA.v[2] + theB.v[2])} };
   return aRes;
 }
 
@@ -433,10 +442,10 @@ inline Image_ColorBGRF operator+ (const
 template<typename ColorType_t>
 inline ColorType_t Image_ColorSumm4 (const ColorType_t& theA, const ColorType_t& theB)
 {
-  ColorType_t aRes = { theA.v[0] + theB.v[0],
-                       theA.v[1] + theB.v[1],
-                       theA.v[2] + theB.v[2],
-                       theA.v[3] + theB.v[3] };
+  ColorType_t aRes = { { (typename ColorType_t::ComponentType_t) (theA.v[0] + theB.v[0]),
+                         (typename ColorType_t::ComponentType_t) (theA.v[1] + theB.v[1]),
+                         (typename ColorType_t::ComponentType_t) (theA.v[2] + theB.v[2]),
+                         (typename ColorType_t::ComponentType_t) (theA.v[3] + theB.v[3])} };
   return aRes;
 }
 
@@ -474,9 +483,9 @@ inline Image_ColorBGRAF operator+ (const
 template<typename ColorType_t>
 inline ColorType_t Image_ColorSub3 (const ColorType_t& theA, const ColorType_t& theB)
 {
-  ColorType_t aRes = { theA.v[0] - theB.v[0],
-                       theA.v[1] - theB.v[1],
-                       theA.v[2] - theB.v[2] };
+  ColorType_t aRes = { { (typename ColorType_t::ComponentType_t) (theA.v[0] - theB.v[0]),
+                         (typename ColorType_t::ComponentType_t) (theA.v[1] - theB.v[1]),
+                         (typename ColorType_t::ComponentType_t) (theA.v[2] - theB.v[2]) } };
   return aRes;
 }
 
@@ -503,10 +512,10 @@ inline Image_ColorBGRF operator- (const
 template<typename ColorType_t>
 inline ColorType_t Image_ColorSub4 (const ColorType_t& theA, const ColorType_t& theB)
 {
-  ColorType_t aRes = { theA.v[0] - theB.v[0],
-                       theA.v[1] - theB.v[1],
-                       theA.v[2] - theB.v[2],
-                       theA.v[3] - theB.v[3] };
+  ColorType_t aRes = { { (typename ColorType_t::ComponentType_t) (theA.v[0] - theB.v[0]),
+                         (typename ColorType_t::ComponentType_t) (theA.v[1] - theB.v[1]),
+                         (typename ColorType_t::ComponentType_t) (theA.v[2] - theB.v[2]),
+                         (typename ColorType_t::ComponentType_t) (theA.v[3] - theB.v[3]) } };
   return aRes;
 }
 
