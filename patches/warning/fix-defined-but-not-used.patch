From 8bb9b98465442574e477c355110e20a86f76c9e8 Mon Sep 17 00:00:00 2001
From: Denis Barbier <bouzim@gmail.com>
Date: Tue, 5 Jun 2012 23:42:59 +0200
Subject: [PATCH] [clang-warning-fix][defined-but-not-used]

---
 inc/IntImpParGen_Intersector.gxx          |    1 -
 src/BRepFill/BRepFill_TrimShellCorner.cxx |  170 -----------------------------
 src/OpenGl/OpenGl_Workspace_2.cxx         |    2 +-
 src/PLib/PLib.cxx                         |    2 -
 4 files changed, 1 insertion(+), 174 deletions(-)

Index: oce/src/IntImpParGen/IntImpParGen_Intersector.gxx
===================================================================
--- oce.orig/src/IntImpParGen/IntImpParGen_Intersector.gxx
+++ oce/src/IntImpParGen/IntImpParGen_Intersector.gxx
@@ -44,7 +44,6 @@
 #define EPSX    ParTool::EpsX(TheParCurve)
 #define NB_ECHANTILLONS 
 
-static Standard_Real PIpPI = M_PI + M_PI;
 
 
 
Index: oce/src/BRepFill/BRepFill_TrimShellCorner.cxx
===================================================================
--- oce.orig/src/BRepFill/BRepFill_TrimShellCorner.cxx
+++ oce/src/BRepFill/BRepFill_TrimShellCorner.cxx
@@ -205,12 +205,6 @@ static Standard_Boolean ChooseSection(co
                                       gp_Pln& resPlane,
                                       Standard_Boolean& IsSingular);
 
-static Standard_Boolean ChoosePlane(const TopoDS_Shape& Comp,
-                                    const gp_Ax2& bis,
-                                    gp_Pln& resPlane,
-                                    TopoDS_Compound& NewComp);
-
-
 // ===========================================================================================
 // function: Constructor
 // purpose:
@@ -2223,173 +2217,3 @@ static Standard_Boolean ChooseSection(co
   //end of simplest case
 }
 
-//=======================================================================
-//function : ChoosePlane
-//purpose  : 
-//=======================================================================
-static Standard_Boolean ChoosePlane(const TopoDS_Shape& Comp,
-                                    const gp_Ax2& bis,
-                                    gp_Pln& resPlane,
-                                    TopoDS_Compound& NewComp)
-{
-  Standard_Real TolConf = 1.e-4, TolAng = 1.e-5;
-
-  Standard_Integer N = 100;
-  Standard_Integer Eind, ind, i, j;
-  TopTools_SequenceOfShape Eseq;
-  TopExp_Explorer Explo( Comp, TopAbs_EDGE );
-  for (; Explo.More(); Explo.Next())
-    Eseq.Append( Explo.Current() );
-
-  Standard_Integer NumberOfEdges = Eseq.Length();
-  TColgp_Array2OfPnt Points( 0, NumberOfEdges*2-1, 1, N/4 );
-
-  for (Eind = 0; Eind < NumberOfEdges; Eind++)
-    {
-      TopoDS_Edge anEdge = TopoDS::Edge( Eseq(Eind+1) );
-      BRepAdaptor_Curve aCurve(anEdge);
-      GCPnts_UniformAbscissa Distribution( aCurve, N+1 );
-      for (i = 1; i <= N/4; i++)
-        {
-          Standard_Real par = Distribution.Parameter(i);
-          Points( Eind*2, i ) = aCurve.Value(par);
-        }
-      for (i = 3*N/4+2; i <= N+1; i++)
-        {
-          Standard_Real par = Distribution.Parameter(i);
-          Points( Eind*2+1, i-3*N/4-1 ) = aCurve.Value(par);
-        }
-    }
-
-  TColgp_Array1OfPnt Origins( 0, NumberOfEdges*2-1 );
-  TColgp_Array1OfDir Normals( 0, NumberOfEdges*2-1 );
-  TColStd_Array1OfBoolean IsSingular( 0, NumberOfEdges*2-1 );
-  Standard_Real MinAngle = M_PI/2;
-  Standard_Integer MinInd;
-  for (ind = 0; ind < NumberOfEdges*2; ind++)
-    {
-      TColgp_Array1OfPnt pnts( 1, N/4 );
-      for (i = 1; i <= N/4; i++)
-        pnts(i) = Points( ind, i );
-      gp_Ax2 Axe;
-      GeomLib::AxeOfInertia( pnts, Axe, IsSingular(ind) );
-      if (!IsSingular(ind))
-        {
-          Origins(ind) = Axe.Location();
-          Normals(ind) = Axe.Direction();
-          Standard_Real Angle = bis.Angle( Axe );
-          if (Angle > M_PI/2)
-            Angle = M_PI - Angle;
-          if (Angle < MinAngle)
-            {
-              MinAngle = Angle;
-              MinInd = ind;
-            }
-        }
-    }
-
-  gp_Ax2 TheAxe( Origins(MinInd), Normals(MinInd) );
-  Standard_Real MaxAngleWithPln = M_PI/16;
-  TColStd_SequenceOfInteger iseq;
-  TColgp_SequenceOfPnt Pseq;
-  for (ind = 0; ind < NumberOfEdges*2; ind++)
-    if (!IsSingular(ind))
-      {
-        Standard_Real Angle = Normals(ind).Angle( TheAxe.Direction() );
-          if (Angle > M_PI/2)
-            Angle = M_PI - Angle;
-        if (Angle <= MaxAngleWithPln)
-          {
-            iseq.Append(ind);
-            for (j = 1; j <= N/4; j++)
-              Pseq.Append( Points(ind,j) );
-          }
-      }
-
-  TColgp_Array1OfPnt Parray( 1, Pseq.Length() );
-  for (i = 1; i <= Parray.Length(); i++)
-    Parray(i) = Pseq(i);
-  Standard_Boolean issing;
-  GeomLib::AxeOfInertia( Parray, TheAxe, issing );
-  resPlane = gp_Pln( TheAxe );
-  
-  i = 1;
-  BRep_Builder B;
-  B.MakeCompound(NewComp);
-  while (i <= iseq.Length())
-    {
-      Standard_Integer ind0 = iseq(i);
-      if (IsEven(ind0) && i < iseq.Length() && iseq(i+1) == ind0+1) //the whole edge
-        {
-          B.Add( NewComp, Eseq(ind0/2+1) );
-          i += 2;
-        }
-      else
-        i++;
-    }
-
-  Standard_Integer slen = Pseq.Length();
-  for (ind = 0; ind < NumberOfEdges*2; ind += 2)
-    {
-      Standard_Integer IndSing = -1, IndNotSing = -1;
-      gp_Lin aLine;
-      if (IsSingular(ind) && IsSingular(ind+1))
-        {
-          Standard_Boolean OnPlane0 = Standard_False, OnPlane1 = Standard_False;
-          aLine = gce_MakeLin( Points(ind, 1), Points(ind, N/4) );
-          if (resPlane.Contains( aLine, TolConf, TolAng ))
-            {
-              for (j = 1; j <= N/4; j++)
-                Pseq.Append( Points(ind,j) );
-              OnPlane0 = Standard_True;
-            }
-          aLine = gce_MakeLin( Points(ind+1, 1), Points(ind+1, N/4) );
-          if (resPlane.Contains( aLine, TolConf, TolAng ))
-            {
-              for (j = 1; j <= N/4; j++)
-                Pseq.Append( Points(ind+1,j) );
-              OnPlane1 = Standard_True;
-            }
-          if (OnPlane0 && OnPlane1)
-            B.Add( NewComp, Eseq(ind/2+1) );
-        }
-      else if (IsSingular(ind))
-        {
-          IndSing    = ind;
-          IndNotSing = ind+1;
-        }
-      else if (IsSingular(ind+1))
-        {
-          IndNotSing = ind;
-          IndSing    = ind+1;
-        }
-      if (IndSing != -1 && IndNotSing != -1)
-        {
-          aLine = gce_MakeLin( Points(IndSing, 1), Points(IndSing, N/4) );
-          if (resPlane.Contains( aLine, TolConf, TolAng ))
-            {
-              for (j = 1; j <= N/4; j++)
-                Pseq.Append( Points(IndSing,j) );
-
-              for (i = 1; i <= iseq.Length(); i++)
-                if (iseq(i) == IndNotSing)
-                  break;
-              if (i <= iseq.Length())
-                B.Add( NewComp, Eseq(ind/2+1) );
-            }
-        }
-    }
-
-  //Recompute the axe of plane
-  if (Pseq.Length() > slen)
-    {
-      TColgp_Array1OfPnt Parray2( 1, Pseq.Length() );
-      for (i = 1; i <= Parray2.Length(); i++)
-        Parray2(i) = Pseq(i);
-      GeomLib::AxeOfInertia( Parray2, TheAxe, issing );
-      resPlane = gp_Pln( TheAxe );
-    }
-
-  //Temporary
-  return Standard_True;
-}
Index: oce/src/OpenGl/OpenGl_Workspace_2.cxx
===================================================================
--- oce.orig/src/OpenGl/OpenGl_Workspace_2.cxx
+++ oce/src/OpenGl/OpenGl_Workspace_2.cxx
@@ -46,6 +46,7 @@
 //10-05-96 : CAL ; Ajout d'un nouveau delta dans les copies de pixels (voir CALL_DEF_DELTA)
 #define CALL_DEF_DELTA 10
 
+#ifdef WNT
 // ---------------------------------------------------------------
 // Function: getNearestPowOfTwo
 // Purpose:  get the nearest power of two for theNumber
@@ -169,7 +170,6 @@ static void initBufferTiling (Standard_I
 // Function: initBitmapBuffer
 // Purpose:  init device independent bitmap to hold printing data
 // ---------------------------------------------------------------
-#ifdef WNT
 #ifndef HAVE_FREEIMAGE
 static void initBitmapBuffer (const HDC theMemoryDC,
                               HBITMAP &theMemoryBmp,
Index: oce/src/PLib/PLib.cxx
===================================================================
--- oce.orig/src/PLib/PLib.cxx
+++ oce/src/PLib/PLib.cxx
@@ -1892,8 +1892,6 @@ void  PLib::EvalPoly2Var(const Standard_
 }
 
 
-static Standard_Integer  storage_divided = 0 ;
-static Standard_Real     *divided_differences_array = NULL;
 
 //=======================================================================
 //function : This evaluates the lagrange polynomial and its derivatives 
