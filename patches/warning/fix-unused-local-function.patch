Index: oce/inc/IntCurveSurface_Inter.gxx
===================================================================
--- oce.orig/inc/IntCurveSurface_Inter.gxx
+++ oce/inc/IntCurveSurface_Inter.gxx
@@ -150,25 +150,6 @@ static
 					      Standard_Real& v);
 
 static 
-  Standard_Boolean DoTrim(const TheCurve& curve,
-			  const TheSurface& surface);
-static
-  void DoCurve(const TheCurve& curve,
-	       Bnd_Box&  boxCurve);
-
-static
-  void DoCommon(TColStd_Array1OfReal& Coords,
-		Standard_Real&        Cmin,
-		Standard_Real&        Cmax);
-
-static 
-  void DoCommonBox(const Bnd_Box&        boxSurface,
-		   const Bnd_Box&        boxCurve,
-		   TColStd_Array1OfReal& X,
-		   TColStd_Array1OfReal& Y,
-		   TColStd_Array1OfReal& Z);
-
-static 
   void ProjectIntersectAndEstLim(const gp_Lin&        theLine,
 				 const gp_Pln&        thePln,
 				 const ProjLib_Plane& theBasCurvProj,
@@ -232,91 +213,6 @@ void IntCurveSurface_Inter::DoSurface(co
 }
 
 //=======================================================================
-//function : DoCurve
-//purpose  : 
-//=======================================================================
-void DoCurve(const TheCurve& curve,
-	     Bnd_Box& boxCurve)
-{
-  Standard_Real CF = TheCurveTool::FirstParameter(curve);
-  Standard_Real CL = TheCurveTool::LastParameter(curve);
-  Standard_Real C = 0., dC = fabs(CL-CF)/50.;
-  Standard_Integer iC = 0;
-  gp_Pnt aPnt;
-
-  for(iC = 0; iC < 50; iC++) {
-    if(iC == 0)
-      C = CF;
-    else if(iC == 49)
-      C = CL;
-    else
-      C = CF + dC *((Standard_Real)iC);
-      
-    TheCurveTool::D0(curve,C,aPnt);
-    boxCurve.Add(aPnt);
-  }
-}
-
-//=======================================================================
-//function : DoCommon
-//purpose  : 
-//=======================================================================
-void DoCommon(TColStd_Array1OfReal& Coords,
-	      Standard_Real&        Cmin,
-	      Standard_Real&        Cmax)
-{
-  Standard_Integer i = 0, j = 0;
-  for(i = 1; i <= 4; i++) {
-    for(j = i+1; j <= 4; j++) {
-      if(Coords(j) > Coords(i)) {
-        Standard_Real c = Coords(i);
-        Coords.SetValue(i,Coords(j));
-        Coords.SetValue(j,c);
-      }
-    }
-  }
-  Cmax = Coords(2);
-  Cmin = Coords(3);
-}
-
-//=======================================================================
-//function : DoCommonBox
-//purpose  : 
-//=======================================================================
-static void DoCommonBox(const Bnd_Box&        boxSurface,
-                        const Bnd_Box&        boxCurve,
-                        TColStd_Array1OfReal& X,
-                        TColStd_Array1OfReal& Y,
-                        TColStd_Array1OfReal& Z)
-{
-  Standard_Real SBXmin = 0., SBYmin = 0., SBZmin = 0.;
-  Standard_Real SBXmax = 0., SBYmax = 0., SBZmax = 0.;
-  boxSurface.Get(SBXmin,SBYmin,SBZmin,SBXmax,SBYmax,SBZmax);
-
-  Standard_Real CBXmin = 0., CBYmin = 0., CBZmin = 0.;
-  Standard_Real CBXmax = 0., CBYmax = 0., CBZmax = 0.;
-  boxCurve.Get(CBXmin,CBYmin,CBZmin,CBXmax,CBYmax,CBZmax);
-
-  TColStd_Array1OfReal Coord(1,4);
-
-  Coord(1) = SBXmin; Coord(2) = SBXmax; Coord(3) = CBXmin; Coord(4) = CBXmax;
-  Standard_Real CXmin = SBXmin, CXmax = SBXmax;
-  DoCommon(Coord,CXmin,CXmax);
-  
-  Coord(1) = SBYmin; Coord(2) = SBYmax; Coord(3) = CBYmin; Coord(4) = CBYmax;
-  Standard_Real CYmin = SBYmin, CYmax = SBYmax;
-  DoCommon(Coord,CYmin,CYmax);
-  
-  Coord(1) = SBZmin; Coord(2) = SBZmax; Coord(3) = CBZmin; Coord(4) = CBZmax;
-  Standard_Real CZmin = SBZmin, CZmax = SBZmax;
-  DoCommon(Coord,CZmin,CZmax);
-
-  X.SetValue(1,CXmin); X.SetValue(2,CXmax);
-  Y.SetValue(1,CYmin); Y.SetValue(2,CYmax);
-  Z.SetValue(1,CZmin); Z.SetValue(2,CZmax);
-}
-
-//=======================================================================
 //function : DoNewBounds
 //purpose  : 
 //=======================================================================
@@ -2328,77 +2224,3 @@ void EstLimForInfSurf(Standard_Real& U1n
     V1new = Max(V1new, -1.e10);
     V2new = Min(V2new,  1.e10);
 }
-//=======================================================================
-//function : DoTrim
-//purpose  : 
-//=======================================================================
-Standard_Boolean DoTrim(const TheCurve& curve,
-			const TheSurface& surface)
-{
-  Standard_Boolean isAnaCurve, isAnaSurface, result;
-  GeomAbs_CurveType aCT;
-  GeomAbs_SurfaceType aST;
-  
-  isAnaCurve = Standard_False;
-  isAnaSurface = Standard_False;
-  //
-  aCT=TheCurveTool::GetType(curve);
-  //
-  isAnaCurve= (aCT==GeomAbs_Line ||
-	       aCT==GeomAbs_Circle ||
-	       aCT==GeomAbs_Ellipse ||  
-	       aCT==GeomAbs_Hyperbola ||
-	       aCT==GeomAbs_Parabola);
-  //
-  aST=TheSurfaceTool::GetType(surface);
-  isAnaSurface=(aST==GeomAbs_Plane ||
-		aST==GeomAbs_Cylinder ||
-		aST==GeomAbs_Cone ||
-		aST==GeomAbs_Sphere ||
-		aST==GeomAbs_Torus);
-  //
-  result = !(isAnaCurve && isAnaSurface);
-  //
-  if(result) {
-    Standard_Boolean isUClosed, isVClosed; 
-    
-    isUClosed=(TheSurfaceTool::IsUClosed(surface) || 
-	       TheSurfaceTool::IsUPeriodic(surface));
-    isVClosed=(TheSurfaceTool::IsVClosed(surface)
-	       || TheSurfaceTool::IsVPeriodic(surface));
-    if(isUClosed && isVClosed) {
-      result =!result;
-    }
-  }
-   //modified by NIZNHY-PKV Wed Apr 04 12:11:01 2012f
-  if (result) {
-    Standard_Real aU0,aU1,aV0,aV1, dU, dV, dA, dB, aR, aTresh;
-    //
-    aTresh=100.;
-    aV0 = TheSurfaceTool::FirstVParameter(surface);
-    aV1 = TheSurfaceTool::LastVParameter(surface);
-    aU0 = TheSurfaceTool::FirstUParameter(surface);
-    aU1 = TheSurfaceTool::LastUParameter(surface); 
-    dU=aU1-aU0;
-    dV=aV1-aV0;
-    //
-    dA=dU;
-    dB=dV;
-    if (dV>dU) {
-     dA=dV;
-     dB=dU;
-    }
-    //
-    aR=dA/dB;
-    if (dB<Precision::PConfusion()) {
-      result=!result;
-      return result;
-    }
-    if (aR>aTresh) {
-      result=!result;
-    }
-    
-  }
-  //modified by NIZNHY-PKV Wed Apr 04 12:11:03 2012t
-  return result;
-}
Index: oce/src/BRepBuilderAPI/BRepBuilderAPI_Sewing.cxx
===================================================================
--- oce.orig/src/BRepBuilderAPI/BRepBuilderAPI_Sewing.cxx
+++ oce/src/BRepBuilderAPI/BRepBuilderAPI_Sewing.cxx
@@ -129,16 +129,6 @@
 #include <BRepBuilderAPI_BndBoxTreeSelector.hxx>
 #include <NCollection_UBTreeFiller.hxx>
 
-static void SortBox (const Handle(Bnd_HArray1OfBox) hSetBoxes,
-		     const Bnd_Box& aBox,
-		     TColStd_ListOfInteger& listIndex)
-{
-  Standard_Integer i, nbBoxes = hSetBoxes->Length();
-  for (i = 1; i <= nbBoxes; i++)
-    if (!aBox.IsOut(hSetBoxes->Value(i)))
-      listIndex.Append(i);
-}
-
 //=======================================================================
 //function : SameRange
 //purpose  : 
Index: oce/src/BRepFeat/BRepFeat_MakeDPrism.cxx
===================================================================
--- oce.orig/src/BRepFeat/BRepFeat_MakeDPrism.cxx
+++ oce/src/BRepFeat/BRepFeat_MakeDPrism.cxx
@@ -1260,7 +1260,7 @@ Standard_Integer SensOfPrism(const Handl
   return sens;
 }
 
-
+#ifdef DEB
  //=======================================================================
 //function : SetGluedFaces
 //purpose  : 
@@ -1314,7 +1314,7 @@ static void SetGluedFaces(const TopoDS_F
     }
   }
 }
-
+#endif
 
 //=======================================================================
 //function : VerifGluedFaces
Index: oce/src/BRepFeat/BRepFeat_MakePipe.cxx
===================================================================
--- oce.orig/src/BRepFeat/BRepFeat_MakePipe.cxx
+++ oce/src/BRepFeat/BRepFeat_MakePipe.cxx
@@ -377,7 +377,7 @@ Handle(Geom_Curve) BRepFeat_MakePipe::Ba
   return myBCurve;
 }
 
-
+#ifdef DEB
 //=======================================================================
 //function : SetGluedFaces
 //purpose  : management of faces of gluing and sliding  
@@ -432,7 +432,7 @@ static void SetGluedFaces(const TopoDS_F
     }
   }
 }
-
+#endif
 
 //=======================================================================
 //function : MajMap
Index: oce/src/BRepFeat/BRepFeat_MakePrism.cxx
===================================================================
--- oce.orig/src/BRepFeat/BRepFeat_MakePrism.cxx
+++ oce/src/BRepFeat/BRepFeat_MakePrism.cxx
@@ -1200,7 +1200,7 @@ Standard_Integer SensOfPrism(const Handl
   return sens;
 }
 
-
+#ifdef DEB
 //=======================================================================
 //function : SetGluedFaces
 //purpose  : management of gluing faces
@@ -1254,7 +1254,7 @@ static void SetGluedFaces(const TopoDS_F
     }
   }
 }
-
+#endif
 
 //=======================================================================
 //function : VerifGluedFaces
Index: oce/src/BRepFeat/BRepFeat_MakeRevol.cxx
===================================================================
--- oce.orig/src/BRepFeat/BRepFeat_MakeRevol.cxx
+++ oce/src/BRepFeat/BRepFeat_MakeRevol.cxx
@@ -849,7 +849,7 @@ Handle(Geom_Curve) BRepFeat_MakeRevol::B
   return myBCurve;
 }
 
-
+#ifdef DEB
 //=======================================================================
 //function : SetGluedFaces
 //purpose  : management of gluing faces
@@ -904,6 +904,7 @@ static void SetGluedFaces(const TopoDS_F
     }
   }
 }
+#endif
 
 //=======================================================================
 //function : VerifGluedFaces
Index: oce/src/BRepFill/BRepFill_CompatibleWires.cxx
===================================================================
--- oce.orig/src/BRepFill/BRepFill_CompatibleWires.cxx
+++ oce/src/BRepFill/BRepFill_CompatibleWires.cxx
@@ -69,7 +69,7 @@
 #include <TColStd_Array1OfReal.hxx>
 #include <TColStd_SequenceOfReal.hxx>
 
-
+#ifdef DEB
 static void EdgesFromVertex (const TopoDS_Wire&   W,
 			     const TopoDS_Vertex& V, 
 			     TopoDS_Edge& E1, 
@@ -119,7 +119,7 @@ static void EdgesFromVertex (const TopoD
     }
   }
 }
-				      
+#endif				      
 
 static void SeqOfVertices (const TopoDS_Wire&   W,
 			   TopTools_SequenceOfShape& S)
Index: oce/src/BRepOffsetAPI/BRepOffsetAPI_MiddlePath.cxx
===================================================================
--- oce.orig/src/BRepOffsetAPI/BRepOffsetAPI_MiddlePath.cxx
+++ oce/src/BRepOffsetAPI/BRepOffsetAPI_MiddlePath.cxx
@@ -54,13 +54,6 @@
 #include <GeomLib.hxx>
 #include <GeomAPI_Interpolate.hxx>
 
-static Standard_Boolean IsClosed(const TopoDS_Wire& aWire)
-{
-  TopoDS_Vertex V1, V2;
-  TopExp::Vertices(aWire, V1, V2);
-  return (V1.IsSame(V2));
-}
-
 static Standard_Boolean IsLinear(const TopoDS_Edge& anEdge,
                                  gp_Lin& aLine)
 {
Index: oce/src/GeomFill/GeomFill_CorrectedFrenet.cxx
===================================================================
--- oce.orig/src/GeomFill/GeomFill_CorrectedFrenet.cxx
+++ oce/src/GeomFill/GeomFill_CorrectedFrenet.cxx
@@ -581,9 +581,6 @@ Standard_Real GeomFill_CorrectedFrenet::
 // Function : ... (OCC78)
 // Purpose : This family of functions produce conversion of angle utility
 //===============================================================
-static Standard_Real corrPI_2PI(Standard_Real Ang){
-  return Ang = (Ang >= 0.0? Ang: 2*M_PI+Ang);
-};
 static Standard_Real corr2PI_PI(Standard_Real Ang){
   return Ang = (Ang < M_PI? Ang: Ang-2*M_PI);
 };
Index: oce/src/HLRBRep/HLRBRep_Data.cxx
===================================================================
--- oce.orig/src/HLRBRep/HLRBRep_Data.cxx
+++ oce/src/HLRBRep/HLRBRep_Data.cxx
@@ -466,29 +466,6 @@ public:
 };
 
 
-
-//-- ================================================================================
-
-
-//=======================================================================
-//function : FindInList
-//purpose  : 
-//=======================================================================
-// Unused :
-#ifdef DEB
-static Standard_Boolean FindInList (const TColStd_ListOfInteger& L,
-				    const Standard_Integer V)
-{
-  for (TColStd_ListIteratorOfListOfInteger ILV(L);
-       ILV.More();
-       ILV.Next()) {
-    if (V == ILV.Value())
-      return Standard_True;
-  }
-  return Standard_False;
-}
-#endif
-
 //=======================================================================
 //function : AdjustParameter
 //purpose  : 
Index: oce/src/IntPatch/IntPatch_ImpPrmIntersection.cxx
===================================================================
--- oce.orig/src/IntPatch/IntPatch_ImpPrmIntersection.cxx
+++ oce/src/IntPatch/IntPatch_ImpPrmIntersection.cxx
@@ -1397,25 +1397,6 @@ static Standard_Real AdjustUFirst(Standa
   return u;
 }
 
-// adjust U parameters on Quadric
-static Standard_Real AdjustUNext(Standard_Real Un,Standard_Real Up)
-{
-  Standard_Real u = Un;
-  if( Un < 0. )
-    while(u < 0.)
-      u += (2.*M_PI);
-  else if( Un > (2.*M_PI) )
-    while( u > (2.*M_PI) )
-      u -= (2.*M_PI);
-  else if(Un == 0. || fabs(Un) <= 1.e-9)
-    u = (fabs(Up) < fabs(2.*M_PI-Up)) ? 0. : (2.*M_PI);
-  else if(Un == (2.*M_PI) || fabs(Un-(2.*M_PI)) <= 1.e-9)
-    u = (fabs(Up) < fabs(2.*M_PI-Up)) ? 0. : (2.*M_PI);
-  else //( Un > 0. && Un < (2.*M_PI) )
-    return u;
-  return u;
-}
-
 // collect vertices, reject equals
 static Handle(IntSurf_LineOn2S) GetVertices(const Handle(IntPatch_WLine)& WLine,
 					    const Standard_Boolean  ,//IsReversed,
Index: oce/src/IntPolyh/IntPolyh_Triangle.cxx
===================================================================
--- oce.orig/src/IntPolyh/IntPolyh_Triangle.cxx
+++ oce/src/IntPolyh/IntPolyh_Triangle.cxx
@@ -58,16 +58,6 @@ static
 	       const Standard_Integer NumTri,
 	       const Standard_Integer NewTriNum,
 	       IntPolyh_ArrayOfEdges & TEdges) ;
-static
-  void TestOldEdgeB(const Standard_Integer NumTA,
-		    const Standard_Integer numPtT1,
-		    const Standard_Integer numPtT2,
-		    const Standard_Integer T1,
-		    const Standard_Integer T2,
-		    const IntPolyh_ArrayOfTriangles & TTriangles,
-		    const Standard_Integer Edge1,
-		    const Standard_Integer Edge3,
-		    IntPolyh_ArrayOfEdges & TEdges );
 
 //=======================================================================
 //function : IntPolyh_Triangle
@@ -604,42 +594,6 @@ void OldEdge(const Standard_Integer Edge
 }
 
 //=======================================================================
-//function : TestOldEdgeB
-//purpose  : 
-//=======================================================================
-void TestOldEdgeB(const Standard_Integer NumTA,
-		  const Standard_Integer numPtT1,
-		  const Standard_Integer numPtT2,
-		  const Standard_Integer T1,
-		  const Standard_Integer T2,
-		  const IntPolyh_ArrayOfTriangles & TTriangles,
-		  const Standard_Integer Edge1,
-		  const Standard_Integer Edge3,
-		  IntPolyh_ArrayOfEdges & TEdges )
-{
-
-  if( (TEdges[Edge1].FirstPoint() == numPtT1)
-     ||(TEdges[Edge1].SecondPoint()== numPtT1) ) {
-    /// L'edge1 est commun aux triangles NumTA et T1 
-    if(TEdges[Edge1].FirstTriangle()==NumTA) 
-      TEdges[Edge1].SetFirstTriangle(T1);
-    else TEdges[Edge1].SetSecondTriangle(T1);
-    
-    if(TEdges[Edge3].FirstTriangle()==NumTA) 
-      TEdges[Edge3].SetFirstTriangle(T2);
-    else TEdges[Edge3].SetSecondTriangle(T2);
-  }
-  else {
-    /// L'edge3 est commun aux triangles NumTA et T1 
-    if(TEdges[Edge3].FirstTriangle()==NumTA) 
-      TEdges[Edge3].SetFirstTriangle(T1);
-    else TEdges[Edge3].SetSecondTriangle(T1);      
-    if(TEdges[Edge1].FirstTriangle()==NumTA) 
-      TEdges[Edge1].SetFirstTriangle(T2);
-    else TEdges[Edge1].SetSecondTriangle(T2);
-  }
-}
-//=======================================================================
 //function : MiddleRefinement
 //purpose  : 
 //=======================================================================
Index: oce/src/IntTools/IntTools_FaceFace.cxx
===================================================================
--- oce.orig/src/IntTools/IntTools_FaceFace.cxx
+++ oce/src/IntTools/IntTools_FaceFace.cxx
@@ -125,8 +125,10 @@
 static
   void RefineVector(gp_Vec2d& aV2D);
 
+#ifdef DEB
 static
   void DumpWLine(const Handle(IntPatch_WLine)& aWLine);
+#endif
 //
 static
   void TolR3d(const TopoDS_Face& ,
@@ -4708,6 +4710,8 @@ Standard_Integer IndexType(const GeomAbs
   } 
   return aIndex;
 }
+
+#ifdef DEB
 //=======================================================================
 //function : DumpWLine
 //purpose  : 
@@ -4730,6 +4734,7 @@ void DumpWLine(const Handle(IntPatch_WLi
 	//   i, aX, aY, aZ, aU1, aV1, aU2, aV2);
   }
 }
+#endif
 //=======================================================================
 //function : RefineVector
 //purpose  : 
Index: oce/src/NCollection/NCollection_IncAllocator.cxx
===================================================================
--- oce.orig/src/NCollection/NCollection_IncAllocator.cxx
+++ oce/src/NCollection/NCollection_IncAllocator.cxx
@@ -97,7 +97,7 @@ Standard_EXPORT void IncAllocator_SetDeb
  * numbering of allocators.
  */
 //=======================================================================
-#ifdef _DEBUG
+#if defined(_DEBUG) && defined(DEB)
 static Standard_Size CurrentID = 0;
 static Standard_Size CATCH_ID = 0;
 
Index: oce/src/ProjLib/ProjLib_ProjectedCurve.cxx
===================================================================
--- oce.orig/src/ProjLib/ProjLib_ProjectedCurve.cxx
+++ oce/src/ProjLib/ProjLib_ProjectedCurve.cxx
@@ -118,247 +118,6 @@ static Standard_Boolean IsoIsDeg  (const
 }
 
 //=======================================================================
-//function : Interpolate
-//purpose  : 
-//=======================================================================
-
-static Handle(Geom2d_BSplineCurve) Interpolate(const Handle(TColgp_HArray1OfPnt2d)& myPoints,
-					       const Handle(TColStd_HArray1OfReal)& myParameters,
-					       const gp_Vec2d& InitialTangent, 
-					       const gp_Vec2d& FinalTangent)
-{
-  Handle(Geom2d_BSplineCurve) myCurve = NULL;
-
-// This code is extraction from Geom2dAPI_Interpolate with small correction
-// This is done to avoid of cyclic dependency if Geom2dAPI is used in ProjLib 
-
-  Standard_Integer degree,
-  ii,
-  jj,
-  index,
-  index1,
-  index2,
-  index3,
-  mult_index,
-  inversion_problem,
-  num_points,
-  num_distinct_knots,
-  num_poles  ;
-  
-  gp_Pnt2d a_point ;
-
-  Standard_Boolean myTangentRequest = Standard_True;
-
-  Handle(TColgp_HArray1OfVec2d) myTangents = 
-     new TColgp_HArray1OfVec2d(myPoints->Lower(),
-			      myPoints->Upper()) ;
-  Handle(TColStd_HArray1OfBoolean) myTangentFlags =
-      new TColStd_HArray1OfBoolean(myPoints->Lower(),
-				   myPoints->Upper()) ;
-  myTangentFlags->Init(Standard_False);
-  
-  myTangentFlags->SetValue(1,Standard_True) ;
-  myTangentFlags->SetValue(myPoints->Length(),Standard_True) ;
-  myTangents->SetValue(1,InitialTangent) ;
-  myTangents->SetValue(myPoints->Length(),FinalTangent);
-
-  num_points =
-  num_distinct_knots =
-  num_poles = myPoints->Length() ;
-  if (num_poles == 2 &&   !myTangentRequest)  {
-    degree = 1 ;
-  } 
-  else if (num_poles == 3 && !myTangentRequest) {
-    degree = 2 ;
-    num_distinct_knots = 2 ;
-  }
-  else {
-    degree = 3 ;
-    num_poles += 2 ;
-    //if (myTangentRequest) 
-      //for (ii = myTangentFlags->Lower() + 1 ; 
-	//   ii < myTangentFlags->Upper() ; ii++) {
-	//if (myTangentFlags->Value(ii)) {
-	  //num_poles += 1 ;
-	//}
-      //}
-    }
-  
-  
-  TColStd_Array1OfReal     parameters(1,num_poles) ;  
-  TColStd_Array1OfReal     flatknots(1,num_poles + degree + 1) ;
-  TColStd_Array1OfInteger  mults(1,num_distinct_knots) ;
-  TColStd_Array1OfReal     knots(1,num_distinct_knots) ;
-  TColStd_Array1OfInteger  contact_order_array(1, num_poles) ;
-  TColgp_Array1OfPnt2d       poles(1,num_poles) ;
-
-  for (ii = 1 ; ii <= degree + 1 ; ii++) {
-    flatknots.SetValue(ii,myParameters->Value(1)) ;
-    flatknots.SetValue(ii + num_poles,
-		       myParameters->Value(num_points)) ;
-  }
-  for (ii = 1 ; ii <= num_poles ; ii++) {
-    contact_order_array.SetValue(ii,0)  ;
-  }
-  for (ii = 2 ; ii < num_distinct_knots ; ii++) {
-    mults.SetValue(ii,1) ; 
-  }
-  mults.SetValue(1,degree + 1) ;
-  mults.SetValue(num_distinct_knots ,degree + 1) ;
-  
-  switch (degree) {
-  case 1:
-    for (ii = 1 ; ii <= num_poles ; ii++) {
-      poles.SetValue(ii ,myPoints->Value(ii)) ;
-    }
-    myCurve =
-      new Geom2d_BSplineCurve(poles,
-			    myParameters->Array1(),
-			    mults,
-			    degree) ;
-    //myIsDone = Standard_True ;
-    break ;
-  case 2:
-    knots.SetValue(1,myParameters->Value(1)) ;
-    knots.SetValue(2,myParameters->Value(3)) ;
-    for (ii = 1 ; ii <= num_poles ; ii++) {
-      poles.SetValue(ii,myPoints->Value(ii)) ;
-      
-    }
-    BSplCLib::Interpolate(degree,
-			  flatknots,
-			  myParameters->Array1(),
-			  contact_order_array,
-			  poles,
-			  inversion_problem) ;
-    if (!inversion_problem) {
-      myCurve =
-	new Geom2d_BSplineCurve(poles,
-			      knots,
-			      mults,
-			      degree) ;
-      //myIsDone = Standard_True ;
-    }
-    break ;
-  case 3:
-//
-// check if the boundary conditions are set
-//
-    //if (num_points >= 3) {
-//
-// cannot build the tangents with degree 3 with only 2 points
-// if those where not given in advance 
-//
-      //BuildTangents(myPoints->Array1(),
-		    //myTangents->ChangeArray1(),
-		    //myTangentFlags->ChangeArray1(),
-		    //myParameters->Array1()) ;
-    //}
-    contact_order_array.SetValue(2,1)  ;
-    parameters.SetValue(1,myParameters->Value(1)) ;
-    parameters.SetValue(2,myParameters->Value(1)) ;
-    poles.SetValue(1,myPoints->Value(1)) ;
-    for (jj = 1 ; jj <= 2 ; jj++) {
-      a_point.SetCoord(jj,myTangents->Value(1).Coord(jj)) ;
-
-    }
-    poles.SetValue(2,a_point) ;
-    mult_index = 2 ;
-    index = 3 ;
-    index1 = 2 ;
-    index2 = myPoints->Lower() + 1 ;
-    index3 = degree + 2 ;
-    if (myTangentRequest) {
-      for (ii = myParameters->Lower() + 1 ; 
-	   ii < myParameters->Upper() ; ii++) {
-	parameters.SetValue(index,myParameters->Value(ii)) ;
-	poles.SetValue(index,myPoints->Value(index2)) ;
-        flatknots.SetValue(index3,myParameters->Value(ii)) ; 
-	index += 1 ;
-        index3 += 1 ;
-	if (myTangentFlags->Value(index1)) {
-//
-// set the multiplicities, the order of the contact, the 
-// the flatknots,
-//
-	  mults.SetValue(mult_index,mults.Value(mult_index) + 1) ;
-	  contact_order_array(index) = 1 ;
-          flatknots.SetValue(index3, myParameters->Value(ii)) ;
-	  parameters.SetValue(index,
-			      myParameters->Value(ii)) ;
-	  for (jj = 1 ; jj <= 2 ; jj++) {
-            a_point.SetCoord(jj,myTangents->Value(ii).Coord(jj)) ;
-	  }
-	  poles.SetValue(index,a_point) ;
-	  index += 1  ;
-	  index3 += 1 ;
-	}
-	mult_index += 1 ;
-	index1 += 1 ;
-	index2 += 1 ;
-
-      }
-    }
-    else {
-      index1 = 2 ;
-      for(ii = myParameters->Lower()  ; ii <= myParameters->Upper()  ; ii++) {
-	parameters.SetValue(index1, 
-			    myParameters->Value(ii)) ;
-	index1 += 1 ;
-      }
-      index = 3 ;
-      for (ii = myPoints->Lower() + 1 ; ii <= myPoints->Upper() - 1 ; ii++) {
-	poles.SetValue(index,
-		       myPoints->Value(ii)) ;
-	index += 1 ;
-      }
-   
-   
-      index = degree + 1 ;
-      for(ii = myParameters->Lower()  ; ii <= myParameters->Upper()  ; ii++) {
-	flatknots.SetValue(index,
-			   myParameters->Value(ii)) ;
-	index += 1 ;
-      }
-    }
-    for (jj = 1 ; jj <= 2 ; jj++) {
-      a_point.SetCoord(jj,
-		       myTangents->Value(num_points).Coord(jj)) ;
-    }
-    poles.SetValue(num_poles-1 ,a_point) ;
-
-    contact_order_array.SetValue(num_poles - 1,1) ;
-    parameters.SetValue(num_poles,
-			myParameters->Value(myParameters->Upper())) ;
-    parameters.SetValue(num_poles -1,
-			myParameters->Value(myParameters->Upper())) ;
-
-    poles.SetValue(num_poles,
-		   myPoints->Value(num_points)) ;
-
-    BSplCLib::Interpolate(degree,
-			  flatknots,
-			  parameters,
-			  contact_order_array,
-			  poles,
-			  inversion_problem) ;
-    if (!inversion_problem) {
-      myCurve =
-	new Geom2d_BSplineCurve(poles,
-			      myParameters->Array1(),
-			      mults,
-			      degree) ;
-      //myIsDone = Standard_True ;
-    }
-    break ;
- 
-  }
-
-
-  return myCurve;
-}
-
-//=======================================================================
 //function : TrimC3d
 //purpose  : 
 //=======================================================================
Index: oce/src/TopOpeBRep/TopOpeBRep_FacesFiller.cxx
===================================================================
--- oce.orig/src/TopOpeBRep/TopOpeBRep_FacesFiller.cxx
+++ oce/src/TopOpeBRep/TopOpeBRep_FacesFiller.cxx
@@ -78,19 +78,6 @@ static void FUN_MakeERL(TopOpeBRep_Faces
   }
 }
 
-// Unused :
-#ifdef DEB
-static void FUN_MakeERL(const TopTools_MapOfShape& mapES,TopTools_ListOfShape& ERL)
-{
-  ERL.Clear();
-  TopTools_MapIteratorOfMapOfShape itES;
-  for (itES.Initialize(mapES);itES.More();itES.Next()) {
-    const TopoDS_Shape& E = itES.Key();
-    ERL.Append(E);
-  }
-}
-#endif
-
 //=======================================================================
 //function : TopOpeBRep_FacesFiller
 //purpose  : 
Index: oce/src/TopOpeBRep/TopOpeBRep_FacesFiller_1.cxx
===================================================================
--- oce.orig/src/TopOpeBRep/TopOpeBRep_FacesFiller_1.cxx
+++ oce/src/TopOpeBRep/TopOpeBRep_FacesFiller_1.cxx
@@ -73,14 +73,6 @@ Standard_EXPORT Standard_Boolean TopOpeB
 Standard_IMPORT Standard_Boolean GLOBAL_bvpr;Standard_EXPORT void debvprmess(Standard_Integer f1,Standard_Integer f2,Standard_Integer il,Standard_Integer vp,Standard_Integer si);
 Standard_EXPORT Standard_Boolean TopOpeBRep_GetcontextNOPUNK();
 
-static void SSAVFF(const TopoDS_Shape& F1, const TopoDS_Shape& F2)
-{
-  TCollection_AsciiString aname_1("ffbug_1"), aname_2("ffbug_2");
-  Standard_CString name_1=aname_1.ToCString(),name_2=aname_2.ToCString();
-  cout<<"FacesFiller : "<<name_1<<","<<name_2<<endl;
-  BRepTools::Write(F1,name_1); BRepTools::Write(F2,name_2);
-}
-
 static void FUN_traceRLine(const TopOpeBRep_LineInter& L)
 {
 #ifdef DRAW
@@ -534,18 +526,6 @@ static Standard_Boolean FUN_brep_ONfirst
   return ONfirstP;
 }
 
-#ifdef DEB
-static void FUN_remove(TopOpeBRepDS_ListOfInterference& lI, const Handle(TopOpeBRepDS_Interference)& I)
-{
-  TopOpeBRepDS_ListIteratorOfListOfInterference itI(lI);
-  while (itI.More()) {
-    const Handle(TopOpeBRepDS_Interference)& Icur = itI.Value();
-    if (Icur == I) lI.Remove(itI);
-    else           itI.Next();
-  }
-}
-#endif
-
 //=======================================================================
 //function : ProcessRLine
 //purpose  : 
