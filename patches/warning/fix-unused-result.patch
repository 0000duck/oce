Index: oce/src/FSD/FSD_BinaryFile.cxx
===================================================================
--- oce.orig/src/FSD/FSD_BinaryFile.cxx
+++ oce/src/FSD/FSD_BinaryFile.cxx
@@ -158,7 +158,8 @@ void FSD_BinaryFile::ReadChar(TCollectio
   buffer.Clear();
 
   while (!IsEnd() && (ccount < rsize)) {
-    fread(&c, sizeof(char),1, myStream);
+    if (1 != fread(&c, sizeof(char),1, myStream))
+      break;
     buffer += c;
     ccount++;
   }
Index: oce/src/IFSelect/IFSelect_SessionFile.cxx
===================================================================
--- oce.orig/src/IFSelect/IFSelect_SessionFile.cxx
+++ oce/src/IFSelect/IFSelect_SessionFile.cxx
@@ -112,7 +112,7 @@ static int deja = 0;
   Standard_Boolean header = Standard_False;
   for(;;) {
     ligne[0] = '\0';
-    fgets(ligne,200,lefic);
+    if (fgets(ligne,200,lefic) == NULL) break;
     if (feof(lefic)) break;
     if (ligne[0] == '\0') continue;
 //  D abord ligne initiale ?
Index: oce/src/IFSelect/IFSelect_SessionPilot.cxx
===================================================================
--- oce.orig/src/IFSelect/IFSelect_SessionPilot.cxx
+++ oce/src/IFSelect/IFSelect_SessionPilot.cxx
@@ -237,7 +237,7 @@ static TCollection_AsciiString nulword;
     char ligne[100];
     if (!lefic) std::cout << theprompt.ToCString();
     ligne[0] = '\0';
-    fgets(ligne,100,fic);
+    if (fgets(ligne,100,fic) == NULL) break;
     if (feof(fic)) break;
     if (ligne[0] == '\0') continue;
 //    On interprete cette commande
Index: oce/src/IGESFile/liriges.c
===================================================================
--- oce.orig/src/IGESFile/liriges.c
+++ oce/src/IGESFile/liriges.c
@@ -41,26 +41,26 @@ int  iges_lire (FILE* lefic, int *numsec
     if (*numsec == 0) ligne[72] = ligne[79] = ' ';
     ligne[0] = '\0'; 
     if(modefnes)	
-	fgets(ligne,99,lefic); /*for kept compatibility with fnes*/
+	{ if (fgets(ligne,99,lefic) == NULL) return (feof(lefic) ? 0 : -1); } /*for kept compatibility with fnes*/
     else {
       /* PTV: 21.03.2002 it is neccessary for files that have only `\r` but no `\n` 
               examle file is 919-001-T02-04-CP-VL.iges */
       while ( fgets ( ligne, 2, lefic ) && ( ligne[0] == '\r' || ligne[0] == '\n' ) ) 
 	{
 	}
-      fgets(&ligne[1],80,lefic);
+      if (fgets(&ligne[1],80,lefic) == NULL) return (feof(lefic) ? 0 : -1);
 /*     	fgets(ligne,81,lefic); */
     }
     if (*numsec == 0 && ligne[72] != 'S' && ligne[79] == ' ') {
 /*        ON A DU FNES : Sauter la 1re ligne          */
     ligne[0] = '\0';
     if(modefnes)	
-	fgets(ligne,99,lefic);/*for kept compatibility with fnes*/
+	{ if (fgets(ligne,99,lefic) == NULL) return (feof(lefic) ? 0 : -1); } /*for kept compatibility with fnes*/
     else {
       while ( fgets ( ligne, 2, lefic ) && ( ligne[0] == '\r' || ligne[0] == '\n' ) )
 	{
 	}
-      fgets(&ligne[1],80,lefic);
+      if (fgets(&ligne[1],80,lefic) == NULL) return (feof(lefic) ? 0 : -1);
 /*     	fgets(ligne,81,lefic); */
       }
     }
Index: oce/src/OSD/OSD_File.cxx
===================================================================
--- oce.orig/src/OSD/OSD_File.cxx
+++ oce/src/OSD/OSD_File.cxx
@@ -764,7 +764,8 @@ TCollection_AsciiString PrinterName;
  else
    sprintf(buffer,"lpr -P%s %s",PrinterName.ToCString(),aBuffer.ToCString());
 
- system(buffer);
+ if (0 != system(buffer))
+   Standard_ProgramError::Raise("OSD_File::Print : lp/lpr failed");;
 }
 
 
Index: oce/src/OSD/OSD_Process.cxx
===================================================================
--- oce.orig/src/OSD/OSD_Process.cxx
+++ oce/src/OSD/OSD_Process.cxx
@@ -55,7 +55,8 @@ OSD_Process::OSD_Process(){
 void OSD_Process::Spawn (const TCollection_AsciiString& cmd,
 			 const Standard_Boolean /*ShowWindow*/)
 {
- system(cmd.ToCString());
+ if (0 != system(cmd.ToCString()))
+  myError.SetValue(errno, Iam, "Spawn");
 }
 
 
Index: oce/src/RWStl/RWStl.cxx
===================================================================
--- oce.orig/src/RWStl/RWStl.cxx
+++ oce/src/RWStl/RWStl.cxx
@@ -454,7 +454,8 @@ Handle_StlMesh_Mesh RWStl::ReadAscii (co
     gp_XYZ aN (Atof(x), Atof(y), Atof(z));
 
     // skip the keywords "outer loop"
-    fscanf(file,"%*s %*s");
+    if (0 != fscanf(file,"%*s %*s"))
+      break;
 
     // reading vertex
     if (3 != fscanf(file,"%*s %80s %80s %80s\n", x, y, z))
@@ -475,10 +476,12 @@ Handle_StlMesh_Mesh RWStl::ReadAscii (co
     ReadMesh->AddTriangle (i1, i2, i3, aN.X(), aN.Y(), aN.Z());
 
     // skip the keywords "endloop"
-    fscanf(file,"%*s");
+    if (0 != fscanf(file,"%*s"))
+      break;
 
     // skip the keywords "endfacet"
-    fscanf(file,"%*s");
+    if (0 != fscanf(file,"%*s"))
+      break;
 
     // update progress only per 1k triangles
     if (++iTri % IND_THRESHOLD == 0)
Index: oce/src/Voxel/Voxel_Reader.cxx
===================================================================
--- oce.orig/src/Voxel/Voxel_Reader.cxx
+++ oce/src/Voxel/Voxel_Reader.cxx
@@ -22,6 +22,9 @@
 
 #include <TCollection_AsciiString.hxx>
 
+#define CATCH_FREAD_1_ERR(stmt) if (1 != (stmt)) { fclose(f); return Standard_False; }
+#define CATCH_FGETS_ERR(stmt) if (NULL == (stmt)) { fclose(f); return Standard_False; }
+
 Voxel_Reader::Voxel_Reader():myBoolVoxels(0),myColorVoxels(0),myFloatVoxels(0)
 {
 
@@ -38,8 +41,10 @@ Standard_Boolean Voxel_Reader::Read(cons
   Standard_Byte type; // 0 - bool, 1 - color, 2 - float
   Voxel_VoxelFileFormat format;
   Standard_Character svoxels[9], sformat[9], stype[9];
-  fscanf(f, "%8s %8s %8s\n", svoxels, sformat, stype);
-  fclose(f);
+  int strings_read = fscanf(f, "%8s %8s %8s\n", svoxels, sformat, stype);
+  fclose(f); // close file before aborting on error
+  if (3 != strings_read)
+    return Standard_False;
 
   // Take format, type of voxels.
   // Voxels
@@ -146,7 +151,7 @@ Standard_Boolean Voxel_Reader::ReadBoolA
   Standard_Character line[65], sx[33], sy[33], sz[33];
 
   // Header: skip it
-  fgets(line, 64, f);
+  CATCH_FGETS_ERR( fgets(line, 64, f) );
   
   // Location, size, number of splits
   Standard_Integer nbx = 0, nby = 0, nbz = 0;
@@ -182,7 +187,7 @@ Standard_Boolean Voxel_Reader::ReadBoolA
     Standard_Integer i1 = 0, i2 = 0, value = 0;
     while (!feof(f))
     {
-      fgets(line, 64, f);
+      CATCH_FGETS_ERR( fgets(line, 64, f) );
       if (has_slice(line))
       {
 	if (sscanf(line, "%d %d %d\n", &i1, &i2, &value) != 3)
@@ -223,8 +228,8 @@ Standard_Boolean Voxel_Reader::ReadColor
   Standard_Character line[65], sx[33], sy[33], sz[33];
 
   // Header: skip it
-  fgets(line, 64, f);
-  
+  CATCH_FGETS_ERR( fgets(line, 64, f) );
+
   // Location, size, number of splits
   Standard_Integer nbx = 0, nby = 0, nbz = 0;
   Standard_Real x = 0.0, y = 0.0, z = 0.0, xlen = 0.0, ylen = 0.0, zlen = 0.0;
@@ -259,7 +264,7 @@ Standard_Boolean Voxel_Reader::ReadColor
     Standard_Integer i1 = 0, i2 = 0, value = 0;
     while (!feof(f))
     {
-      fgets(line, 64, f);
+      CATCH_FGETS_ERR( fgets(line, 64, f) );
       if (has_slice(line))
       {
 	if (sscanf(line, "%d %d %d\n", &i1, &i2, &value) != 3)
@@ -300,7 +305,7 @@ Standard_Boolean Voxel_Reader::ReadFloat
   Standard_Character line[65], sx[33], sy[33], sz[33];
 
   // Header: skip it
-  fgets(line, 64, f);
+  CATCH_FGETS_ERR( fgets(line, 64, f) );
   
   // Location, size, number of splits
   Standard_Integer nbx = 0, nby = 0, nbz = 0;
@@ -337,7 +342,7 @@ Standard_Boolean Voxel_Reader::ReadFloat
     Standard_ShortReal value = 0.0;
     while (!feof(f))
     {
-      fgets(line, 64, f);
+      CATCH_FGETS_ERR( fgets(line, 64, f) );
       if (has_slice(line))
       {
 	if (sscanf(line, "%d %d %64s\n", &i1, &i2, line) != 3)
@@ -379,20 +384,20 @@ Standard_Boolean Voxel_Reader::ReadBoolB
 
   // Header: skip it
   Standard_Character line[65];
-  fgets(line, 64, f);
+  CATCH_FGETS_ERR( fgets(line, 64, f) );
   
   // Location, size, number of splits
   Standard_Integer nbx = 0, nby = 0, nbz = 0;
   Standard_Real x = 0.0, y = 0.0, z = 0.0, xlen = 0.0, ylen = 0.0, zlen = 0.0;
-  fread(&x, sizeof(Standard_Real), 1, f);
-  fread(&y, sizeof(Standard_Real), 1, f);
-  fread(&z, sizeof(Standard_Real), 1, f);
-  fread(&xlen, sizeof(Standard_Real), 1, f);
-  fread(&ylen, sizeof(Standard_Real), 1, f);
-  fread(&zlen, sizeof(Standard_Real), 1, f);
-  fread(&nbx, sizeof(Standard_Integer), 1, f);
-  fread(&nby, sizeof(Standard_Integer), 1, f);
-  fread(&nbz, sizeof(Standard_Integer), 1, f);
+  CATCH_FREAD_1_ERR( fread(&x, sizeof(Standard_Real), 1, f) );
+  CATCH_FREAD_1_ERR( fread(&y, sizeof(Standard_Real), 1, f) );
+  CATCH_FREAD_1_ERR( fread(&z, sizeof(Standard_Real), 1, f) );
+  CATCH_FREAD_1_ERR( fread(&xlen, sizeof(Standard_Real), 1, f) );
+  CATCH_FREAD_1_ERR( fread(&ylen, sizeof(Standard_Real), 1, f) );
+  CATCH_FREAD_1_ERR( fread(&zlen, sizeof(Standard_Real), 1, f) );
+  CATCH_FREAD_1_ERR( fread(&nbx, sizeof(Standard_Integer), 1, f) );
+  CATCH_FREAD_1_ERR( fread(&nby, sizeof(Standard_Integer), 1, f) );
+  CATCH_FREAD_1_ERR( fread(&nbz, sizeof(Standard_Integer), 1, f) );
 
   // Allocate the voxels
   myBoolVoxels = (Standard_Address) new Voxel_BoolDS(x, y, z, xlen, ylen, zlen, nbx, nby, nbz);
@@ -407,9 +412,9 @@ Standard_Boolean Voxel_Reader::ReadBoolB
     Standard_Integer i1 = 0, i2 = 0, value = 0;
     while (!feof(f))
     {
-      fread(&i1, sizeof(Standard_Integer), 1, f);
-      fread(&i2, sizeof(Standard_Integer), 1, f);
-      fread(&value, sizeof(Standard_Byte), 1, f);
+      CATCH_FREAD_1_ERR( fread(&i1, sizeof(Standard_Integer), 1, f) );
+      CATCH_FREAD_1_ERR( fread(&i2, sizeof(Standard_Integer), 1, f) );
+      CATCH_FREAD_1_ERR( fread(&value, sizeof(Standard_Byte), 1, f) );
 
       // Set value
       if (!((Standard_Byte**)((Voxel_DS*)myBoolVoxels)->myData)[i1])
@@ -434,20 +439,20 @@ Standard_Boolean Voxel_Reader::ReadColor
 
   // Header: skip it
   Standard_Character line[65];
-  fgets(line, 64, f);
+  CATCH_FGETS_ERR( fgets(line, 64, f) );
   
   // Location, size, number of splits
   Standard_Integer nbx = 0, nby = 0, nbz = 0;
   Standard_Real x = 0.0, y = 0.0, z = 0.0, xlen = 0.0, ylen = 0.0, zlen = 0.0;
-  fread(&x, sizeof(Standard_Real), 1, f);
-  fread(&y, sizeof(Standard_Real), 1, f);
-  fread(&z, sizeof(Standard_Real), 1, f);
-  fread(&xlen, sizeof(Standard_Real), 1, f);
-  fread(&ylen, sizeof(Standard_Real), 1, f);
-  fread(&zlen, sizeof(Standard_Real), 1, f);
-  fread(&nbx, sizeof(Standard_Integer), 1, f);
-  fread(&nby, sizeof(Standard_Integer), 1, f);
-  fread(&nbz, sizeof(Standard_Integer), 1, f);
+  CATCH_FREAD_1_ERR( fread(&x, sizeof(Standard_Real), 1, f) );
+  CATCH_FREAD_1_ERR( fread(&y, sizeof(Standard_Real), 1, f) );
+  CATCH_FREAD_1_ERR( fread(&z, sizeof(Standard_Real), 1, f) );
+  CATCH_FREAD_1_ERR( fread(&xlen, sizeof(Standard_Real), 1, f) );
+  CATCH_FREAD_1_ERR( fread(&ylen, sizeof(Standard_Real), 1, f) );
+  CATCH_FREAD_1_ERR( fread(&zlen, sizeof(Standard_Real), 1, f) );
+  CATCH_FREAD_1_ERR( fread(&nbx, sizeof(Standard_Integer), 1, f) );
+  CATCH_FREAD_1_ERR( fread(&nby, sizeof(Standard_Integer), 1, f) );
+  CATCH_FREAD_1_ERR( fread(&nbz, sizeof(Standard_Integer), 1, f) );
 
   // Allocate the voxels
   myColorVoxels = (Standard_Address) new Voxel_ColorDS(x, y, z, xlen, ylen, zlen, nbx, nby, nbz);
@@ -462,9 +467,9 @@ Standard_Boolean Voxel_Reader::ReadColor
     Standard_Integer i1 = 0, i2 = 0, value = 0;
     while (!feof(f))
     {
-      fread(&i1, sizeof(Standard_Integer), 1, f);
-      fread(&i2, sizeof(Standard_Integer), 1, f);
-      fread(&value, sizeof(Standard_Byte), 1, f);
+      CATCH_FREAD_1_ERR( fread(&i1, sizeof(Standard_Integer), 1, f) );
+      CATCH_FREAD_1_ERR( fread(&i2, sizeof(Standard_Integer), 1, f) );
+      CATCH_FREAD_1_ERR( fread(&value, sizeof(Standard_Byte), 1, f) );
 
       // Set value
       if (!((Standard_Byte**)((Voxel_DS*)myColorVoxels)->myData)[i1])
@@ -489,20 +494,20 @@ Standard_Boolean Voxel_Reader::ReadFloat
 
   // Header: skip it
   Standard_Character line[65];
-  fgets(line, 64, f);
+  CATCH_FGETS_ERR( fgets(line, 64, f) );
   
   // Location, size, number of splits
   Standard_Integer nbx = 0, nby = 0, nbz = 0;
   Standard_Real x = 0.0, y = 0.0, z = 0.0, xlen = 0.0, ylen = 0.0, zlen = 0.0;
-  fread(&x, sizeof(Standard_Real), 1, f);
-  fread(&y, sizeof(Standard_Real), 1, f);
-  fread(&z, sizeof(Standard_Real), 1, f);
-  fread(&xlen, sizeof(Standard_Real), 1, f);
-  fread(&ylen, sizeof(Standard_Real), 1, f);
-  fread(&zlen, sizeof(Standard_Real), 1, f);
-  fread(&nbx, sizeof(Standard_Integer), 1, f);
-  fread(&nby, sizeof(Standard_Integer), 1, f);
-  fread(&nbz, sizeof(Standard_Integer), 1, f);
+  CATCH_FREAD_1_ERR( fread(&x, sizeof(Standard_Real), 1, f) );
+  CATCH_FREAD_1_ERR( fread(&y, sizeof(Standard_Real), 1, f) );
+  CATCH_FREAD_1_ERR( fread(&z, sizeof(Standard_Real), 1, f) );
+  CATCH_FREAD_1_ERR( fread(&xlen, sizeof(Standard_Real), 1, f) );
+  CATCH_FREAD_1_ERR( fread(&ylen, sizeof(Standard_Real), 1, f) );
+  CATCH_FREAD_1_ERR( fread(&zlen, sizeof(Standard_Real), 1, f) );
+  CATCH_FREAD_1_ERR( fread(&nbx, sizeof(Standard_Integer), 1, f) );
+  CATCH_FREAD_1_ERR( fread(&nby, sizeof(Standard_Integer), 1, f) );
+  CATCH_FREAD_1_ERR( fread(&nbz, sizeof(Standard_Integer), 1, f) );
 
   // Allocate the voxels
   myFloatVoxels = (Standard_Address) new Voxel_FloatDS(x, y, z, xlen, ylen, zlen, nbx, nby, nbz);
@@ -518,9 +523,9 @@ Standard_Boolean Voxel_Reader::ReadFloat
     Standard_ShortReal value = 0.0;
     while (!feof(f))
     {
-      fread(&i1, sizeof(Standard_Integer), 1, f);
-      fread(&i2, sizeof(Standard_Integer), 1, f);
-      fread(&value, sizeof(Standard_ShortReal), 1, f);
+      CATCH_FREAD_1_ERR( fread(&i1, sizeof(Standard_Integer), 1, f) );
+      CATCH_FREAD_1_ERR( fread(&i2, sizeof(Standard_Integer), 1, f) );
+      CATCH_FREAD_1_ERR( fread(&value, sizeof(Standard_ShortReal), 1, f) );
 
       // Set value
       if (!((Standard_ShortReal**)((Voxel_DS*)myFloatVoxels)->myData)[i1])
