From 80d535651b29b45ba68273295dedcfa699e00f89 Mon Sep 17 00:00:00 2001
From: Denis Barbier <bouzim@gmail.com>
Date: Fri, 1 Feb 2013 18:02:43 +0100
Subject: [PATCH 02/14] Adapt header files after previous commit

---
 inc/IntPolyh_Intersection.hxx     |    4 +++-
 inc/IntPolyh_MaillageAffinage.hxx |   13 ++++++-------
 inc/IntPolyh_Triangle.hxx         |   16 ++++++++++++----
 3 files changed, 21 insertions(+), 12 deletions(-)

From 5a3a017e05f621dfce08988bd5fb12546465d174 Mon Sep 17 00:00:00 2001
From: Denis Barbier <bouzim@gmail.com>
Date: Fri, 1 Feb 2013 18:10:33 +0100
Subject: [PATCH 03/14] Remove TStartPoints, this member is never used

---
 drv/IntPolyh/IntPolyh_MaillageAffinage.jxx |    3 ---
 inc/IntPolyh_MaillageAffinage.hxx          |    5 -----
 src/IntPolyh/IntPolyh_MaillageAffinage.cdl |    1 -
 src/IntPolyh/IntPolyh_MaillageAffinage.cxx |    8 +-------
 4 files changed, 1 insertion(+), 16 deletions(-)

From 49dd7a9c1d24e1aec946be47932b3393fd65c074 Mon Sep 17 00:00:00 2001
From: Denis Barbier <bouzim@gmail.com>
Date: Fri, 1 Feb 2013 18:24:21 +0100
Subject: [PATCH 04/14] Lazy initialization of TPoints/TEdges/TTriangles
 collections

Patch suggested by Roman Lygin, see
  http://opencascade.blogspot.fr/2008/12/why-are-boolean-operations-so-sloooooow.html
---
 src/IntPolyh/IntPolyh_MaillageAffinage.cxx |   39 ++++++++++++----------------
 1 file changed, 17 insertions(+), 22 deletions(-)

From c97ef5a3672a99910475babf761da4e0ba0fe3ec Mon Sep 17 00:00:00 2001
From: Denis Barbier <bouzim@gmail.com>
Date: Mon, 4 Feb 2013 02:08:27 +0100
Subject: [PATCH 05/14] Use a map also for inserted shapes

GetIndex() method becomes very slow if there are many new shapes.
---
 inc/BooleanOperations_ShapesDataStructure.hxx               |    1 +
 src/BOP/BOP_SolidSolid_1.cxx                                |   11 +----------
 .../BooleanOperations_ShapesDataStructure.cxx               |    9 ++++++++-
 3 files changed, 10 insertions(+), 11 deletions(-)

From e3977b6bada026417e79d77530c0c9b8e5f44747 Mon Sep 17 00:00:00 2001
From: Denis Barbier <bouzim@gmail.com>
Date: Mon, 4 Feb 2013 02:09:51 +0100
Subject: [PATCH 06/14] Optimize ComputeStateByInsidePoints

Pass aFFIndicesMap instead of aFFMap as argument in order to avoid
the for-loop on i.
---
 inc/BOP_SolidSolid.hxx       |    4 ++--
 src/BOP/BOP_SolidSolid_1.cxx |   19 +++++--------------
 2 files changed, 7 insertions(+), 16 deletions(-)

From cfe298ec4867af678de81464874b75b75c1b6837 Mon Sep 17 00:00:00 2001
From: Denis Barbier <bouzim@gmail.com>
Date: Wed, 6 Feb 2013 23:10:01 +0100
Subject: [PATCH 07/14] Add a new method BOP_SolidSolid::DoEdgesAdjacentFaces

This method computes the list of adjacent faces of all edges.
It was previously computed by GetAttachedFaces, which iterated over all faces.
---
 inc/BOP_SolidSolid.hxx       |    3 +-
 src/BOP/BOP_SolidSolid.cxx   |    5 +-
 src/BOP/BOP_SolidSolid_1.cxx |  121 ++++++++++++++++++------------------------
 3 files changed, 57 insertions(+), 72 deletions(-)

From 21bd302e140bb42f4ab890dcc5fe76e76dd3e917 Mon Sep 17 00:00:00 2001
From: Denis Barbier <bouzim@gmail.com>
Date: Thu, 7 Feb 2013 19:57:04 +0100
Subject: [PATCH 08/14] With large models, exchange calls to
 ComputeStateByInsidePoints() and
 ComputeStateForAnalyticalSurfaces()

The former loops over all shapes, and becomes thus slow with large models.  On
the other hand, the latter is inherently slower, but does notdepend on shape complexity.
---
 src/BOP/BOP_SolidSolid_1.cxx |   14 +++++++-------
 1 file changed, 7 insertions(+), 7 deletions(-)

From 49542844d6498bc58f0f8a81aa451fc5cbae05b7 Mon Sep 17 00:00:00 2001
From: Denis Barbier <bouzim@gmail.com>
Date: Fri, 8 Feb 2013 06:43:23 +0100
Subject: [PATCH 09/14] The current implementation of
 BOP_WireEdgeSet::IsClosed() is broken

It always return Standard_False, so speed it up ;-)
---
 src/BOP/BOP_WireEdgeSet.cxx |   27 +++++----------------------
 1 file changed, 5 insertions(+), 22 deletions(-)

From 7b19650b2902305709c5124823bd4b81331353f7 Mon Sep 17 00:00:00 2001
From: Denis Barbier <bouzim@gmail.com>
Date: Fri, 1 Feb 2013 10:41:27 +0100
Subject: [PATCH 10/14] Optimize for loops

---
 src/IntPolyh/IntPolyh_MaillageAffinage.cxx |   40 +++++++++++++++-------------
 1 file changed, 21 insertions(+), 19 deletions(-)

From e03e4bdd2d01a689289ac7a6cc85fb7cba1e400e Mon Sep 17 00:00:00 2001
From: Denis Barbier <bouzim@gmail.com>
Date: Sun, 10 Feb 2013 14:01:23 +0100
Subject: [PATCH 11/14] Perform computations outside of the for-loop

---
 src/BOP/BOP_CorrectTolerances.cxx |    5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

From 43dc1da14922674a547fca19bd433954962b56f0 Mon Sep 17 00:00:00 2001
From: Denis Barbier <bouzim@gmail.com>
Date: Sun, 10 Feb 2013 14:01:58 +0100
Subject: [PATCH 12/14] In BOP_BuilderTools::DoMap, avoid resizing aFFMap at
 each iteration

---
 src/BOP/BOP_BuilderTools.cxx |    1 +
 1 file changed, 1 insertion(+)

From 464f0e00a6cb206bd12d6bd7662c0bdd8c78170b Mon Sep 17 00:00:00 2001
From: Denis Barbier <bouzim@gmail.com>
Date: Sun, 10 Feb 2013 15:38:36 +0100
Subject: [PATCH 13/14] Pass aFFIndicesMap as argument of
 BOP_ShellSolid::SplitFace in order to not compute
 this map again

---
 inc/BOP_ShellSolid.hxx       |    2 +-
 src/BOP/BOP_ShellSolid_3.cxx |   27 ++++++---------------------
 src/BOP/BOP_SolidSolid_1.cxx |    2 +-
 3 files changed, 8 insertions(+), 23 deletions(-)

From 8b7f6ae079efbb9eb9954f440fc4aef3e3eac35a Mon Sep 17 00:00:00 2001
From: Denis Barbier <bouzim@gmail.com>
Date: Sun, 10 Feb 2013 19:18:43 +0100
Subject: [PATCH 14/14] Improve BOP_FaceBuilder::PerformAreas by precomputing
 the set of edges for each face

Unfortunately, this requires adding TopTools_DataMapOfShapeMapOfShape data structure.
---
 ...DataMapIteratorOfDataMapOfShapeMapOfShape_0.cxx |   43 ++++++++
 ...ols_DataMapNodeOfDataMapOfShapeMapOfShape_0.cxx |   60 ++++++++++
 .../TopTools_DataMapOfShapeMapOfShape_0.cxx        |   46 ++++++++
 ...Tools_DataMapNodeOfDataMapOfShapeMapOfShape.hxx |   27 +++++
 ...s_DataMapIteratorOfDataMapOfShapeMapOfShape.hxx |   75 +++++++++++++
 ...Tools_DataMapNodeOfDataMapOfShapeMapOfShape.hxx |  105 ++++++++++++++++++
 inc/TopTools_DataMapOfShapeMapOfShape.hxx          |  115 ++++++++++++++++++++
 src/BOP/BOP_FaceBuilder.cxx                        |   26 ++++-
 8 files changed, 492 insertions(+), 5 deletions(-)
 create mode 100644 drv/TopTools/TopTools_DataMapIteratorOfDataMapOfShapeMapOfShape_0.cxx
 create mode 100644 drv/TopTools/TopTools_DataMapNodeOfDataMapOfShapeMapOfShape_0.cxx
 create mode 100644 drv/TopTools/TopTools_DataMapOfShapeMapOfShape_0.cxx
 create mode 100644 inc/Handle_TopTools_DataMapNodeOfDataMapOfShapeMapOfShape.hxx
 create mode 100644 inc/TopTools_DataMapIteratorOfDataMapOfShapeMapOfShape.hxx
 create mode 100644 inc/TopTools_DataMapNodeOfDataMapOfShapeMapOfShape.hxx
 create mode 100644 inc/TopTools_DataMapOfShapeMapOfShape.hxx

From c18d50a62145c2a8c607d148f9b48be075cca4d3 Mon Sep 17 00:00:00 2001
From: Denis Barbier <bouzim@gmail.com>
Date: Sun, 3 Mar 2013 21:09:19 +0100
Subject: [PATCH] Define class TColStd_DataMapOfIntegerListOfInteger

Commit 4597e04 changed signature of TakeOnSplit.
A new argument of class TColStd_DataMapOfIntegerListOfInteger was
introduced, but this class was not defined.
It compiled fine because source files include it directly, but
this class must be defined.
---
 inc/BOP_SolidSolid.hxx |    1 +
 1 file changed, 1 insertion(+)

Index: oce/drv/TopTools/TopTools_DataMapIteratorOfDataMapOfShapeMapOfShape_0.cxx
===================================================================
--- /dev/null
+++ oce/drv/TopTools/TopTools_DataMapIteratorOfDataMapOfShapeMapOfShape_0.cxx
@@ -0,0 +1,43 @@
+// This file is generated by WOK (CPPExt).
+// Please do not edit this file; modify original file instead.
+// The copyright and license terms as defined for the original file apply to 
+// this header file considered to be the "object code" form of the original source.
+
+#include <TopTools_DataMapIteratorOfDataMapOfShapeMapOfShape.hxx>
+
+#ifndef _Standard_NoSuchObject_HeaderFile
+#include <Standard_NoSuchObject.hxx>
+#endif
+#ifndef _TopoDS_Shape_HeaderFile
+#include <TopoDS_Shape.hxx>
+#endif
+#ifndef _TopTools_MapOfShape_HeaderFile
+#include <TopTools_MapOfShape.hxx>
+#endif
+#ifndef _TopTools_ShapeMapHasher_HeaderFile
+#include <TopTools_ShapeMapHasher.hxx>
+#endif
+#ifndef _TopTools_DataMapOfShapeMapOfShape_HeaderFile
+#include <TopTools_DataMapOfShapeMapOfShape.hxx>
+#endif
+#ifndef _TopTools_DataMapNodeOfDataMapOfShapeMapOfShape_HeaderFile
+#include <TopTools_DataMapNodeOfDataMapOfShapeMapOfShape.hxx>
+#endif
+ 
+
+#define TheKey TopoDS_Shape
+#define TheKey_hxx <TopoDS_Shape.hxx>
+#define TheItem TopTools_MapOfShape
+#define TheItem_hxx <TopTools_MapOfShape.hxx>
+#define Hasher TopTools_ShapeMapHasher
+#define Hasher_hxx <TopTools_ShapeMapHasher.hxx>
+#define TCollection_DataMapNode TopTools_DataMapNodeOfDataMapOfShapeMapOfShape
+#define TCollection_DataMapNode_hxx <TopTools_DataMapNodeOfDataMapOfShapeMapOfShape.hxx>
+#define TCollection_DataMapIterator TopTools_DataMapIteratorOfDataMapOfShapeMapOfShape
+#define TCollection_DataMapIterator_hxx <TopTools_DataMapIteratorOfDataMapOfShapeMapOfShape.hxx>
+#define Handle_TCollection_DataMapNode Handle_TopTools_DataMapNodeOfDataMapOfShapeMapOfShape
+#define TCollection_DataMapNode_Type_() TopTools_DataMapNodeOfDataMapOfShapeMapOfShape_Type_()
+#define TCollection_DataMap TopTools_DataMapOfShapeMapOfShape
+#define TCollection_DataMap_hxx <TopTools_DataMapOfShapeMapOfShape.hxx>
+#include <TCollection_DataMapIterator.gxx>
+
Index: oce/drv/TopTools/TopTools_DataMapNodeOfDataMapOfShapeMapOfShape_0.cxx
===================================================================
--- /dev/null
+++ oce/drv/TopTools/TopTools_DataMapNodeOfDataMapOfShapeMapOfShape_0.cxx
@@ -0,0 +1,60 @@
+// This file is generated by WOK (CPPExt).
+// Please do not edit this file; modify original file instead.
+// The copyright and license terms as defined for the original file apply to 
+// this header file considered to be the "object code" form of the original source.
+
+#include <TopTools_DataMapNodeOfDataMapOfShapeMapOfShape.hxx>
+
+#ifndef _Standard_Type_HeaderFile
+#include <Standard_Type.hxx>
+#endif
+
+#ifndef _TopoDS_Shape_HeaderFile
+#include <TopoDS_Shape.hxx>
+#endif
+#ifndef _TopTools_MapOfShape_HeaderFile
+#include <TopTools_MapOfShape.hxx>
+#endif
+#ifndef _TopTools_ShapeMapHasher_HeaderFile
+#include <TopTools_ShapeMapHasher.hxx>
+#endif
+#ifndef _TopTools_DataMapOfShapeMapOfShape_HeaderFile
+#include <TopTools_DataMapOfShapeMapOfShape.hxx>
+#endif
+#ifndef _TopTools_DataMapIteratorOfDataMapOfShapeMapOfShape_HeaderFile
+#include <TopTools_DataMapIteratorOfDataMapOfShapeMapOfShape.hxx>
+#endif
+
+ 
+
+
+IMPLEMENT_STANDARD_TYPE(TopTools_DataMapNodeOfDataMapOfShapeMapOfShape)
+IMPLEMENT_STANDARD_SUPERTYPE_ARRAY()
+  STANDARD_TYPE(TCollection_MapNode),
+  STANDARD_TYPE(MMgt_TShared),
+  STANDARD_TYPE(Standard_Transient),
+
+IMPLEMENT_STANDARD_SUPERTYPE_ARRAY_END()
+IMPLEMENT_STANDARD_TYPE_END(TopTools_DataMapNodeOfDataMapOfShapeMapOfShape)
+
+
+IMPLEMENT_DOWNCAST(TopTools_DataMapNodeOfDataMapOfShapeMapOfShape,Standard_Transient)
+IMPLEMENT_STANDARD_RTTI(TopTools_DataMapNodeOfDataMapOfShapeMapOfShape)
+
+
+#define TheKey TopoDS_Shape
+#define TheKey_hxx <TopoDS_Shape.hxx>
+#define TheItem TopTools_MapOfShape
+#define TheItem_hxx <TopTools_MapOfShape.hxx>
+#define Hasher TopTools_ShapeMapHasher
+#define Hasher_hxx <TopTools_ShapeMapHasher.hxx>
+#define TCollection_DataMapNode TopTools_DataMapNodeOfDataMapOfShapeMapOfShape
+#define TCollection_DataMapNode_hxx <TopTools_DataMapNodeOfDataMapOfShapeMapOfShape.hxx>
+#define TCollection_DataMapIterator TopTools_DataMapIteratorOfDataMapOfShapeMapOfShape
+#define TCollection_DataMapIterator_hxx <TopTools_DataMapIteratorOfDataMapOfShapeMapOfShape.hxx>
+#define Handle_TCollection_DataMapNode Handle_TopTools_DataMapNodeOfDataMapOfShapeMapOfShape
+#define TCollection_DataMapNode_Type_() TopTools_DataMapNodeOfDataMapOfShapeMapOfShape_Type_()
+#define TCollection_DataMap TopTools_DataMapOfShapeMapOfShape
+#define TCollection_DataMap_hxx <TopTools_DataMapOfShapeMapOfShape.hxx>
+#include <TCollection_DataMapNode.gxx>
+
Index: oce/drv/TopTools/TopTools_DataMapOfShapeMapOfShape_0.cxx
===================================================================
--- /dev/null
+++ oce/drv/TopTools/TopTools_DataMapOfShapeMapOfShape_0.cxx
@@ -0,0 +1,46 @@
+// This file is generated by WOK (CPPExt).
+// Please do not edit this file; modify original file instead.
+// The copyright and license terms as defined for the original file apply to 
+// this header file considered to be the "object code" form of the original source.
+
+#include <TopTools_DataMapOfShapeMapOfShape.hxx>
+
+#ifndef _Standard_DomainError_HeaderFile
+#include <Standard_DomainError.hxx>
+#endif
+#ifndef _Standard_NoSuchObject_HeaderFile
+#include <Standard_NoSuchObject.hxx>
+#endif
+#ifndef _TopoDS_Shape_HeaderFile
+#include <TopoDS_Shape.hxx>
+#endif
+#ifndef _TopTools_MapOfShape_HeaderFile
+#include <TopTools_MapOfShape.hxx>
+#endif
+#ifndef _TopTools_ShapeMapHasher_HeaderFile
+#include <TopTools_ShapeMapHasher.hxx>
+#endif
+#ifndef _TopTools_DataMapNodeOfDataMapOfShapeMapOfShape_HeaderFile
+#include <TopTools_DataMapNodeOfDataMapOfShapeMapOfShape.hxx>
+#endif
+#ifndef _TopTools_DataMapIteratorOfDataMapOfShapeMapOfShape_HeaderFile
+#include <TopTools_DataMapIteratorOfDataMapOfShapeMapOfShape.hxx>
+#endif
+ 
+
+#define TheKey TopoDS_Shape
+#define TheKey_hxx <TopoDS_Shape.hxx>
+#define TheItem TopTools_MapOfShape
+#define TheItem_hxx <TopTools_MapOfShape.hxx>
+#define Hasher TopTools_ShapeMapHasher
+#define Hasher_hxx <TopTools_ShapeMapHasher.hxx>
+#define TCollection_DataMapNode TopTools_DataMapNodeOfDataMapOfShapeMapOfShape
+#define TCollection_DataMapNode_hxx <TopTools_DataMapNodeOfDataMapOfShapeMapOfShape.hxx>
+#define TCollection_DataMapIterator TopTools_DataMapIteratorOfDataMapOfShapeMapOfShape
+#define TCollection_DataMapIterator_hxx <TopTools_DataMapIteratorOfDataMapOfShapeMapOfShape.hxx>
+#define Handle_TCollection_DataMapNode Handle_TopTools_DataMapNodeOfDataMapOfShapeMapOfShape
+#define TCollection_DataMapNode_Type_() TopTools_DataMapNodeOfDataMapOfShapeMapOfShape_Type_()
+#define TCollection_DataMap TopTools_DataMapOfShapeMapOfShape
+#define TCollection_DataMap_hxx <TopTools_DataMapOfShapeMapOfShape.hxx>
+#include <TCollection_DataMap.gxx>
+
Index: oce/inc/BOP_ShellSolid.hxx
===================================================================
--- oce.orig/inc/BOP_ShellSolid.hxx
+++ oce/inc/BOP_ShellSolid.hxx
@@ -105,7 +105,7 @@ Standard_EXPORT virtual ~BOP_ShellSolid(
 //! agorithm <br>
   Standard_EXPORT     Standard_Boolean CheckArgTypes() const;
   
-  Standard_EXPORT     Standard_Boolean SplitFace(const Standard_Integer theFaceIndex,TopTools_DataMapOfShapeInteger& theMapOfEdgeIndex,TopTools_ListOfShape& theListOfFace) const;
+  Standard_EXPORT     Standard_Boolean SplitFace(const Standard_Integer theFaceIndex,const TColStd_IndexedMapOfInteger& aFFIndicesMap,TopTools_DataMapOfShapeInteger& theMapOfEdgeIndex,TopTools_ListOfShape& theListOfFace) const;
   
   Standard_EXPORT   virtual  void SetHistoryCollector(const Handle(BOP_HistoryCollector)& theHistory) ;
 
Index: oce/inc/BOP_SolidSolid.hxx
===================================================================
--- oce.orig/inc/BOP_SolidSolid.hxx
+++ oce/inc/BOP_SolidSolid.hxx
@@ -40,7 +40,8 @@ class TopTools_ListOfShape;
 class BOP_ShellFaceSet;
 class TopoDS_Shape;
 class TopTools_DataMapOfShapeInteger;
-class BOPTColStd_IndexedDataMapOfIntegerIndexedMapOfInteger;
+class TColStd_DataMapOfIntegerListOfInteger;
+class TColStd_IndexedMapOfInteger;
 
 
 
@@ -94,10 +95,11 @@ private:
   
   Standard_EXPORT     Standard_Boolean PropagateFaceStateByEdges(const TopoDS_Shape& theFace,const TopTools_DataMapOfShapeInteger& theMapOfEdgeIndex,TopAbs_State& theState) ;
   
-  Standard_EXPORT     Standard_Boolean ComputeStateByInsidePoints(const Standard_Integer theFaceIndex,const Standard_Integer theBaseFaceIndex,const Standard_Integer theFaceRank,const BOPTColStd_IndexedDataMapOfIntegerIndexedMapOfInteger& theFFMap,TopAbs_State& theState) ;
+  Standard_EXPORT     Standard_Boolean ComputeStateByInsidePoints(const Standard_Integer theFaceIndex,const Standard_Integer theBaseFaceIndex,const Standard_Integer theFaceRank,const TColStd_IndexedMapOfInteger& theFFMap,TopAbs_State& theState) ;
   
-  Standard_EXPORT     Standard_Boolean TakeOnSplit(const Standard_Integer theFaceIndex,const Standard_Integer theBaseFaceIndex) const;
+  Standard_EXPORT     Standard_Boolean TakeOnSplit(const Standard_Integer theFaceIndex,const Standard_Integer theBaseFaceIndex, const TColStd_DataMapOfIntegerListOfInteger &aMapOfEdgeFaces) const;
 
+  Standard_EXPORT     void DoEdgesAdjacentFaces(TColStd_DataMapOfIntegerListOfInteger &aMapOfEdgeFaces) const;
 
 
 
Index: oce/inc/BooleanOperations_ShapesDataStructure.hxx
===================================================================
--- oce.orig/inc/BooleanOperations_ShapesDataStructure.hxx
+++ oce/inc/BooleanOperations_ShapesDataStructure.hxx
@@ -166,6 +166,7 @@ TopoDS_Shape myObject;
 TopoDS_Shape myTool;
 BooleanOperations_IndexedDataMapOfShapeInteger myShapeIndexMapObj;
 BooleanOperations_IndexedDataMapOfShapeInteger myShapeIndexMapTool;
+BooleanOperations_IndexedDataMapOfShapeInteger myShapeIndexMapInserted;
 BOPTColStd_CArray1OfInteger myRefEdges;
 Standard_Integer myNbEdges;
 
Index: oce/inc/Handle_TopTools_DataMapNodeOfDataMapOfShapeMapOfShape.hxx
===================================================================
--- /dev/null
+++ oce/inc/Handle_TopTools_DataMapNodeOfDataMapOfShapeMapOfShape.hxx
@@ -0,0 +1,27 @@
+// This file is generated by WOK (CPPExt).
+// Please do not edit this file; modify original file instead.
+// The copyright and license terms as defined for the original file apply to 
+// this header file considered to be the "object code" form of the original source.
+
+#ifndef _Handle_TopTools_DataMapNodeOfDataMapOfShapeMapOfShape_HeaderFile
+#define _Handle_TopTools_DataMapNodeOfDataMapOfShapeMapOfShape_HeaderFile
+
+#ifndef _Standard_HeaderFile
+#include <Standard.hxx>
+#endif
+#ifndef _Standard_DefineHandle_HeaderFile
+#include <Standard_DefineHandle.hxx>
+#endif
+
+#ifndef _Handle_TCollection_MapNode_HeaderFile
+#include <Handle_TCollection_MapNode.hxx>
+#endif
+
+class Standard_Transient;
+class Handle(Standard_Type);
+class Handle(TCollection_MapNode);
+class TopTools_DataMapNodeOfDataMapOfShapeMapOfShape;
+
+DEFINE_STANDARD_HANDLE(TopTools_DataMapNodeOfDataMapOfShapeMapOfShape,TCollection_MapNode)
+
+#endif
Index: oce/inc/IntPolyh_MaillageAffinage.hxx
===================================================================
--- oce.orig/inc/IntPolyh_MaillageAffinage.hxx
+++ oce/inc/IntPolyh_MaillageAffinage.hxx
@@ -171,7 +171,6 @@ public:
   
   Standard_EXPORT     void GetBoxDraw(const Standard_Integer SurfID) const;
   
-  Standard_EXPORT    const IntPolyh_ArrayOfStartPoints& GetArrayOfSP() const;
   //! This method returns array of couples of contact triangles. <br>
   Standard_EXPORT     IntPolyh_ArrayOfCouples& GetArrayOfCouples() ;
   
@@ -214,7 +213,6 @@ IntPolyh_ArrayOfEdges TEdges2;
 IntPolyh_ArrayOfTriangles TTriangles1;
 IntPolyh_ArrayOfTriangles TTriangles2;
 IntPolyh_ArrayOfCouples TTrianglesContacts;
-IntPolyh_ArrayOfStartPoints TStartPoints;
 Standard_Boolean myEnlargeZone;
 
 
Index: oce/inc/TopTools_DataMapIteratorOfDataMapOfShapeMapOfShape.hxx
===================================================================
--- /dev/null
+++ oce/inc/TopTools_DataMapIteratorOfDataMapOfShapeMapOfShape.hxx
@@ -0,0 +1,75 @@
+// This file is generated by WOK (CPPExt).
+// Please do not edit this file; modify original file instead.
+// The copyright and license terms as defined for the original file apply to 
+// this header file considered to be the "object code" form of the original source.
+
+#ifndef _TopTools_DataMapIteratorOfDataMapOfShapeMapOfShape_HeaderFile
+#define _TopTools_DataMapIteratorOfDataMapOfShapeMapOfShape_HeaderFile
+
+#ifndef _Standard_HeaderFile
+#include <Standard.hxx>
+#endif
+#ifndef _Standard_DefineAlloc_HeaderFile
+#include <Standard_DefineAlloc.hxx>
+#endif
+#ifndef _Standard_Macro_HeaderFile
+#include <Standard_Macro.hxx>
+#endif
+
+#ifndef _TCollection_BasicMapIterator_HeaderFile
+#include <TCollection_BasicMapIterator.hxx>
+#endif
+#ifndef _Handle_TopTools_DataMapNodeOfDataMapOfShapeMapOfShape_HeaderFile
+#include <Handle_TopTools_DataMapNodeOfDataMapOfShapeMapOfShape.hxx>
+#endif
+class Standard_NoSuchObject;
+class TopoDS_Shape;
+class TopTools_MapOfShape;
+class TopTools_ShapeMapHasher;
+class TopTools_DataMapOfShapeMapOfShape;
+class TopTools_DataMapNodeOfDataMapOfShapeMapOfShape;
+
+
+
+class TopTools_DataMapIteratorOfDataMapOfShapeMapOfShape  : public TCollection_BasicMapIterator {
+public:
+
+  DEFINE_STANDARD_ALLOC
+
+  
+  Standard_EXPORT   TopTools_DataMapIteratorOfDataMapOfShapeMapOfShape();
+  
+  Standard_EXPORT   TopTools_DataMapIteratorOfDataMapOfShapeMapOfShape(const TopTools_DataMapOfShapeMapOfShape& aMap);
+  
+  Standard_EXPORT     void Initialize(const TopTools_DataMapOfShapeMapOfShape& aMap) ;
+  
+  Standard_EXPORT    const TopoDS_Shape& Key() const;
+  
+  Standard_EXPORT    const TopTools_MapOfShape& Value() const;
+
+
+
+
+
+protected:
+
+
+
+
+
+private:
+
+
+
+
+
+};
+
+
+
+
+
+// other Inline functions and methods (like "C++: function call" methods)
+
+
+#endif
Index: oce/inc/TopTools_DataMapNodeOfDataMapOfShapeMapOfShape.hxx
===================================================================
--- /dev/null
+++ oce/inc/TopTools_DataMapNodeOfDataMapOfShapeMapOfShape.hxx
@@ -0,0 +1,105 @@
+// This file is generated by WOK (CPPExt).
+// Please do not edit this file; modify original file instead.
+// The copyright and license terms as defined for the original file apply to 
+// this header file considered to be the "object code" form of the original source.
+
+#ifndef _TopTools_DataMapNodeOfDataMapOfShapeMapOfShape_HeaderFile
+#define _TopTools_DataMapNodeOfDataMapOfShapeMapOfShape_HeaderFile
+
+#ifndef _Standard_HeaderFile
+#include <Standard.hxx>
+#endif
+#ifndef _Standard_DefineHandle_HeaderFile
+#include <Standard_DefineHandle.hxx>
+#endif
+#ifndef _Handle_TopTools_DataMapNodeOfDataMapOfShapeMapOfShape_HeaderFile
+#include <Handle_TopTools_DataMapNodeOfDataMapOfShapeMapOfShape.hxx>
+#endif
+
+#ifndef _TopoDS_Shape_HeaderFile
+#include <TopoDS_Shape.hxx>
+#endif
+#ifndef _TopTools_MapOfShape_HeaderFile
+#include <TopTools_MapOfShape.hxx>
+#endif
+#ifndef _TCollection_MapNode_HeaderFile
+#include <TCollection_MapNode.hxx>
+#endif
+#ifndef _TCollection_MapNodePtr_HeaderFile
+#include <TCollection_MapNodePtr.hxx>
+#endif
+class TopoDS_Shape;
+class TopTools_MapOfShape;
+class TopTools_ShapeMapHasher;
+class TopTools_DataMapOfShapeMapOfShape;
+class TopTools_DataMapIteratorOfDataMapOfShapeMapOfShape;
+
+
+
+class TopTools_DataMapNodeOfDataMapOfShapeMapOfShape : public TCollection_MapNode {
+
+public:
+
+  
+      TopTools_DataMapNodeOfDataMapOfShapeMapOfShape(const TopoDS_Shape& K,const TopTools_MapOfShape& I,const TCollection_MapNodePtr& n);
+  
+        TopoDS_Shape& Key() const;
+  
+        TopTools_MapOfShape& Value() const;
+
+
+
+
+  DEFINE_STANDARD_RTTI(TopTools_DataMapNodeOfDataMapOfShapeMapOfShape)
+
+protected:
+
+
+
+
+private: 
+
+
+TopoDS_Shape myKey;
+TopTools_MapOfShape myValue;
+
+
+};
+
+#define TheKey TopoDS_Shape
+#define TheKey_hxx <TopoDS_Shape.hxx>
+#define TheItem TopTools_MapOfShape
+#define TheItem_hxx <TopTools_MapOfShape.hxx>
+#define Hasher TopTools_ShapeMapHasher
+#define Hasher_hxx <TopTools_ShapeMapHasher.hxx>
+#define TCollection_DataMapNode TopTools_DataMapNodeOfDataMapOfShapeMapOfShape
+#define TCollection_DataMapNode_hxx <TopTools_DataMapNodeOfDataMapOfShapeMapOfShape.hxx>
+#define TCollection_DataMapIterator TopTools_DataMapIteratorOfDataMapOfShapeMapOfShape
+#define TCollection_DataMapIterator_hxx <TopTools_DataMapIteratorOfDataMapOfShapeMapOfShape.hxx>
+#define Handle_TCollection_DataMapNode Handle_TopTools_DataMapNodeOfDataMapOfShapeMapOfShape
+#define TCollection_DataMapNode_Type_() TopTools_DataMapNodeOfDataMapOfShapeMapOfShape_Type_()
+#define TCollection_DataMap TopTools_DataMapOfShapeMapOfShape
+#define TCollection_DataMap_hxx <TopTools_DataMapOfShapeMapOfShape.hxx>
+
+#include <TCollection_DataMapNode.lxx>
+
+#undef TheKey
+#undef TheKey_hxx
+#undef TheItem
+#undef TheItem_hxx
+#undef Hasher
+#undef Hasher_hxx
+#undef TCollection_DataMapNode
+#undef TCollection_DataMapNode_hxx
+#undef TCollection_DataMapIterator
+#undef TCollection_DataMapIterator_hxx
+#undef Handle_TCollection_DataMapNode
+#undef TCollection_DataMapNode_Type_
+#undef TCollection_DataMap
+#undef TCollection_DataMap_hxx
+
+
+// other Inline functions and methods (like "C++: function call" methods)
+
+
+#endif
Index: oce/inc/TopTools_DataMapOfShapeMapOfShape.hxx
===================================================================
--- /dev/null
+++ oce/inc/TopTools_DataMapOfShapeMapOfShape.hxx
@@ -0,0 +1,115 @@
+// This file is generated by WOK (CPPExt).
+// Please do not edit this file; modify original file instead.
+// The copyright and license terms as defined for the original file apply to 
+// this header file considered to be the "object code" form of the original source.
+
+#ifndef _TopTools_DataMapOfShapeMapOfShape_HeaderFile
+#define _TopTools_DataMapOfShapeMapOfShape_HeaderFile
+
+#ifndef _Standard_HeaderFile
+#include <Standard.hxx>
+#endif
+#ifndef _Standard_DefineAlloc_HeaderFile
+#include <Standard_DefineAlloc.hxx>
+#endif
+#ifndef _Standard_Macro_HeaderFile
+#include <Standard_Macro.hxx>
+#endif
+
+#ifndef _TCollection_BasicMap_HeaderFile
+#include <TCollection_BasicMap.hxx>
+#endif
+#ifndef _Handle_TopTools_DataMapNodeOfDataMapOfShapeMapOfShape_HeaderFile
+#include <Handle_TopTools_DataMapNodeOfDataMapOfShapeMapOfShape.hxx>
+#endif
+#ifndef _Standard_Integer_HeaderFile
+#include <Standard_Integer.hxx>
+#endif
+#ifndef _Standard_Boolean_HeaderFile
+#include <Standard_Boolean.hxx>
+#endif
+#ifndef _Standard_Address_HeaderFile
+#include <Standard_Address.hxx>
+#endif
+class Standard_DomainError;
+class Standard_NoSuchObject;
+class TopoDS_Shape;
+class TopTools_MapOfShape;
+class TopTools_ShapeMapHasher;
+class TopTools_DataMapNodeOfDataMapOfShapeMapOfShape;
+class TopTools_DataMapIteratorOfDataMapOfShapeMapOfShape;
+
+
+
+class TopTools_DataMapOfShapeMapOfShape  : public TCollection_BasicMap {
+public:
+
+  DEFINE_STANDARD_ALLOC
+
+  
+  Standard_EXPORT   TopTools_DataMapOfShapeMapOfShape(const Standard_Integer NbBuckets = 1);
+  
+  Standard_EXPORT     TopTools_DataMapOfShapeMapOfShape& Assign(const TopTools_DataMapOfShapeMapOfShape& Other) ;
+    TopTools_DataMapOfShapeMapOfShape& operator =(const TopTools_DataMapOfShapeMapOfShape& Other) 
+{
+  return Assign(Other);
+}
+  
+  Standard_EXPORT     void ReSize(const Standard_Integer NbBuckets) ;
+  
+  Standard_EXPORT     void Clear() ;
+~TopTools_DataMapOfShapeMapOfShape()
+{
+  Clear();
+}
+  
+  Standard_EXPORT     Standard_Boolean Bind(const TopoDS_Shape& K,const TopTools_MapOfShape& I) ;
+  
+  Standard_EXPORT     Standard_Boolean IsBound(const TopoDS_Shape& K) const;
+  
+  Standard_EXPORT     Standard_Boolean UnBind(const TopoDS_Shape& K) ;
+  
+  Standard_EXPORT    const TopTools_MapOfShape& Find(const TopoDS_Shape& K) const;
+   const TopTools_MapOfShape& operator()(const TopoDS_Shape& K) const
+{
+  return Find(K);
+}
+  
+  Standard_EXPORT     TopTools_MapOfShape& ChangeFind(const TopoDS_Shape& K) ;
+    TopTools_MapOfShape& operator()(const TopoDS_Shape& K) 
+{
+  return ChangeFind(K);
+}
+  
+  Standard_EXPORT     Standard_Address Find1(const TopoDS_Shape& K) const;
+  
+  Standard_EXPORT     Standard_Address ChangeFind1(const TopoDS_Shape& K) ;
+
+
+
+
+
+protected:
+
+
+
+
+
+private:
+
+  
+  Standard_EXPORT   TopTools_DataMapOfShapeMapOfShape(const TopTools_DataMapOfShapeMapOfShape& Other);
+
+
+
+
+};
+
+
+
+
+
+// other Inline functions and methods (like "C++: function call" methods)
+
+
+#endif
Index: oce/src/BOP/BOP_BuilderTools.cxx
===================================================================
--- oce.orig/src/BOP/BOP_BuilderTools.cxx
+++ oce/src/BOP/BOP_BuilderTools.cxx
@@ -298,6 +298,7 @@ BooleanOperations_StateOfShape
   TColStd_IndexedMapOfInteger aFFIndices;
 
   aNb=aFFs.Extent();
+  aFFMap.ReSize(aNb);
   for (i=1; i<=aNb; i++) {
     BOPTools_SSInterference& aFF=aFFs(i);
     // Faces
Index: oce/src/BOP/BOP_CorrectTolerances.cxx
===================================================================
--- oce.orig/src/BOP/BOP_CorrectTolerances.cxx
+++ oce/src/BOP/BOP_CorrectTolerances.cxx
@@ -534,7 +534,8 @@ void CheckEdge (const TopoDS_Edge& Ed, c
     dd=0.1*Tol;
     Tol*=Tol;
 
-    const TopLoc_Location& Eloc = E.Location();
+    const TopLoc_Location& Vinvloc = aVertex.Location().Inverted();
+    const TopLoc_Location& VinvEloc = Vinvloc * E.Location();
     BRep_ListIteratorOfListOfPointRepresentation itpr;
     
     Handle(BRep_TEdge)& TE = *((Handle(BRep_TEdge)*)&E.TShape());
@@ -542,7 +543,7 @@ void CheckEdge (const TopoDS_Edge& Ed, c
     while (itcr.More()) {
       const Handle(BRep_CurveRepresentation)& cr = itcr.Value();
       const TopLoc_Location& loc = cr->Location();
-      TopLoc_Location L = (Eloc * loc).Predivided(aVertex.Location());
+      TopLoc_Location L = VinvEloc * loc;
       
       if (cr->IsCurve3D()) {
 	const Handle(Geom_Curve)& C = cr->Curve3D();
Index: oce/src/BOP/BOP_FaceBuilder.cxx
===================================================================
--- oce.orig/src/BOP/BOP_FaceBuilder.cxx
+++ oce/src/BOP/BOP_FaceBuilder.cxx
@@ -45,6 +45,8 @@
 #include <TopTools_DataMapOfShapeShape.hxx>
 #include <TopTools_DataMapOfShapeListOfShape.hxx>
 #include <TopTools_DataMapIteratorOfDataMapOfShapeListOfShape.hxx>
+#include <TopTools_MapOfShape.hxx>
+#include <TopTools_DataMapOfShapeMapOfShape.hxx>
 
 #include <TopoDS.hxx>
 #include <TopoDS_Face.hxx>
@@ -81,6 +83,7 @@ static
 static
   Standard_Boolean IsInside(const TopoDS_Shape& theHole,
 			    const TopoDS_Shape& theF2,
+			    const TopTools_MapOfShape& aME2,
 			    const Handle(IntTools_Context)& theContext);
 static 
   void DoTopologicalVerification(TopoDS_Face& F);
@@ -528,6 +531,19 @@ void BOP_FaceBuilder::PerformAreas(BOP_W
   }
   //
   // 2. Find outer growth shell that is most close to each hole shell
+  Standard_Integer numberOfNewFaces = aNewFaces.Extent();
+  TopTools_DataMapOfShapeMapOfShape aMFFx(numberOfNewFaces);
+  aIt1.Initialize(aNewFaces);
+  for (Standard_Integer i = 0; aIt1.More(); aIt1.Next(), ++i) {
+    const TopoDS_Shape& aF=aIt1.Value();
+    TopTools_MapOfShape aMFE;
+    TopExp_Explorer Ex(aF, TopAbs_EDGE);
+    while (Ex.More()) {
+      aMFE.Add(Ex.Current());
+      Ex.Next();
+    }
+    aMFFx.Bind(aF, aMFE);
+  }
   aIt2.Initialize(aHoleWires);
   for (; aIt2.More(); aIt2.Next()) {
     const TopoDS_Shape& aHole = aIt2.Value();
@@ -536,13 +552,13 @@ void BOP_FaceBuilder::PerformAreas(BOP_W
     for ( ; aIt1.More(); aIt1.Next()) {
       const TopoDS_Shape& aF=aIt1.Value();
       //
-      if (!IsInside(aHole, aF, myContext)){
+      if (!IsInside(aHole, aF, aMFFx.Find(aF), myContext)){
         continue;
       }
       //
       if ( aInOutMap.IsBound (aHole)){
         const TopoDS_Shape& aF2=aInOutMap(aHole);
-        if (IsInside(aF, aF2, myContext)) {
+        if (IsInside(aF, aF2, aMFFx.Find(aF2), myContext)) {
           aInOutMap.UnBind(aHole);
           aInOutMap.Bind (aHole, aF);
         }
@@ -566,6 +582,8 @@ void BOP_FaceBuilder::PerformAreas(BOP_W
       }
     }
   }// for (; aIt2.More(); aIt2.Next())
+  aIt1.Initialize(aNewFaces);
+  aMFFx.Clear();
   //
   // 3. Add aHoles to Faces
   aItMSH.Initialize(aMSH);
@@ -668,6 +686,7 @@ Standard_Boolean IsHole(const TopoDS_Sha
 //=======================================================================
 Standard_Boolean IsInside(const TopoDS_Shape& theHole,
                           const TopoDS_Shape& theF2,
+                          const TopTools_MapOfShape& aME2,
                           const Handle(IntTools_Context)& theContext)
 {
   Standard_Boolean bRet;
@@ -675,15 +694,12 @@ Standard_Boolean IsInside(const TopoDS_S
   
   TopAbs_State aState;
   TopExp_Explorer aExp;
-  TopTools_IndexedMapOfShape aME2;
   gp_Pnt2d aP2D;
   //
   bRet=Standard_False;
   aState=TopAbs_UNKNOWN;
   const TopoDS_Face& aF2=TopoDS::Face(theF2);
   //
-  TopExp::MapShapes(aF2, TopAbs_EDGE, aME2);
-  //
   aExp.Init(theHole, TopAbs_EDGE);
   if (aExp.More()) {
     const TopoDS_Edge& aE = TopoDS::Edge(aExp.Current());
Index: oce/src/BOP/BOP_ShellSolid_3.cxx
===================================================================
--- oce.orig/src/BOP/BOP_ShellSolid_3.cxx
+++ oce/src/BOP/BOP_ShellSolid_3.cxx
@@ -77,6 +77,7 @@
 //  purpose:
 // =====================================================================================================================
 Standard_Boolean BOP_ShellSolid::SplitFace(const Standard_Integer theFaceIndex,
+					   const TColStd_IndexedMapOfInteger& aFFIndicesMap,
 					   TopTools_DataMapOfShapeInteger& theMapOfEdgeIndex,
 					   TopTools_ListOfShape& theListOfFace) const
 {
@@ -100,12 +101,11 @@ Standard_Boolean BOP_ShellSolid::SplitFa
 
 
   Standard_Integer i = 0;
+  Standard_Integer aNbj = aFFIndicesMap.Extent();
 
-  for(i = 1; i <= aFFs.Length(); i++) {
-    BOPTools_SSInterference& aFF = aFFs(i);
-
-    if((aFF.Index1() != theFaceIndex) && (aFF.Index2() != theFaceIndex))
-      continue;
+  for(i = 1; i <= aNbj; i++) {
+    Standard_Integer iFF = aFFIndicesMap(i);
+    BOPTools_SSInterference& aFF = aFFs(iFF);
 
     BOPTools_SequenceOfCurves& aSC = aFF.Curves();
     Standard_Integer aNbCurves = aSC.Length();
@@ -234,26 +234,12 @@ Standard_Boolean BOP_ShellSolid::SplitFa
     }
   }
 
-  BOPTColStd_IndexedDataMapOfIntegerIndexedMapOfInteger aFFMap;
-  BOP_BuilderTools::DoMap(aFFs, aFFMap);
-
-  Standard_Integer aNb = aFFMap.Extent();
-
-  for (i = 1; i <= aNb; i++) {
-    Standard_Integer nF1 = aFFMap.FindKey(i);
-
-    if(nF1 != theFaceIndex)
-      continue;
-
-    const TColStd_IndexedMapOfInteger& aFFIndicesMap=aFFMap.FindFromIndex(i);
-    Standard_Integer aNbj = aFFIndicesMap.Extent();
     Standard_Integer j = 0;
-
     for (j = 1; j <= aNbj; j++) {
       Standard_Integer iFF = aFFIndicesMap(j);
       BOPTools_SSInterference& aFF = aFFs(iFF);
       //
-      Standard_Integer nF2 = aFF.OppositeIndex(nF1);
+      Standard_Integer nF2 = aFF.OppositeIndex(theFaceIndex);
 
       if(nF2 <= 0)
 	continue;
@@ -301,7 +287,6 @@ Standard_Boolean BOP_ShellSolid::SplitFa
 	}
       }
     }
-  }
 
   // process internal edges
   BOP_WireEdgeSet aFilteredWES (aFace);
Index: oce/src/BOP/BOP_SolidSolid.cxx
===================================================================
--- oce.orig/src/BOP/BOP_SolidSolid.cxx
+++ oce/src/BOP/BOP_SolidSolid.cxx
@@ -342,6 +342,9 @@ void BOP_SolidSolid::PrepareReferences()
   BOPTColStd_IndexedDataMapOfIntegerIndexedMapOfInteger aFFMap;
   BOP_BuilderTools::DoMap(aFFs, aFFMap);
   //
+  TColStd_DataMapOfIntegerListOfInteger aMapOfEdgeFaces;
+  DoEdgesAdjacentFaces(aMapOfEdgeFaces);
+  //
   aNb=aFFMap.Extent();
   for (i=1; i<=aNb; i++) {
     // 
@@ -374,7 +377,7 @@ void BOP_SolidSolid::PrepareReferences()
 	}
 	else {
 	   if(iRank == 1) {
-	     bAddFace = TakeOnSplit(nFSpl, nF1);
+	     bAddFace = TakeOnSplit(nFSpl, nF1, aMapOfEdgeFaces);
 	  }
 	}
 
Index: oce/src/BOP/BOP_SolidSolid_1.cxx
===================================================================
--- oce.orig/src/BOP/BOP_SolidSolid_1.cxx
+++ oce/src/BOP/BOP_SolidSolid_1.cxx
@@ -85,14 +85,9 @@ Standard_Integer GetIndex(const TopoDS_S
 			  const BooleanOperations_ShapesDataStructure& theDS);
 
 static
-void GetAttachedFaces(const Standard_Integer   theEdgeIndex,
-		      const Standard_Integer   theFaceIndex,
-		      const BOPTools_DSFiller&        theDSFiller,
-		      TColStd_ListOfInteger&   theListOfFaces);
-
-static
 void GetStatesOfAdjacentFaces(const TColStd_ListOfInteger& theListOfFacesToCheck,
 			      const BOPTools_DSFiller&     theDSFiller,
+			      const TColStd_DataMapOfIntegerListOfInteger& theMapOfEdgeFaces,
 			      TColStd_MapOfInteger&        theMapOfUsedIndices,
 			      Standard_Boolean&            bFoundINOUT,
 			      Standard_Boolean&            bFoundININ,
@@ -158,6 +153,7 @@ void BOP_SolidSolid::PrepareFaceSplits()
     // 
 
     nF1 = aFFMap.FindKey(i);
+    const TColStd_IndexedMapOfInteger& aFFIndicesMap=aFFMap.FindFromIndex(i);
     TopoDS_Face aF1 = TopoDS::Face(aDS.Shape(nF1));
     
     iRank   = aDS.Rank(nF1);
@@ -165,7 +161,7 @@ void BOP_SolidSolid::PrepareFaceSplits()
     TopTools_DataMapOfShapeInteger aMapOfEdgeIndex;
     TopTools_ListOfShape aListOfSplits;
 
-    if(SplitFace(nF1, aMapOfEdgeIndex, aListOfSplits)) {
+    if(SplitFace(nF1, aFFIndicesMap, aMapOfEdgeIndex, aListOfSplits)) {
 
       DoInternalVertices(nF1, aListOfSplits);
 
@@ -200,10 +196,11 @@ void BOP_SolidSolid::PrepareFaceSplits()
 	  }
 	}
 
-	if(!bFoundFaceState) {
-	  // 
-	  if(ComputeStateByInsidePoints(aNewFaceIndex, nF1, iRank, aFFMap, aState)) {
-
+	// If there are more than 100 shapes, call ComputeStateForAnalyticalSurfaces first
+	Standard_Boolean bInsidePointsFirst = aNb < 100;
+	for (int step = 0; !bFoundFaceState && step < 2; ++step) {
+	  if((step==0) == bInsidePointsFirst) {
+	  if(ComputeStateByInsidePoints(aNewFaceIndex, nF1, iRank, aFFIndicesMap, aState)) {
 	    if(aState != TopAbs_ON) {
 	      BooleanOperations_StateOfShape aConvertedState = BOPTools_StateFiller::ConvertState(aState);
 
@@ -211,10 +208,8 @@ void BOP_SolidSolid::PrepareFaceSplits()
 	    }
 	    bFoundFaceState = Standard_True;
 	  }
-	}
-
-	if(!bFoundFaceState) {
-
+	  } else {
+	  //
 	  if(ComputeStateForAnalyticalSurfaces(aNewFaceIndex, nF1, aFFMap, *myDSFiller, aState)) {
 	    if(aState != TopAbs_ON) {
 	      BooleanOperations_StateOfShape aConvertedState = BOPTools_StateFiller::ConvertState(aState);
@@ -223,6 +218,7 @@ void BOP_SolidSolid::PrepareFaceSplits()
 	      bFoundFaceState = Standard_True;
 	    }
 	  }
+	  }
 	}
       }
     }
@@ -308,7 +304,7 @@ Standard_Boolean BOP_SolidSolid::
   ComputeStateByInsidePoints(const Standard_Integer theFaceIndex,
 			     const Standard_Integer theBaseFaceIndex,
 			     const Standard_Integer theFaceRank,
-			     const BOPTColStd_IndexedDataMapOfIntegerIndexedMapOfInteger& theFFMap,
+			     const TColStd_IndexedMapOfInteger& aFFIndicesMap,
 			     TopAbs_State& theState) 
 
 {
@@ -329,17 +325,8 @@ Standard_Boolean BOP_SolidSolid::
   TopoDS_Face aFace = TopoDS::Face(aS);
   //
   //
-  Standard_Integer i = 0, j = 0, aNb = 0;
-  aNb = theFFMap.Extent();
+  Standard_Integer j = 0;
 
-  for (i=1; i<=aNb; i++) {
-    // 
-    Standard_Integer nF1 = theFFMap.FindKey(i);
-
-    if(nF1 != theBaseFaceIndex)
-      continue;
-
-    const TColStd_IndexedMapOfInteger& aFFIndicesMap=theFFMap.FindFromIndex(i);
     Standard_Integer aNbj = aFFIndicesMap.Extent();
 
     for (j=1; j<=aNbj; j++) {
@@ -348,7 +335,7 @@ Standard_Boolean BOP_SolidSolid::
       Standard_Boolean bIsTouchCase = aFF.IsTangentFaces();
 
       if (bIsTouchCase) {
-	Standard_Integer nF2 = aFF.OppositeIndex(nF1);
+	Standard_Integer nF2 = aFF.OppositeIndex(theBaseFaceIndex);
 	const TopoDS_Face& aF2 = TopoDS::Face(aDS.Shape(nF2));
 
 	if(BOPTools_Tools3D::CheckSameDomainFaceInside(aFace, aF2, pPaveFiller->Context())) {
@@ -357,7 +344,6 @@ Standard_Boolean BOP_SolidSolid::
 	}
       }
     }
-  }
   const TopoDS_Shape& aTool = (theFaceRank == 1) ? aDS.Tool() : aDS.Object();
   TopoDS_Solid aRefSolid;
 
@@ -387,7 +373,8 @@ Standard_Boolean BOP_SolidSolid::
 //purpose  : 
 //=======================================================================
 Standard_Boolean BOP_SolidSolid::TakeOnSplit(const Standard_Integer theFaceIndex,
-					     const Standard_Integer theBaseFaceIndex) const
+					     const Standard_Integer theBaseFaceIndex,
+					     const TColStd_DataMapOfIntegerListOfInteger &aMapOfEdgeFaces) const
 {
   Standard_Boolean bTake = Standard_False;
 
@@ -415,7 +402,7 @@ Standard_Boolean BOP_SolidSolid::TakeOnS
   //
   GetStatesOfAdjacentFaces(aListOfFacesToCheck, 
 			   *myDSFiller, 
-			   aMapOfUsedIndices, 
+			   aMapOfEdgeFaces, aMapOfUsedIndices, 
 			   binout, binin, boutout);
   
   //zzf
@@ -479,86 +466,63 @@ Standard_Boolean BOP_SolidSolid::TakeOnS
   return bTake;
 }
 
-// ------------------------------------------------------------------------------------
-// static function: GetIndex
-// purpose:
-// ------------------------------------------------------------------------------------
-Standard_Integer GetIndex(const TopoDS_Shape& theShape, 
-			  const BooleanOperations_ShapesDataStructure& theDS)
+void BOP_SolidSolid::DoEdgesAdjacentFaces(TColStd_DataMapOfIntegerListOfInteger &aMapOfEdgeFaces) const
 {
-  Standard_Integer anIndex = 0, i = 0;
+  const BooleanOperations_ShapesDataStructure& aDS = myDSFiller->DS();
+  const TColStd_DataMapOfIntegerListOfInteger& aMap = myDSFiller->SplitFacePool();
+  Standard_Integer i;
 
-  anIndex = theDS.ShapeIndex(theShape, 1);
-  anIndex = (anIndex == 0) ? theDS.ShapeIndex(theShape, 2) : anIndex;
+  for(i = 1; i <= aDS.NumberOfInsertedShapes(); i++) {
+    if(aDS.GetShapeType(i) != TopAbs_FACE)
+      continue;
 
-  if(anIndex == 0) {
+    TColStd_ListOfInteger aListOfFaceIndex;
 
-    for (i = theDS.NumberOfSourceShapes() + 1; i <= theDS.NumberOfInsertedShapes(); i++) {
-      if(theShape.IsSame(theDS.Shape(i))) {
-	anIndex = i;
-	break;
+    if(!aMap.IsBound(i)) {
+      aListOfFaceIndex.Append(i);
+    }
+    else {
+      TColStd_ListIteratorOfListOfInteger anIttmp(aMap.Find(i));
+      for(; anIttmp.More(); anIttmp.Next()) {
+        aListOfFaceIndex.Append(anIttmp.Value());
+      }
+    }
+    TColStd_ListIteratorOfListOfInteger anIt(aListOfFaceIndex);
+    
+    for(; anIt.More(); anIt.Next()) {
+      const Standard_Integer nF = anIt.Value();
+      if(nF <= 0)
+        continue;
+      const TopoDS_Shape& aFace = aDS.Shape(nF);
+      TopExp_Explorer anExpE(aFace, TopAbs_EDGE);
+
+      for(; anExpE.More(); anExpE.Next()) {
+        const TopoDS_Shape& anEdge = anExpE.Current();
+        Standard_Integer nE = GetIndex(anEdge, aDS);
+        if(!aMapOfEdgeFaces.IsBound(nE)) {
+          TColStd_ListOfInteger thelist;
+          aMapOfEdgeFaces.Bind(nE, thelist);
+        }
+        aMapOfEdgeFaces.ChangeFind(nE).Append(nF);
       }
     }
   }
-
-  return anIndex;
 }
 
 // ------------------------------------------------------------------------------------
-// static function: GetAttachedFaces
+// static function: GetIndex
 // purpose:
 // ------------------------------------------------------------------------------------
-void GetAttachedFaces(const Standard_Integer   theEdgeIndex,
-		      const Standard_Integer   theFaceIndex,
-		      const BOPTools_DSFiller&        theDSFiller,
-		      TColStd_ListOfInteger&   theListOfFaces)
+Standard_Integer GetIndex(const TopoDS_Shape& theShape, 
+			  const BooleanOperations_ShapesDataStructure& theDS)
 {
-  theListOfFaces.Clear();
-  const BooleanOperations_ShapesDataStructure& aDS = theDSFiller.DS();
-  const TColStd_DataMapOfIntegerListOfInteger& aMap = theDSFiller.SplitFacePool();
-
-  Standard_Integer i = 0;
-
-  for(i = 1; i <= aDS.NumberOfInsertedShapes(); i++) {
-
-    if(aDS.GetShapeType(i) == TopAbs_FACE) {
-      TColStd_ListOfInteger aListOfFaceIndex;
-
-      if(!aMap.IsBound(i)) {
-	if(theFaceIndex == i)
-	  continue;
-	aListOfFaceIndex.Append(i);
-      }
-      else {
-	TColStd_ListIteratorOfListOfInteger anIttmp(aMap.Find(i));
-
-	for(; anIttmp.More(); anIttmp.Next()) {
-	  if(theFaceIndex == anIttmp.Value())
-	    continue;
-	  aListOfFaceIndex.Append(anIttmp.Value());
-	}
-      }
+  Standard_Integer anIndex = 0, i = 0;
 
-      TColStd_ListIteratorOfListOfInteger anIt(aListOfFaceIndex);
-      
-      for(; anIt.More(); anIt.Next()) {
-	if(anIt.Value() <= 0)
-	  continue;
-	const TopoDS_Shape& aFace = aDS.Shape(anIt.Value());
-	TopExp_Explorer anExpE(aFace, TopAbs_EDGE);
+  anIndex = theDS.ShapeIndex(theShape, 1);
+  anIndex = (anIndex == 0) ? theDS.ShapeIndex(theShape, 2) : anIndex;
+  anIndex = (anIndex == 0) ? theDS.ShapeIndex(theShape, 3) : anIndex;
 
-	for(; anExpE.More(); anExpE.Next()) {
-	  const TopoDS_Shape& anEdge = anExpE.Current();
-	  Standard_Integer nE = GetIndex(anEdge, aDS);
-
-	  if(theEdgeIndex == nE) {
-	    theListOfFaces.Append(anIt.Value());
-	    break;
-	  }
-	}
-      }
-    }
-  }  
+  return anIndex;
 }
 //=======================================================================
 //function : GetStatesOfAdjacentFaces
@@ -566,6 +530,7 @@ void GetAttachedFaces(const Standard_Int
 //=======================================================================
 void GetStatesOfAdjacentFaces(const TColStd_ListOfInteger& theListOfFacesToCheck,
 			      const BOPTools_DSFiller&     theDSFiller,
+			      const TColStd_DataMapOfIntegerListOfInteger& aMapOfEdgeFaces,
 			      TColStd_MapOfInteger&        theMapOfUsedIndices,
 			      Standard_Boolean&            bFoundINOUT,
 			      Standard_Boolean&            bFoundININ,
@@ -604,10 +569,8 @@ void GetStatesOfAdjacentFaces(const TCol
       }
       //
       theMapOfUsedIndices.Add(nE);
-      TColStd_ListOfInteger aListOfFaces, aListOfIN, aListOfOUT;
-      GetAttachedFaces(nE, nF, theDSFiller, aListOfFaces);
-    
-      TColStd_ListIteratorOfListOfInteger anIt(aListOfFaces);
+      TColStd_ListOfInteger aListOfIN, aListOfOUT;
+      TColStd_ListIteratorOfListOfInteger anIt(aMapOfEdgeFaces.Find(nE));
 
       for(; anIt.More(); anIt.Next()) {
 	nFa=anIt.Value();
@@ -635,7 +598,7 @@ void GetStatesOfAdjacentFaces(const TCol
   }
 
   if(!aLisOfON.IsEmpty() && (theMapOfUsedIndices.Extent() <= aDS.NumberOfInsertedShapes())) {
-    GetStatesOfAdjacentFaces(aLisOfON, theDSFiller, theMapOfUsedIndices, bFoundINOUT, bFoundININ, bFoundOUTOUT);
+    GetStatesOfAdjacentFaces(aLisOfON, theDSFiller, aMapOfEdgeFaces, theMapOfUsedIndices, bFoundINOUT, bFoundININ, bFoundOUTOUT);
   }
 }
 
Index: oce/src/BOP/BOP_WireEdgeSet.cxx
===================================================================
--- oce.orig/src/BOP/BOP_WireEdgeSet.cxx
+++ oce/src/BOP/BOP_WireEdgeSet.cxx
@@ -380,13 +380,8 @@ static void GetOrientationVOnE(const Top
   Standard_Integer BOP_WireEdgeSet::NbClosingShapes(const TopTools_ListOfShape & L) const
 {
   Standard_Integer n = 0;
-  TopTools_ListIteratorOfListOfShape it(L);
-  for ( ; it.More(); it.Next()) {
-    const TopoDS_Shape& S = it.Value();
-    if ( IsClosed(S) ) {
-      n++;
-    }
-  }
+  // OCCT implementation is buggy, IsClosed always return Standard_False, so
+  // do not compute anything
   return n;
 }
 
@@ -429,21 +424,9 @@ static void GetOrientationVOnE(const Top
 //=======================================================================
   Standard_Boolean BOP_WireEdgeSet::IsClosed(const TopoDS_Shape& E) const
 {
-  const TopoDS_Edge& EE = TopoDS::Edge(E);
-  Standard_Boolean closed = BRep_Tool::IsClosed(EE,myFace);
-
-  // modified by NIZHNY-MKK  Wed May 12 15:44:10 2004.BEGIN
-  if(closed) {
-    TopoDS_Edge aE1, aE2;
-    BOPTools_Tools3D::GetSeam (myFace, aE1, aE2);
-
-    if(aE1.IsNull() || aE2.IsNull()) {
-      closed = Standard_False;
-    }
-  }
-  // modified by NIZHNY-MKK  Wed May 12 15:44:14 2004.END
-
-  return closed;
+  // OCCT implementation is buggy, it always return Standard_False, so
+  // do not compute anything
+  return Standard_False;
 }
 
 //=======================================================================
Index: oce/src/BooleanOperations/BooleanOperations_ShapesDataStructure.cxx
===================================================================
--- oce.orig/src/BooleanOperations/BooleanOperations_ShapesDataStructure.cxx
+++ oce/src/BooleanOperations/BooleanOperations_ShapesDataStructure.cxx
@@ -194,8 +194,10 @@ const static Standard_Integer AddedValue
 {
   if (iRank == 1)
     return myShapeIndexMapObj;
-  else 
+  else if (iRank == 2)
     return myShapeIndexMapTool;
+  else
+    return myShapeIndexMapInserted;
 }
 //===========================================================================
 //function : ShapeIndex
@@ -338,6 +340,11 @@ void BooleanOperations_ShapesDataStructu
 
   myListOfShapeAndInterferences[myNumberOfInsertedShapes].myState = BooleanOperations_UNKNOWN;
   myNumberOfInsertedShapes++;
+
+  // Insert new shapes into myShapeIndexMapInserted
+  if (myNumberOfInsertedShapes > myNumberOfShapesOfTheObject+myNumberOfShapesOfTheTool) {
+    myShapeIndexMapInserted.Add(S, myNumberOfInsertedShapes);
+  }
 }
 
 //===========================================================================
Index: oce/src/IntPolyh/IntPolyh_MaillageAffinage.cdl
===================================================================
--- oce.orig/src/IntPolyh/IntPolyh_MaillageAffinage.cdl
+++ oce/src/IntPolyh/IntPolyh_MaillageAffinage.cdl
@@ -302,7 +302,6 @@ fields
     TTriangles1        : ArrayOfTriangles   from IntPolyh;
     TTriangles2        : ArrayOfTriangles   from IntPolyh;
     TTrianglesContacts : ArrayOfCouples     from IntPolyh;
-    TStartPoints       : ArrayOfStartPoints from IntPolyh;
     
     myEnlargeZone    : Boolean from Standard;
 
Index: oce/src/IntPolyh/IntPolyh_MaillageAffinage.cxx
===================================================================
--- oce.orig/src/IntPolyh/IntPolyh_MaillageAffinage.cxx
+++ oce/src/IntPolyh/IntPolyh_MaillageAffinage.cxx
@@ -170,15 +170,6 @@ IntPolyh_MaillageAffinage::IntPolyh_Mail
   FlecheMoy2(0.0), 
   myEnlargeZone(Standard_False) 
 { 
-   TPoints1.Init(10000);
-   TEdges1.Init(30000);
-   TTriangles1.Init(20000);
-   
-   TPoints2.Init(10000);
-   TEdges2.Init(30000);
-   TTriangles2.Init(20000);
-  
-   TStartPoints.Init(10000);
 }
 //=======================================================================
 //function : IntPolyh_MaillageAffinage
@@ -207,16 +198,7 @@ IntPolyh_MaillageAffinage::IntPolyh_Mail
   FlecheMoy2(0.0), 
   myEnlargeZone(Standard_False)
 { 
-   TPoints1.Init(10000);
-   TEdges1.Init(30000);
-   TTriangles1.Init(20000);
-
-   TPoints2.Init(10000);
-   TEdges2.Init(30000);
-   TTriangles2.Init(20000);
-   
-   TStartPoints.Init(10000);
- }
+}
 //=======================================================================
 //function : FillArrayOfPnt
 //purpose  : Compute points on one surface and fill an array of points
@@ -351,6 +333,7 @@ void IntPolyh_MaillageAffinage::FillArra
   }
   //
   iCnt=0;
+  TPoints.Init(aNbU * aNbV);
   for(i=1; i<=aNbU; ++i){
     bDegI=(aID1==i || aID2==i);
     aU=Upars(i);
@@ -370,7 +353,6 @@ void IntPolyh_MaillageAffinage::FillArra
     }
   }
   //
-  TPoints.SetNbItems(iCnt);
   //
   IntCurveSurface_ThePolyhedronOfHInter polyhedron(aS, Upars, Vpars);
   //
@@ -422,6 +404,7 @@ void IntPolyh_MaillageAffinage::FillArra
     DegeneratedIndex(Upars, aNbU, aS, 2, aID1, aID2);
   }
   //
+  TPoints.Init(aNbU * aNbV);
   iCnt=0;
   for(i=1; i<=aNbU; ++i){
     bDegI=(aID1==i || aID2==i);
@@ -457,8 +440,6 @@ void IntPolyh_MaillageAffinage::FillArra
     }
   }
   //
-  TPoints.SetNbItems(iCnt);
-  //
   Tol*=1.2;
   //
   Standard_Real a1,a2,a3,b1,b2,b3;
@@ -619,6 +600,17 @@ void IntPolyh_MaillageAffinage::FillArra
   Standard_Integer NbSamplesU=(SurfID==1)? NbSamplesU1:NbSamplesU2;
   Standard_Integer NbSamplesV=(SurfID==1)? NbSamplesV1:NbSamplesV2;
 
+  // number of edges: 3 + 3* (NbSamplesV-2) + 3 * (NbSamplesU-2) +
+  //    3 * (NbSamplesU-2) * (NbSamplesV-2) + (NbSamplesV-1) + (NbSamplesU-1)
+  //  = 3 * NbSamplesU * NbSamplesV - 2 * NbSamplesU - 2 * NbSamplesV + 1
+  //  = 3 * (NbSamplesU-1) * (NbSamplesV-1) + NbSamplesU + NbSamplesV - 2
+  Standard_Integer numberOfEdges = 3*(NbSamplesU-1)*(NbSamplesV-1) + (NbSamplesU-1) + (NbSamplesV-1);
+  // Corner cases
+  if (NbSamplesU <= 1 && NbSamplesV <= 1) numberOfEdges = 3;
+  else if (NbSamplesU <= 1) numberOfEdges = 4 * (NbSamplesV-1);
+  else if (NbSamplesV <= 1) numberOfEdges = 4 * (NbSamplesU-1);
+  TEdges.Init(numberOfEdges);
+
   Standard_Integer CpteurTabEdges=0;
 
   //maillage u0 v0
@@ -733,7 +725,6 @@ void IntPolyh_MaillageAffinage::FillArra
     TEdges[CpteurTabEdges].SetSecondTriangle(BoucleMeshV*2*(NbSamplesV-1)+(NbSamplesV-2)*2);
     CpteurTabEdges++;
   }
-  TEdges.SetNbItems(CpteurTabEdges);
 
 }
 
@@ -755,6 +746,8 @@ void IntPolyh_MaillageAffinage::FillArra
   Standard_Integer NbSamplesU=(SurfID==1)? NbSamplesU1:NbSamplesU2;
   Standard_Integer NbSamplesV=(SurfID==1)? NbSamplesV1:NbSamplesV2;
 
+  // number of triangles: 2 * (NbSamplesU-1) * (NbSamplesV-1)
+  TTriangles.Init(2 * (NbSamplesU-1) * (NbSamplesV-1));
   
   //To provide recursion, I associate a point with two triangles  
   for(Standard_Integer BoucleMeshU=0; BoucleMeshU<NbSamplesU-1; BoucleMeshU++){
@@ -792,7 +785,6 @@ void IntPolyh_MaillageAffinage::FillArra
     }
     PntInit++;//Pass the last point of the column
   }
-  TTriangles.SetNbItems(CpteurTabTriangles);
   const Standard_Integer FinTT = TTriangles.NbItems();
   if (FinTT==0) {
   }
@@ -3194,7 +3186,6 @@ Standard_Integer IntPolyh_MaillageAffina
 
 	  if ( (NbPoints>0)&&(NbPoints<3) ) {
 	    SP1.SetCoupleValue(i_S1,i_S2);
-	    TStartPoints[CpteurTabSP]=SP1;
 	    CpteurTabSP++;
 
 
@@ -3202,7 +3193,6 @@ Standard_Integer IntPolyh_MaillageAffina
 
 	  if(NbPoints==2) { 	  
 	    SP2.SetCoupleValue(i_S1,i_S2);
-	    TStartPoints[CpteurTabSP]=SP2;
 	    CpteurTabSP++;
 
 
@@ -3242,14 +3232,14 @@ Standard_Integer IntPolyh_MaillageAffina
 
   Standard_Real CoupleAngle=-2.0;
   for(Standard_Integer i_S1=0; i_S1<FinTT1; i_S1++) {
+    IntPolyh_Triangle &Triangle1 =  TTriangles1[i_S1];
+    if (!((Triangle1.IndiceIntersectionPossible() != 0) && (Triangle1.GetFleche() >= 0.0)))
+      continue;
     for(Standard_Integer i_S2=0; i_S2<FinTT2; i_S2++){
-      if ( (TTriangles1[i_S1].IndiceIntersectionPossible() != 0)
-	  &&(TTriangles1[i_S1].GetFleche() >= 0.0)
-	  && (TTriangles2[i_S2].IndiceIntersectionPossible() != 0)
-	  && (TTriangles2[i_S2].GetFleche() >= 0.0) ) {
+	  IntPolyh_Triangle &Triangle2 =  TTriangles2[i_S2];
+      if ((Triangle2.IndiceIntersectionPossible() != 0)
+	  && (Triangle2.GetFleche() >= 0.0) ) {
 	//If a triangle is dead or not in BSB, comparison is not possible
-	IntPolyh_Triangle &Triangle1 =  TTriangles1[i_S1];
-	IntPolyh_Triangle &Triangle2 =  TTriangles2[i_S2];
 	//
 	Standard_Integer iDeg1, iDeg2, iDeg3, iDeg;
     	//
