Index: oce/test/BRepAlgoAPI_test/CMakeLists.txt
===================================================================
--- oce.orig/test/BRepAlgoAPI_test/CMakeLists.txt
+++ oce/test/BRepAlgoAPI_test/CMakeLists.txt
@@ -1,8 +1 @@
-FILE(GLOB TEST_SOURCES *.cpp)
-SET(SOURCE_FILES ${TEST_SOURCES})
-
-ADD_EXECUTABLE(boolean_ops_test ${SOURCE_FILES})
-TARGET_LINK_LIBRARIES(boolean_ops_test TKPrim TKBO)
-TARGET_LINK_LIBRARIES(boolean_ops_test gcov ${GTEST_LIBRARY} ${GTEST_MAIN_LIBRARY})
-
-GTEST_ADD_TESTS(boolean_ops_test "" ${SOURCE_FILES})
+ADD_OCE_TEST(boolean_ops_test "TKPrim;TKBO")
Index: oce/test/BRepExtrema_test/BRepExtrema_test.cpp
===================================================================
--- /dev/null
+++ oce/test/BRepExtrema_test/BRepExtrema_test.cpp
@@ -0,0 +1,81 @@
+#include <BRepExtrema_DistShapeShape.hxx>
+#include <BRepPrimAPI_MakeSphere.hxx>
+#include <TopoDS_Shape.hxx>
+#include <gp_Pnt.hxx>
+#include <gp_Vec.hxx>
+#include <BRepBuilderAPI_MakeVertex.hxx>
+
+#include <gtest/gtest.h>
+
+/* @TODO: in the following tests, minimal distances between two shapes.
+It's not obvious anyway to figure out the relationship between the deflection passed to
+BRepExtrema_DistSS (related to the mesh quality) and the precision of the output.
+This has to be investigated further.
+*/
+
+TEST(BRepExtremaTestSuite, testDistSphereSphere)
+{
+    // the distance d between sphere1, centered at origin and radius r1, and
+    // sphere 2, centered at (a,0,0) and radius r2
+    // should be d = a-(r1+r2)
+    Standard_Real r1 = 10.0;
+    BRepPrimAPI_MakeSphere sphere1(r1);
+    TopoDS_Shape sphere1_shp = sphere1.Shape();
+     
+    Standard_Real a = 100.0;
+    Standard_Real r2 = 20.0;
+    gp_Pnt center2(a,0,0);
+    BRepPrimAPI_MakeSphere sphere2(center2,r2);
+    TopoDS_Shape sphere2_shp = sphere2.Shape();
+    
+    BRepExtrema_DistShapeShape distSS;
+    distSS.LoadS1(sphere1_shp);
+    distSS.LoadS2(sphere2_shp);
+    distSS.Perform();
+    
+    // should only be one minimal value
+    ASSERT_EQ(distSS.NbSolution(),1);
+    // this value should be
+    Standard_Real expected_result = a-(r1+r2);
+    Standard_Real min_dist = distSS.Value();
+    // @TODO: should compare with a precision
+    float abs_error = 0.001;
+    ASSERT_NEAR(expected_result,min_dist,abs_error);
+}
+
+TEST(BRepExtremaTestSuite, testDistSphereVertex)
+{
+    // the distance d between sphere1, centered at origin and radius r1, and
+    // vertex, a point of coordinates (a,b,c)
+    // should be d = sqrt(a^2+b^2+c^2)-r1
+    Standard_Real r1 = 10.0;
+    BRepPrimAPI_MakeSphere sphere1(r1);
+    TopoDS_Shape sphere1_shp = sphere1.Shape();
+     
+    Standard_Real a = 100.0;
+    Standard_Real b = 50.0;
+    Standard_Real c = 20.0;
+    
+    gp_Pnt point(a,b,c);
+    TopoDS_Vertex V=BRepBuilderAPI_MakeVertex(point).Vertex();
+    BRepExtrema_DistShapeShape distSS;
+    distSS.LoadS1(sphere1_shp);
+    distSS.LoadS2(V);
+    distSS.SetDeflection(0.001);
+    distSS.Perform();
+    
+    // should only be one minimal value
+    ASSERT_EQ(distSS.NbSolution(),1);
+    // this value should be
+    gp_Vec v(a,b,c);
+    Standard_Real expected_result = v.Magnitude()-r1;
+    Standard_Real min_dist = distSS.Value();
+    
+    float abs_error = 0.001;
+    ASSERT_NEAR(expected_result,min_dist,abs_error);
+}
+
+int main(int argc, char **argv){
+  testing::InitGoogleTest(&argc, argv);
+  return RUN_ALL_TESTS();
+}
Index: oce/test/BRepExtrema_test/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/test/BRepExtrema_test/CMakeLists.txt
@@ -0,0 +1 @@
+ADD_OCE_TEST(BRepExtrema_test "TKPrim")
Index: oce/test/BRepGProp_test/BRepGProp_test.cpp
===================================================================
--- oce.orig/test/BRepGProp_test/BRepGProp_test.cpp
+++ oce/test/BRepGProp_test/BRepGProp_test.cpp
@@ -1,5 +1,5 @@
 #include <BRepPrimAPI_MakeBox.hxx>
-#include <BRepPrimAPI_MakeSPhere.hxx>
+#include <BRepPrimAPI_MakeSphere.hxx>
 #include <BRepGProp.hxx>
 #include <GProp_GProps.hxx>
 #include <gtest/gtest.h>
Index: oce/test/BRepGProp_test/CMakeLists.txt
===================================================================
--- oce.orig/test/BRepGProp_test/CMakeLists.txt
+++ oce/test/BRepGProp_test/CMakeLists.txt
@@ -1,8 +1 @@
-FILE(GLOB TEST_SOURCES *.cpp)
-SET(SOURCE_FILES ${TEST_SOURCES})
-
-ADD_EXECUTABLE(BRepGProp_test ${SOURCE_FILES})
-TARGET_LINK_LIBRARIES(BRepGProp_test TKG2d TKPrim TKTopAlgo)
-TARGET_LINK_LIBRARIES(BRepGProp_test gcov ${GTEST_LIBRARY} ${GTEST_MAIN_LIBRARY})
-
-GTEST_ADD_TESTS(BRepGProp_test "" ${SOURCE_FILES})
+ADD_OCE_TEST(BRepGProp_test "TKG2d;TKPrim;TKTopAlgo")
Index: oce/test/BRepOffsetAPI_test/BRepOffsetAPI_test.cpp
===================================================================
--- /dev/null
+++ oce/test/BRepOffsetAPI_test/BRepOffsetAPI_test.cpp
@@ -0,0 +1,36 @@
+#include <BRepBuilderAPI_MakePolygon.hxx>
+#include <BRepPrimAPI_MakeBox.hxx>
+#include <BRepOffsetAPI_MakeEvolved.hxx>
+#include <BRepOffsetAPI_MakeOffsetShape.hxx>
+#include <gp_Pnt.hxx>
+#include <GeomAbs_JoinType.hxx>
+#include <TopoDS_Shape.hxx>
+#include <gtest/gtest.h>
+
+TEST(BRepOffsetAPITestSuite, testEvolvedShape)
+{
+    BRepBuilderAPI_MakePolygon P;
+    P.Add(gp_Pnt(0.,0.,0.));
+    P.Add(gp_Pnt(200.,0.,0.));
+    P.Add(gp_Pnt(200.,200.,0.));
+    P.Add(gp_Pnt(0.,200.,0.));
+    P.Add(gp_Pnt(0.,0.,0.));
+    BRepBuilderAPI_MakePolygon wprof(gp_Pnt(0.,0.,0.),gp_Pnt(-60.,-60.,-200.));
+    BRepOffsetAPI_MakeEvolved S(P.Wire(),wprof.Wire(),GeomAbs_Arc,Standard_True,Standard_False,Standard_True,0.0001);
+    S.Build();
+    ASSERT_TRUE(S.IsDone());
+}
+
+TEST(BRepOffsetAPITestSuite, testOffsetBox)
+{
+    BRepPrimAPI_MakeBox b(gp_Pnt(-100,-60,-80),150,200,170);
+    b.Build();
+    TopoDS_Shape b_shape = b.Shape();
+    BRepOffsetAPI_MakeOffsetShape offsetA(b_shape,60,0.01);
+    ASSERT_TRUE(offsetA.IsDone());
+}
+
+int main(int argc, char **argv){
+  testing::InitGoogleTest(&argc, argv);
+  return RUN_ALL_TESTS();
+}
Index: oce/test/BRepOffsetAPI_test/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/test/BRepOffsetAPI_test/CMakeLists.txt
@@ -0,0 +1 @@
+ADD_OCE_TEST(BRepOffsetAPI_test "TKOffset")
Index: oce/test/BRepPrimAPI_test/CMakeLists.txt
===================================================================
--- oce.orig/test/BRepPrimAPI_test/CMakeLists.txt
+++ oce/test/BRepPrimAPI_test/CMakeLists.txt
@@ -1,8 +1 @@
-FILE(GLOB TEST_SOURCES *.cpp)
-SET(SOURCE_FILES ${TEST_SOURCES})
-
-ADD_EXECUTABLE(BRepPrimAPI_test ${SOURCE_FILES})
-TARGET_LINK_LIBRARIES(BRepPrimAPI_test TKPrim)
-TARGET_LINK_LIBRARIES(BRepPrimAPI_test gcov ${GTEST_LIBRARY} ${GTEST_MAIN_LIBRARY})
-
-GTEST_ADD_TESTS(BRepPrimAPI_test "" ${SOURCE_FILES})
\ No newline at end of file
+ADD_OCE_TEST(BRepPrimAPI_test "TKPrim")
Index: oce/test/CMakeLists.txt
===================================================================
--- oce.orig/test/CMakeLists.txt
+++ oce/test/CMakeLists.txt
@@ -2,8 +2,53 @@
 # The OCE unittest framework use GoogleTest 1.6.0 (aka GTest)
 # The GTest source code is available in the /test/gtest-1.6.0 folder
 #
-SET(GTEST_ROOT ./gtest-1.6.0)
-FIND_PACKAGE(GTest)
+SET(GTEST_ROOT ${CMAKE_CURRENT_SOURCE_DIR}/gtest-1.6.0)
+
+INCLUDE_DIRECTORIES(${GTEST_ROOT}/include ${GTEST_ROOT})
+ADD_LIBRARY(gtest STATIC ${GTEST_ROOT}/src/gtest-all.cc )
+TARGET_LINK_LIBRARIES(gtest ${CMAKE_THREAD_LIBS_INIT})
+
+IF (USE_SOLUTION_FOLDERS)
+	SET_TARGET_PROPERTIES(gtest PROPERTIES FOLDER "Tests" )
+ENDIF(USE_SOLUTION_FOLDERS)
+
+# Copied from CMake
+# Thanks to Daniel Blezek <blezek@gmail.com> for the GTEST_ADD_TESTS code
+function(GTEST_ADD_TESTS executable extra_args)
+    if(NOT ARGN)
+        message(FATAL_ERROR "Missing ARGN: Read the documentation for GTEST_ADD_TESTS")
+    endif()
+    foreach(source ${ARGN})
+        file(READ "${source}" contents)
+        string(REGEX MATCHALL "TEST_?F?\\(([A-Za-z_0-9 ,]+)\\)" found_tests ${contents})
+        foreach(hit ${found_tests})
+            string(REGEX REPLACE ".*\\( *([A-Za-z_0-9]+), *([A-Za-z_0-9]+) *\\).*" "\\1.\\2" test_name ${hit})
+            add_test(NAME ${test_name} COMMAND ${executable} --gtest_filter=${test_name} ${extra_args})
+        endforeach()
+    endforeach()
+endfunction()
+
+MACRO(ADD_OCE_TEST test_name libs)
+  FILE(GLOB TEST_SOURCES *.cpp)
+  SET(SOURCE_FILES ${TEST_SOURCES})
+  ADD_EXECUTABLE(${test_name} ${SOURCE_FILES})
+ 
+  IF (USE_SOLUTION_FOLDERS)
+		SET_TARGET_PROPERTIES(${test_name} PROPERTIES FOLDER "Tests" )
+  ENDIF(USE_SOLUTION_FOLDERS)
+  
+  FOREACH(LIB ${libs})
+     TARGET_LINK_LIBRARIES(${test_name} ${LIB})
+  ENDFOREACH(LIB ${libs})
+  
+  IF (${PROJECT_NAME}_COVERAGE)
+    TARGET_LINK_LIBRARIES(${test_name} gcov gtest)
+  ELSE (${PROJECT_NAME}_COVERAGE)
+    TARGET_LINK_LIBRARIES(${test_name} gtest)
+  ENDIF (${PROJECT_NAME}_COVERAGE)
+  GTEST_ADD_TESTS(${test_name} "" ${SOURCE_FILES})
+ENDMACRO(ADD_OCE_TEST test_name libs)
 
 FILE(GLOB TEST_DIRECTORIES ./*_test gtest_sandbox)
 SUBDIRS(${TEST_DIRECTORIES})
+
Index: oce/test/gp_test/CMakeLists.txt
===================================================================
--- oce.orig/test/gp_test/CMakeLists.txt
+++ oce/test/gp_test/CMakeLists.txt
@@ -1,8 +1 @@
-FILE(GLOB TEST_SOURCES *.cpp)
-SET(SOURCE_FILES ${TEST_SOURCES})
-
-ADD_EXECUTABLE(gp_test ${SOURCE_FILES})
-TARGET_LINK_LIBRARIES(gp_test TKG2d)
-TARGET_LINK_LIBRARIES(gp_test gcov ${GTEST_LIBRARY} ${GTEST_MAIN_LIBRARY})
-
-GTEST_ADD_TESTS(gp_test "" ${SOURCE_FILES})
+ADD_OCE_TEST(gp_test "TKG2d")
Index: oce/test/gp_test/gp_test.cpp
===================================================================
--- oce.orig/test/gp_test/gp_test.cpp
+++ oce/test/gp_test/gp_test.cpp
@@ -24,6 +24,20 @@
     }
 }
 
+/*  This test fails with OCCT 6.5.1 and GCC 4.2 */
+TEST(gpTestSuite, testGCC42gp_Trsf)
+{
+    gp_Trsf T;
+    T.SetValues(
+        1.0, 0.0, 0.0, 0.0,
+        0.0, 1.0, 0.0, 0.0,
+        0.0, 0.0, 1.0, 0.0,
+        1.e-6, 1.e-6);
+    ASSERT_EQ(1.0,T.Value(1,1));
+    ASSERT_EQ(1.0,T.Value(2,2));
+    ASSERT_EQ(1.0,T.Value(3,3));
+}
+
 int main(int argc, char **argv){
   testing::InitGoogleTest(&argc, argv);
   return RUN_ALL_TESTS();
Index: oce/test/gtest_sandbox/CMakeLists.txt
===================================================================
--- oce.orig/test/gtest_sandbox/CMakeLists.txt
+++ oce/test/gtest_sandbox/CMakeLists.txt
@@ -1,6 +1 @@
-FILE(GLOB TEST_SOURCES *.cpp)
-SET(SOURCE_FILES ${TEST_SOURCES})
-
-ADD_EXECUTABLE(sandbox ${SOURCE_FILES})
-TARGET_LINK_LIBRARIES(sandbox gcov ${GTEST_LIBRARY} ${GTEST_MAIN_LIBRARY})
-ADD_TEST(gtest_sandbox  sandbox)
\ No newline at end of file
+ADD_OCE_TEST(sandbox "")
