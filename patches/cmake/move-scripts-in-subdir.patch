Index: oce/codeblocks.sh
===================================================================
--- oce.orig/codeblocks.sh
+++ /dev/null
@@ -1,11 +0,0 @@
-#!/bin/bash
-
-export TARGET="cbp"
-
-source ./env.sh "$1" "$TARGET"
-
-if [ -e "/Applications/CodeBlocks.app/Contents/MacOS/CodeBlocks" ]; then
-  /Applications/CodeBlocks.app/Contents/MacOS/CodeBlocks ./adm/$WOKSTATION/cbp/OCCT.workspace
-else
-  codeblocks ./adm/$WOKSTATION/cbp/OCCT.workspace
-fi
Index: oce/draw.bat
===================================================================
--- oce.orig/draw.bat
+++ /dev/null
@@ -1,7 +0,0 @@
-@echo off
-
-rem Setup environment and launch DRAWEXE
-call "%~dp0env.bat" %1 %2 %3
-
-echo Hint: use "pload ALL" command to load standard commands
-DRAWEXE.exe
Index: oce/draw.sh
===================================================================
--- oce.orig/draw.sh
+++ /dev/null
@@ -1,8 +0,0 @@
-#!/bin/bash
-
-aScriptPath=${BASH_SOURCE%/*}; if [ -d "${aScriptPath}" ]; then cd "$aScriptPath"; fi; aScriptPath="$PWD";
-
-source "${aScriptPath}/env.sh" "$1" "$2"
-
-echo 'Hint: use "pload ALL" command to load standard commands '
-DRAWEXE
Index: oce/gendoc
===================================================================
--- oce.orig/gendoc
+++ /dev/null
@@ -1,19 +0,0 @@
-#!/bin/bash
-
-# Helper script to run generation of OCCT documentation on Linux.
-# Running it requires that Tcl, Doxygen, and MikTex (for PDF generation) should be in the PATH
-
-anArgs=$*
-anOldPath="$PATH"
-anOldLd="$LD_LIBRARY_PATH"
-anOldDyLd="$DYLD_LIBRARY_PATH"
-
-# go to the script directory
-aScriptPath=${BASH_SOURCE%/*}; if [ -d "${aScriptPath}" ]; then cd "$aScriptPath"; fi; aScriptPath="$PWD";
-if [ -e "${aScriptPath}/env.sh" ]; then source "${aScriptPath}/env.sh"; fi
-
-tclsh "${aScriptPath}/adm/start.tcl" $anArgs
-
-export PATH="$anOldPath"
-export LD_LIBRARY_PATH="$anOldLd"
-export DYLD_LIBRARY_PATH="$anOldDyLd"
Index: oce/scripts/codeblocks.sh
===================================================================
--- /dev/null
+++ oce/scripts/codeblocks.sh
@@ -0,0 +1,11 @@
+#!/bin/bash
+
+export TARGET="cbp"
+
+source ./env.sh "$1" "$TARGET"
+
+if [ -e "/Applications/CodeBlocks.app/Contents/MacOS/CodeBlocks" ]; then
+  /Applications/CodeBlocks.app/Contents/MacOS/CodeBlocks ./adm/$WOKSTATION/cbp/OCCT.workspace
+else
+  codeblocks ./adm/$WOKSTATION/cbp/OCCT.workspace
+fi
Index: oce/scripts/custom.bat
===================================================================
--- /dev/null
+++ oce/scripts/custom.bat
@@ -0,0 +1,29 @@
+@echo off
+
+set VCVER=vc10
+set ARCH=32
+set "VCVARS=%VS100COMNTOOLS%..\..\VC\vcvarsall.bat"
+set "PRODUCTS_PATH=%~dp0.."
+
+rem Optional 3rd-parties switches
+set HAVE_FREEIMAGE=true
+set HAVE_GL2PS=true
+set HAVE_TBB=true
+set HAVE_VTK=true
+set CHECK_QT4=true
+set CHECK_JDK=true
+
+rem Additional headers search paths
+set "CSF_OPT_INC=%PRODUCTS_PATH%\VTK-6.1.0-vc10-%ARCH%\include\vtk-6.1;%PRODUCTS_PATH%\tcltk-86-%ARCH%\include;%PRODUCTS_PATH%\freetype-2.5.3-%VCVER%-%ARCH%\include;%PRODUCTS_PATH%\freeimage-3.16.0-%VCVER%-%ARCH%\include;%PRODUCTS_PATH%\gl2ps-1.3.8-%VCVER%-%ARCH%\include;%PRODUCTS_PATH%\tbb30_018oss\include;%PRODUCTS_PATH%\qt462-%VCVER%-%ARCH%\include;%PRODUCTS_PATH%\qt462-%VCVER%-%ARCH%\include\Qt;%PRODUCTS_PATH%\qt462-%VCVER%-%ARCH%\include\QtGui;%PRODUCTS_PATH%\qt462-%VCVER%-%ARCH%\include\QtCore;%PRODUCTS_PATH%\jdk1.6.0-%ARCH%\include;%PRODUCTS_PATH%\jdk1.6.0-%ARCH%\include\win32"
+
+rem Additional libraries (32-bit) search paths
+set "CSF_OPT_LIB32=%PRODUCTS_PATH%\VTK-6.1.0-vc10-%ARCH%\lib;%PRODUCTS_PATH%\tcltk-86-%ARCH%\lib;%PRODUCTS_PATH%\freetype-2.5.3-%VCVER%-%ARCH%\lib;%PRODUCTS_PATH%\freeimage-3.16.0-%VCVER%-%ARCH%\lib;%PRODUCTS_PATH%\gl2ps-1.3.8-%VCVER%-%ARCH%\lib;%PRODUCTS_PATH%\tbb30_018oss\lib\ia32\%VCVER%;%PRODUCTS_PATH%\qt462-%VCVER%-%ARCH%\lib"
+
+rem Additional libraries (64-bit) search paths
+set "CSF_OPT_LIB64=%PRODUCTS_PATH%\VTK-6.1.0-vc10-%ARCH%\lib;%PRODUCTS_PATH%\tcltk-86-%ARCH%\lib;%PRODUCTS_PATH%\freetype-2.5.3-%VCVER%-%ARCH%\lib;%PRODUCTS_PATH%\freeimage-3.16.0-%VCVER%-%ARCH%\lib;%PRODUCTS_PATH%\gl2ps-1.3.8-%VCVER%-%ARCH%\lib;%PRODUCTS_PATH%\tbb30_018oss\lib\intel64\%VCVER%;%PRODUCTS_PATH%\qt462-%VCVER%-%ARCH%\lib"
+
+rem Additional (32-bit) search paths
+set "CSF_OPT_BIN32=%PRODUCTS_PATH%\VTK-6.1.0-vc10-%ARCH%\bin;%PRODUCTS_PATH%\tcltk-86-%ARCH%\bin;%PRODUCTS_PATH%\freetype-2.5.3-%VCVER%-%ARCH%\bin;%PRODUCTS_PATH%\freeimage-3.16.0-%VCVER%-%ARCH%\bin;%PRODUCTS_PATH%\gl2ps-1.3.8-%VCVER%-%ARCH%\bin;%PRODUCTS_PATH%\tbb30_018oss\bin\ia32\%VCVER%;%PRODUCTS_PATH%\qt462-%VCVER%-%ARCH%\bin;%PRODUCTS_PATH%\jdk1.6.0-%ARCH%\bin"
+
+rem Additional (64-bit) search paths
+set "CSF_OPT_BIN64=%PRODUCTS_PATH%\VTK-6.1.0-vc10-%ARCH%\bin;%PRODUCTS_PATH%\tcltk-86-%ARCH%\bin;%PRODUCTS_PATH%\freetype-2.5.3-%VCVER%-%ARCH%\bin;%PRODUCTS_PATH%\freeimage-3.16.0-%VCVER%-%ARCH%\bin;%PRODUCTS_PATH%\gl2ps-1.3.8-%VCVER%-%ARCH%\bin;%PRODUCTS_PATH%\tbb30_018oss\bin\intel64\%VCVER%;%PRODUCTS_PATH%\qt462-%VCVER%-%ARCH%\bin;%PRODUCTS_PATH%\jdk1.6.0-%ARCH%\bin"
Index: oce/scripts/custom.sh.in
===================================================================
--- /dev/null
+++ oce/scripts/custom.sh.in
@@ -0,0 +1,17 @@
+#!/bin/bash
+#
+# Mandatory 3rd-parties switches
+export HAVE_FREETYPE=@HAVE_FREETYPE@
+export HAVE_FTGL=@HAVE_FTGL@
+export HAVE_TCLTK=@HAVE_TCLTK@
+# Optional 3rd-parties switches
+export HAVE_FREEIMAGE=@HAVE_FREEIMAGE@
+export HAVE_GL2PS=@HAVE_GL2PS@
+export HAVE_TBB=@HAVE_TBB@
+export HAVE_OPENCL=@HAVE_OPENCL@
+export HAVE_QT=@HAVE_QT@
+export HAVE_VTK=@HAVE_VTK@
+#
+export CSF_OPT_INC="@CSF_OPT_INC@"
+export CSF_OPT_LIB@ARCH@="@CSF_OPT_LIB@"
+export CSF_OPT_BIN@ARCH@="@CSF_OPT_BIN@"
Index: oce/scripts/draw.bat
===================================================================
--- /dev/null
+++ oce/scripts/draw.bat
@@ -0,0 +1,7 @@
+@echo off
+
+rem Setup environment and launch DRAWEXE
+call "%~dp0env.bat" %1 %2 %3
+
+echo Hint: use "pload ALL" command to load standard commands
+DRAWEXE.exe
Index: oce/scripts/draw.sh
===================================================================
--- /dev/null
+++ oce/scripts/draw.sh
@@ -0,0 +1,8 @@
+#!/bin/bash
+
+aScriptPath=${BASH_SOURCE%/*}; if [ -d "${aScriptPath}" ]; then cd "$aScriptPath"; fi; aScriptPath="$PWD";
+
+source "${aScriptPath}/env.sh" "$1" "$2"
+
+echo 'Hint: use "pload ALL" command to load standard commands '
+DRAWEXE
Index: oce/scripts/env.bat
===================================================================
--- /dev/null
+++ oce/scripts/env.bat
@@ -0,0 +1,154 @@
+@echo off
+
+rem Use:
+rem - first argument specifies version of Visual Studio (vc8, vc9, vc10, vc12 or vc13),
+rem - second argument specifies architecture (win32 or win64),
+rem - third argument specifies build mode (Debug or Release)
+rem Default options are:
+rem   vc9 win32 Release
+
+set "SCRIPTROOT=%~dp0"
+set "SCRIPTROOT=%SCRIPTROOT:~0,-1%"
+set "CASROOT=%SCRIPTROOT%"
+if not ["%CASROOT%"] == [""] if exist "%SCRIPTROOT%\%CASROOT%" set "CASROOT=%SCRIPTROOT%\%CASROOT%"
+if     ["%CASROOT%"] == [""] set "CASROOT=%SCRIPTROOT%"
+
+rem ----- Reset values to defaults -----
+set "CASDEB="
+set "VCVER=vc10"
+set "ARCH=32"
+set "VCVARS="
+set "HAVE_TBB=false"
+set "HAVE_VTK=false"
+set "HAVE_FREEIMAGE=false"
+set "HAVE_GL2PS=false"
+set "HAVE_OPENCL=false"
+set "CSF_OPT_INC="
+set "CSF_OPT_LIB32="
+set "CSF_OPT_LIB64="
+set "CSF_OPT_BIN32="
+set "CSF_OPT_BIN64="
+
+rem ----- Load local settings -----
+if exist "%~dp0custom.bat" (
+  call "%~dp0custom.bat" %1 %2 %3 %4 %5
+)
+
+rem ----- Read script arguments (override local settings) -----
+if not ["%1"]    == [""]      set "VCVER=%1"
+if not ["%2"]    == [""]      set "ARCH=%2"
+if /I ["%ARCH%"] == ["win32"] set "ARCH=32"
+if /I ["%ARCH%"] == ["win64"] set "ARCH=64"
+if /I ["%3"]     == ["debug"] set "CASDEB=d"
+if /I ["%3"]     == ["d"]     set "CASDEB=d"
+
+set "CSF_OPT_INC=%CSF_OPT_INC%;%CASROOT%\inc"
+set "CSF_OPT_LIB32D=%CSF_OPT_LIB32%;%CASROOT%\win32\%VCVER%\libd"
+set "CSF_OPT_LIB64D=%CSF_OPT_LIB64%;%CASROOT%\win64\%VCVER%\libd"
+set "CSF_OPT_BIN32D=%CSF_OPT_BIN32%;%CASROOT%\win32\%VCVER%\bind"
+set "CSF_OPT_BIN64D=%CSF_OPT_BIN64%;%CASROOT%\win64\%VCVER%\bind"
+set "CSF_OPT_LIB32=%CSF_OPT_LIB32%;%CASROOT%\win32\%VCVER%\lib"
+set "CSF_OPT_LIB64=%CSF_OPT_LIB64%;%CASROOT%\win64\%VCVER%\lib"
+set "CSF_OPT_BIN32=%CSF_OPT_BIN32%;%CASROOT%\win32\%VCVER%\bin"
+set "CSF_OPT_BIN64=%CSF_OPT_BIN64%;%CASROOT%\win64\%VCVER%\bin"
+
+rem ----- Optional 3rd-parties should be enabled by HAVE macros -----
+set "CSF_OPT_CMPL="
+set "PRODUCTS_DEFINES="
+if ["%HAVE_TBB%"]       == ["true"] set "PRODUCTS_DEFINES=%PRODUCTS_DEFINES% -DHAVE_TBB"
+if ["%HAVE_OPENCL%"]    == ["true"] set "PRODUCTS_DEFINES=%PRODUCTS_DEFINES% -DHAVE_OPENCL"
+if ["%HAVE_GL2PS%"]     == ["true"] set "PRODUCTS_DEFINES=%PRODUCTS_DEFINES% -DHAVE_GL2PS"
+if ["%HAVE_FREEIMAGE%"] == ["true"] set "PRODUCTS_DEFINES=%PRODUCTS_DEFINES% -DHAVE_FREEIMAGE"
+if ["%HAVE_VTK%"]       == ["true"] set "PRODUCTS_DEFINES=%PRODUCTS_DEFINES% -DHAVE_VTK"
+if ["%HAVE_TBB%"]       == ["true"] set "CSF_DEFINES=HAVE_TBB;%CSF_DEFINES%"
+if ["%HAVE_OPENCL%"]    == ["true"] set "CSF_DEFINES=HAVE_OPENCL;%CSF_DEFINES%"
+if ["%HAVE_GL2PS%"]     == ["true"] set "CSF_DEFINES=HAVE_GL2PS;%CSF_DEFINES%"
+if ["%HAVE_FREEIMAGE%"] == ["true"] set "CSF_DEFINES=HAVE_FREEIMAGE;%CSF_DEFINES%"
+if ["%HAVE_VTK%"]       == ["true"] set "CSF_DEFINES=HAVE_VTK;%CSF_DEFINES%"
+rem Eliminate VS warning
+if ["%CSF_DEFINES%"]  == [""] set "CSF_DEFINES=;"
+
+rem ----- Optional 3rd-parties should be enabled by HAVE macros -----
+if not ["%PRODUCTS_DEFINES%"] == [""] set "CSF_OPT_CMPL=%CSF_OPT_CMPL% %PRODUCTS_DEFINES%"
+
+rem ----- Colect 3rd-parties additional include paths into compiler options -----
+for %%a in ("%CSF_OPT_INC:;=";"%") do (
+  set "anItem=%%~a"
+  if not ["%%~a"] == [""] call :concatCmplInc %%~a
+)
+
+rem ----- Colect 3rd-parties additional library paths (32-bit) into linker options -----
+set "OPT_LIB32="
+for %%a in ("%CSF_OPT_LIB32:;=";"%") do (
+  set "anItem=%%~a"
+  if not ["%%~a"] == [""] call :concatLib32 %%~a
+)
+
+rem ----- Colect 3rd-parties additional library paths (64-bit) into linker options -----
+set "OPT_LIB64="
+for %%a in ("%CSF_OPT_LIB64:;=";"%") do (
+  set "anItem=%%~a"
+  if not ["%%~a"] == [""] call :concatLib64 %%~a
+)
+
+set "CSF_OPT_LNK32="
+set "CSF_OPT_LNK64="
+set "CSF_OPT_LNK32D="
+set "CSF_OPT_LNK64D="
+set "CSF_OPT_LNK32=%CSF_OPT_LNK32% %OPT_LIB32%"
+set "CSF_OPT_LNK32D=%CSF_OPT_LNK32D% %OPT_LIB32%"
+set "CSF_OPT_LNK64=%CSF_OPT_LNK64% %OPT_LIB64%"
+set "CSF_OPT_LNK64D=%CSF_OPT_LNK64D% %OPT_LIB64%"
+
+set "CASBIN=win%ARCH%\%VCVER%"
+
+rem ----- Set path to 3rd party and OCCT libraries -----
+set "PATH=%SCRIPTROOT%\%CASBIN%\bin%CASDEB%;%PATH%"
+if     ["%CASDEB%"] == [""] if ["%ARCH%"] == ["32"] set "PATH=%CSF_OPT_BIN32%;%PATH%"
+if     ["%CASDEB%"] == [""] if ["%ARCH%"] == ["64"] set "PATH=%CSF_OPT_BIN64%;%PATH%"
+if not ["%CASDEB%"] == [""] if ["%ARCH%"] == ["32"] set "PATH=%CSF_OPT_BIN32D%;%PATH%"
+if not ["%CASDEB%"] == [""] if ["%ARCH%"] == ["64"] set "PATH=%CSF_OPT_BIN64D%;%PATH%"
+
+rem ----- Set envoronment variables used by OCCT -----
+set CSF_LANGUAGE=us
+set MMGT_CLEAR=1
+set CSF_EXCEPTION_PROMPT=1
+set "CSF_SHMessage=%CASROOT%\src\SHMessage"
+set "CSF_MDTVTexturesDirectory=%CASROOT%\src\Textures"
+set "CSF_ShadersDirectory=%CASROOT%\src\Shaders"
+set "CSF_XSMessage=%CASROOT%\src\XSMessage"
+set "CSF_TObjMessage=%CASROOT%\src\TObj"
+set "CSF_StandardDefaults=%CASROOT%\src\StdResource"
+set "CSF_PluginDefaults=%CASROOT%\src\StdResource"
+set "CSF_XCAFDefaults=%CASROOT%\src\StdResource"
+set "CSF_TObjDefaults=%CASROOT%\src\StdResource"
+set "CSF_StandardLiteDefaults=%CASROOT%\src\StdResource"
+
+set "CSF_UnitsLexicon=%CASROOT%\src\UnitsAPI\Lexi_Expr.dat"
+set "CSF_UnitsDefinition=%CASROOT%\src\UnitsAPI\Units.dat"
+set "CSF_IGESDefaults=%CASROOT%\src\XSTEPResource"
+set "CSF_STEPDefaults=%CASROOT%\src\XSTEPResource"
+set "CSF_XmlOcafResource=%CASROOT%\src\XmlOcafResource"
+set "CSF_MIGRATION_TYPES=%CASROOT%\src\StdResource\MigrationSheet.txt"
+
+rem Draw Harness special stuff
+if exist "%CASROOT%\src\DrawResources" (
+  set "DRAWHOME=%CASROOT%\src\DrawResources"
+  set "CSF_DrawPluginDefaults=%DRAWHOME%"
+)
+if exist "%SCRIPTROOT%\src\DrawResourcesProducts" (
+  set "CSF_DrawPluginProductsDefaults=%SCRIPTROOT%\src\DrawResourcesProducts"
+)
+goto :eof
+
+:concatCmplInc
+set "CSF_OPT_CMPL=%CSF_OPT_CMPL% -I%1"
+goto :eof
+
+:concatLib32
+set "OPT_LIB32=%OPT_LIB32% /LIBPATH:%1"
+goto :eof
+
+:concatLib64
+set "OPT_LIB64=%OPT_LIB64% /LIBPATH:%1"
+goto :eof
Index: oce/scripts/env.sh
===================================================================
--- /dev/null
+++ oce/scripts/env.sh
@@ -0,0 +1,199 @@
+#!/bin/bash
+
+# go to the script directory
+aScriptPath=${BASH_SOURCE%/*}; if [ -d "${aScriptPath}" ]; then cd "$aScriptPath"; fi; aScriptPath="$PWD";
+
+export CASROOT="${aScriptPath}"
+
+if [ "${CASROOT}" != "" ] && [ -d "${aScriptPath}/${CASROOT}" ]; then
+  export CASROOT="${aScriptPath}/${CASROOT}"
+fi
+if [ "${CASROOT}" == "" ]; then
+  export CASROOT="${aScriptPath}"
+fi
+
+# Reset values
+export CASDEB=""
+export HAVE_TBB="false";
+export HAVE_OPENCL="false";
+export HAVE_FREEIMAGE="false";
+export HAVE_GL2PS="false";
+export HAVE_VTK="false";
+export MACOSX_USE_GLX="false";
+export CSF_OPT_INC=""
+export CSF_OPT_LIB32=""
+export CSF_OPT_LIB64=""
+export CSF_OPT_BIN32=""
+export CSF_OPT_BIN64=""
+
+# ----- Set local settings -----
+if [ -e "${aScriptPath}/custom.sh" ]; then source "${aScriptPath}/custom.sh"; fi
+
+# Read script arguments
+shopt -s nocasematch
+export TARGET="";
+if [[ "$2" == "cbp" ]]; then
+  export TARGET="cbp";
+elif [[ "$2" == "xcd" ]]; then
+  export TARGET="xcd";
+fi
+if [[ "$1" == "debug" ]]; then export CASDEB="d"; fi
+if [[ "$1" == "d" ]]; then export CASDEB="d"; fi
+shopt -u nocasematch
+
+# ----- Setup Environment Variables -----
+anArch=`uname -m`
+if [ "$anArch" != "x86_64" ] && [ "$anArch" != "ia64" ]; then
+  export ARCH="32";
+else
+  export ARCH="64";
+fi
+
+aSystem=`uname -s`
+if [ "$aSystem" == "Darwin" ]; then
+  export WOKSTATION="mac";
+  export ARCH="64";
+else
+  export WOKSTATION="lin";
+fi
+
+export CASBIN=""
+if [ "${TARGET}" == "cbp" ]; then
+  export CASBIN="${WOKSTATION}/cbp"
+elif [ "${TARGET}" == "xcd" ]; then
+  export CASBIN="adm/mac/xcd/build"
+fi
+
+export CSF_OPT_INC="${CSF_OPT_INC}:${CASROOT}/inc"
+
+if [ "${TARGET}" == "cbp" ]; then
+  export CSF_OPT_LIB32D="${CSF_OPT_LIB32}:${CASROOT}/${CASBIN}/libd"
+  export CSF_OPT_LIB64D="${CSF_OPT_LIB64}:${CASROOT}/${CASBIN}/libd"
+  export CSF_OPT_LIB32="${CSF_OPT_LIB32}:${CASROOT}/${CASBIN}/lib"
+  export CSF_OPT_LIB64="${CSF_OPT_LIB64}:${CASROOT}/${CASBIN}/lib"
+elif [ "${TARGET}" == "xcd" ]; then
+  export CSF_OPT_LIB32D="${CSF_OPT_LIB32}:${CASROOT}/${CASBIN}/Debug"
+  export CSF_OPT_LIB64D="${CSF_OPT_LIB64}:${CASROOT}/${CASBIN}/Debug"
+  export CSF_OPT_LIB32="${CSF_OPT_LIB32}:${CASROOT}/${CASBIN}/Release"
+  export CSF_OPT_LIB64="${CSF_OPT_LIB64}:${CASROOT}/${CASBIN}/Release"
+fi
+
+export CSF_OPT_CMPL=""
+
+# Optiona 3rd-parties should be enabled by HAVE macros
+if [ "$HAVE_TBB" == "true" ]; then
+  export CSF_OPT_CMPL="${CSF_OPT_CMPL} -DHAVE_TBB"
+fi
+if [ "$HAVE_OPENCL" == "true" ]; then
+  export CSF_OPT_CMPL="${CSF_OPT_CMPL} -DHAVE_OPENCL"
+fi
+if [ "$HAVE_FREEIMAGE" == "true" ]; then
+  export CSF_OPT_CMPL="${CSF_OPT_CMPL} -DHAVE_FREEIMAGE"
+fi
+if [ "$HAVE_GL2PS" == "true" ]; then
+  export CSF_OPT_CMPL="${CSF_OPT_CMPL} -DHAVE_GL2PS"
+fi
+if [ "$HAVE_VTK" == "true" ]; then
+  export CSF_OPT_CMPL="${CSF_OPT_CMPL} -DHAVE_VTK"
+fi
+# Option to compile OCCT with X11 libs on Mac OS X
+if [ "$MACOSX_USE_GLX" == "true" ]; then
+  export CSF_OPT_CMPL="${CSF_OPT_CMPL} -DMACOSX_USE_GLX"
+fi
+
+# To split string into array
+aDelimBack=$IFS
+IFS=":"
+
+# 3rd-parties additional include paths
+set -- "$CSF_OPT_INC"
+declare -a aPartiesIncs=($*)
+for anItem in ${aPartiesIncs[*]}
+do
+  export CSF_OPT_CMPL="${CSF_OPT_CMPL} -I${anItem}";
+done
+
+# Append 3rd-parties to LD_LIBRARY_PATH
+if [ "$ARCH" == "32" ]; then
+  set -- "$CSF_OPT_LIB32"
+  declare -a aPartiesLibs=($*)
+  set -- "$CSF_OPT_LIB32D"
+  declare -a aPartiesLibsDeb=($*)
+else
+  set -- "$CSF_OPT_LIB64"
+  declare -a aPartiesLibs=($*)
+  set -- "$CSF_OPT_LIB64D"
+  declare -a aPartiesLibsDeb=($*)
+fi
+
+# Turn back value
+IFS=$aDelimBack
+
+OPT_LINKER_OPTIONS_DEB=""
+for anItem in ${aPartiesLibsDeb[*]}
+do
+  OPT_LINKER_OPTIONS_DEB="${OPT_LINKER_OPTIONS_DEB} -L${anItem}"
+done
+
+OPT_LINKER_OPTIONS=""
+for anItem in ${aPartiesLibs[*]}
+do
+  if [ "${LD_LIBRARY_PATH}" == "" ]; then
+    export LD_LIBRARY_PATH="${anItem}"
+  else
+    export LD_LIBRARY_PATH="${anItem}:${LD_LIBRARY_PATH}"
+  fi
+  OPT_LINKER_OPTIONS="${OPT_LINKER_OPTIONS} -L${anItem}"
+done
+
+if [ "$ARCH" == "64" ]; then
+  export CSF_OPT_LNK64="$OPT_LINKER_OPTIONS"
+  export CSF_OPT_LNK64D="$OPT_LINKER_OPTIONS_DEB"
+else
+  export CSF_OPT_LNK32="$OPT_LINKER_OPTIONS"
+  export CSF_OPT_LNK32D="$OPT_LINKER_OPTIONS_DEB"
+fi
+
+
+BIN_PATH="${CASBIN}/bin${CASDEB}"
+LIBS_PATH="${CASBIN}/lib${CASDEB}"
+if [ "${TARGET}" == "xcd" ]; then
+  [[ "${CASDEB}" == "d" ]] && BIN_PATH="${CASBIN}/Debug" || BIN_PATH="${CASBIN}/Release"
+  LIBS_PATH="$BIN_PATH"
+fi
+
+export PATH="${CASROOT}/${BIN_PATH}:${PATH}"
+export LD_LIBRARY_PATH="${CASROOT}/${LIBS_PATH}:${LD_LIBRARY_PATH}"
+if [ "$WOKSTATION" == "mac" ]; then
+  export DYLD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${DYLD_LIBRARY_PATH}"
+fi
+
+# Set envoronment variables used by OCCT
+export CSF_LANGUAGE="us"
+export MMGT_CLEAR="1"
+export CSF_EXCEPTION_PROMPT="1"
+export CSF_SHMessage="${CASROOT}/src/SHMessage"
+export CSF_MDTVTexturesDirectory="${CASROOT}/src/Textures"
+export CSF_ShadersDirectory="${CASROOT}/src/Shaders"
+export CSF_XSMessage="${CASROOT}/src/XSMessage"
+export CSF_TObjMessage="${CASROOT}/src/TObj"
+export CSF_StandardDefaults="${CASROOT}/src/StdResource"
+export CSF_PluginDefaults="${CASROOT}/src/StdResource"
+export CSF_XCAFDefaults="${CASROOT}/src/StdResource"
+export CSF_TObjDefaults="${CASROOT}/src/StdResource"
+export CSF_StandardLiteDefaults="${CASROOT}/src/StdResource"
+export CSF_UnitsLexicon="${CASROOT}/src/UnitsAPI/Lexi_Expr.dat"
+export CSF_UnitsDefinition="${CASROOT}/src/UnitsAPI/Units.dat"
+export CSF_IGESDefaults="${CASROOT}/src/XSTEPResource"
+export CSF_STEPDefaults="${CASROOT}/src/XSTEPResource"
+export CSF_XmlOcafResource="${CASROOT}/src/XmlOcafResource"
+export CSF_MIGRATION_TYPES="${CASROOT}/src/StdResource/MigrationSheet.txt"
+
+# Draw Harness special stuff
+if [ -e "${CASROOT}/src/DrawResources" ]; then
+  export DRAWHOME="${CASROOT}/src/DrawResources"
+  export CSF_DrawPluginDefaults="${DRAWHOME}"
+fi
+if [ -e "${aScriptPath}/src/DrawResourcesProducts" ]; then
+  export CSF_DrawPluginProductsDefaults="${aScriptPath}/src/DrawResourcesProducts"
+fi
Index: oce/scripts/gendoc.bat
===================================================================
--- /dev/null
+++ oce/scripts/gendoc.bat
@@ -0,0 +1,23 @@
+@echo off
+
+rem Helper script to run generation of OCCT documentation on Windows.
+rem Running it requires that Tcl, Doxygen, and MikTex (for PDF generation)
+rem should be in the PATH
+
+SET "OLD_PATH=%PATH%"
+
+if exist "%~dp0env.bat" (
+  call "%~dp0env.bat"
+)
+
+set "TCL_EXEC=tclsh.exe"
+
+for %%X in (%TCL_EXEC%) do (set TCL_FOUND=%%~$PATH:X)
+
+if defined TCL_FOUND (
+  %TCL_EXEC% %~dp0adm/start.tcl  %*
+) else (
+  echo "Error. %TCL_EXEC% is not found. Please update PATH variable"
+)
+
+SET "PATH=%OLD_PATH%"
Index: oce/scripts/gendoc
===================================================================
--- /dev/null
+++ oce/scripts/gendoc
@@ -0,0 +1,19 @@
+#!/bin/bash
+
+# Helper script to run generation of OCCT documentation on Linux.
+# Running it requires that Tcl, Doxygen, and MikTex (for PDF generation) should be in the PATH
+
+anArgs=$*
+anOldPath="$PATH"
+anOldLd="$LD_LIBRARY_PATH"
+anOldDyLd="$DYLD_LIBRARY_PATH"
+
+# go to the script directory
+aScriptPath=${BASH_SOURCE%/*}; if [ -d "${aScriptPath}" ]; then cd "$aScriptPath"; fi; aScriptPath="$PWD";
+if [ -e "${aScriptPath}/env.sh" ]; then source "${aScriptPath}/env.sh"; fi
+
+tclsh "${aScriptPath}/adm/start.tcl" $anArgs
+
+export PATH="$anOldPath"
+export LD_LIBRARY_PATH="$anOldLd"
+export DYLD_LIBRARY_PATH="$anOldDyLd"
Index: oce/scripts/msvc.bat
===================================================================
--- /dev/null
+++ oce/scripts/msvc.bat
@@ -0,0 +1,42 @@
+@echo off
+
+rem Setup environment
+call "%~dp0env.bat" %1 %2 %3
+
+rem Define path to project file
+set "PRJFILE=%~dp0\adm\msvc\%VCVER%\OCCT.sln"
+if not exist "%PRJFILE%" set "PRJFILE=%~dp0\adm\msvc\%VCVER%\Products.sln"
+if not "%4" == "" (
+  set "PRJFILE=%4"
+)
+
+set "VisualStudioExpressName=VCExpress"
+
+if "%VCVER%" == "vc8" (
+  set "DevEnvDir=%VS80COMNTOOLS%..\IDE"
+) else if "%VCVER%" == "vc9" (
+  set "DevEnvDir=%VS90COMNTOOLS%..\IDE"
+) else if "%VCVER%" == "vc10" (
+  set "DevEnvDir=%VS100COMNTOOLS%..\IDE"
+) else if "%VCVER%" == "vc11" (
+  set "DevEnvDir=%VS110COMNTOOLS%..\IDE"
+  rem Visual Studio Express starting from VS 2012 is called "for Windows Desktop"
+  rem and has a new name for executable - WDExpress
+  set "VisualStudioExpressName=WDExpress"
+) else if "%VCVER%" == "vc12" (
+  set "DevEnvDir=%VS120COMNTOOLS%..\IDE"
+  set "VisualStudioExpressName=WDExpress"
+) else (
+  echo Error: wrong VS identifier
+  exit /B
+)
+
+rem Launch Visual Studio - either professional (devenv) or Express, as available
+if exist "%DevEnvDir%\devenv.exe"  (
+  start "" "%DevEnvDir%\devenv.exe" "%PRJFILE%"
+) else if exist "%DevEnvDir%\%VisualStudioExpressName%.exe"  (
+  start "" "%DevEnvDir%\%VisualStudioExpressName%.exe" "%PRJFILE%"
+) else (
+  echo Error: Could not find MS Visual Studio ^(%VCVER%^)
+  echo Check relevant environment variable ^(e.g. VS80COMNTOOLS for vc8^)
+)
Index: oce/scripts/xcode.sh
===================================================================
--- /dev/null
+++ oce/scripts/xcode.sh
@@ -0,0 +1,10 @@
+#!/bin/bash
+
+export TARGET="xcd"
+
+source ./env.sh "$TARGET" "$1"
+
+export CSF_OPT_LIB64="$CSF_OPT_LIB64:/usr/X11/lib"
+export CSF_OPT_LIB64D="$CSF_OPT_LIB64:/usr/X11/lib"
+
+open -a Xcode ./adm/mac/xcd/OCCT.xcworkspace
Index: oce/xcode.sh
===================================================================
--- oce.orig/xcode.sh
+++ /dev/null
@@ -1,10 +0,0 @@
-#!/bin/bash
-
-export TARGET="xcd"
-
-source ./env.sh "$TARGET" "$1"
-
-export CSF_OPT_LIB64="$CSF_OPT_LIB64:/usr/X11/lib"
-export CSF_OPT_LIB64D="$CSF_OPT_LIB64:/usr/X11/lib"
-
-open -a Xcode ./adm/mac/xcd/OCCT.xcworkspace
Index: oce/custom.bat
===================================================================
--- oce.orig/custom.bat
+++ /dev/null
@@ -1,29 +0,0 @@
-@echo off
-
-set VCVER=vc10
-set ARCH=32
-set "VCVARS=%VS100COMNTOOLS%..\..\VC\vcvarsall.bat"
-set "PRODUCTS_PATH=%~dp0.."
-
-rem Optional 3rd-parties switches
-set HAVE_FREEIMAGE=true
-set HAVE_GL2PS=true
-set HAVE_TBB=true
-set HAVE_VTK=true
-set CHECK_QT4=true
-set CHECK_JDK=true
-
-rem Additional headers search paths
-set "CSF_OPT_INC=%PRODUCTS_PATH%\VTK-6.1.0-vc10-%ARCH%\include\vtk-6.1;%PRODUCTS_PATH%\tcltk-86-%ARCH%\include;%PRODUCTS_PATH%\freetype-2.5.3-%VCVER%-%ARCH%\include;%PRODUCTS_PATH%\freeimage-3.16.0-%VCVER%-%ARCH%\include;%PRODUCTS_PATH%\gl2ps-1.3.8-%VCVER%-%ARCH%\include;%PRODUCTS_PATH%\tbb30_018oss\include;%PRODUCTS_PATH%\qt462-%VCVER%-%ARCH%\include;%PRODUCTS_PATH%\qt462-%VCVER%-%ARCH%\include\Qt;%PRODUCTS_PATH%\qt462-%VCVER%-%ARCH%\include\QtGui;%PRODUCTS_PATH%\qt462-%VCVER%-%ARCH%\include\QtCore;%PRODUCTS_PATH%\jdk1.6.0-%ARCH%\include;%PRODUCTS_PATH%\jdk1.6.0-%ARCH%\include\win32"
-
-rem Additional libraries (32-bit) search paths
-set "CSF_OPT_LIB32=%PRODUCTS_PATH%\VTK-6.1.0-vc10-%ARCH%\lib;%PRODUCTS_PATH%\tcltk-86-%ARCH%\lib;%PRODUCTS_PATH%\freetype-2.5.3-%VCVER%-%ARCH%\lib;%PRODUCTS_PATH%\freeimage-3.16.0-%VCVER%-%ARCH%\lib;%PRODUCTS_PATH%\gl2ps-1.3.8-%VCVER%-%ARCH%\lib;%PRODUCTS_PATH%\tbb30_018oss\lib\ia32\%VCVER%;%PRODUCTS_PATH%\qt462-%VCVER%-%ARCH%\lib"
-
-rem Additional libraries (64-bit) search paths
-set "CSF_OPT_LIB64=%PRODUCTS_PATH%\VTK-6.1.0-vc10-%ARCH%\lib;%PRODUCTS_PATH%\tcltk-86-%ARCH%\lib;%PRODUCTS_PATH%\freetype-2.5.3-%VCVER%-%ARCH%\lib;%PRODUCTS_PATH%\freeimage-3.16.0-%VCVER%-%ARCH%\lib;%PRODUCTS_PATH%\gl2ps-1.3.8-%VCVER%-%ARCH%\lib;%PRODUCTS_PATH%\tbb30_018oss\lib\intel64\%VCVER%;%PRODUCTS_PATH%\qt462-%VCVER%-%ARCH%\lib"
-
-rem Additional (32-bit) search paths
-set "CSF_OPT_BIN32=%PRODUCTS_PATH%\VTK-6.1.0-vc10-%ARCH%\bin;%PRODUCTS_PATH%\tcltk-86-%ARCH%\bin;%PRODUCTS_PATH%\freetype-2.5.3-%VCVER%-%ARCH%\bin;%PRODUCTS_PATH%\freeimage-3.16.0-%VCVER%-%ARCH%\bin;%PRODUCTS_PATH%\gl2ps-1.3.8-%VCVER%-%ARCH%\bin;%PRODUCTS_PATH%\tbb30_018oss\bin\ia32\%VCVER%;%PRODUCTS_PATH%\qt462-%VCVER%-%ARCH%\bin;%PRODUCTS_PATH%\jdk1.6.0-%ARCH%\bin"
-
-rem Additional (64-bit) search paths
-set "CSF_OPT_BIN64=%PRODUCTS_PATH%\VTK-6.1.0-vc10-%ARCH%\bin;%PRODUCTS_PATH%\tcltk-86-%ARCH%\bin;%PRODUCTS_PATH%\freetype-2.5.3-%VCVER%-%ARCH%\bin;%PRODUCTS_PATH%\freeimage-3.16.0-%VCVER%-%ARCH%\bin;%PRODUCTS_PATH%\gl2ps-1.3.8-%VCVER%-%ARCH%\bin;%PRODUCTS_PATH%\tbb30_018oss\bin\intel64\%VCVER%;%PRODUCTS_PATH%\qt462-%VCVER%-%ARCH%\bin;%PRODUCTS_PATH%\jdk1.6.0-%ARCH%\bin"
Index: oce/custom.sh.in
===================================================================
--- oce.orig/custom.sh.in
+++ /dev/null
@@ -1,17 +0,0 @@
-#!/bin/bash
-#
-# Mandatory 3rd-parties switches
-export HAVE_FREETYPE=@HAVE_FREETYPE@
-export HAVE_FTGL=@HAVE_FTGL@
-export HAVE_TCLTK=@HAVE_TCLTK@
-# Optional 3rd-parties switches
-export HAVE_FREEIMAGE=@HAVE_FREEIMAGE@
-export HAVE_GL2PS=@HAVE_GL2PS@
-export HAVE_TBB=@HAVE_TBB@
-export HAVE_OPENCL=@HAVE_OPENCL@
-export HAVE_QT=@HAVE_QT@
-export HAVE_VTK=@HAVE_VTK@
-#
-export CSF_OPT_INC="@CSF_OPT_INC@"
-export CSF_OPT_LIB@ARCH@="@CSF_OPT_LIB@"
-export CSF_OPT_BIN@ARCH@="@CSF_OPT_BIN@"
Index: oce/env.bat
===================================================================
--- oce.orig/env.bat
+++ /dev/null
@@ -1,154 +0,0 @@
-@echo off
-
-rem Use:
-rem - first argument specifies version of Visual Studio (vc8, vc9, vc10, vc12 or vc13),
-rem - second argument specifies architecture (win32 or win64),
-rem - third argument specifies build mode (Debug or Release)
-rem Default options are:
-rem   vc9 win32 Release
-
-set "SCRIPTROOT=%~dp0"
-set "SCRIPTROOT=%SCRIPTROOT:~0,-1%"
-set "CASROOT=%SCRIPTROOT%"
-if not ["%CASROOT%"] == [""] if exist "%SCRIPTROOT%\%CASROOT%" set "CASROOT=%SCRIPTROOT%\%CASROOT%"
-if     ["%CASROOT%"] == [""] set "CASROOT=%SCRIPTROOT%"
-
-rem ----- Reset values to defaults -----
-set "CASDEB="
-set "VCVER=vc10"
-set "ARCH=32"
-set "VCVARS="
-set "HAVE_TBB=false"
-set "HAVE_VTK=false"
-set "HAVE_FREEIMAGE=false"
-set "HAVE_GL2PS=false"
-set "HAVE_OPENCL=false"
-set "CSF_OPT_INC="
-set "CSF_OPT_LIB32="
-set "CSF_OPT_LIB64="
-set "CSF_OPT_BIN32="
-set "CSF_OPT_BIN64="
-
-rem ----- Load local settings -----
-if exist "%~dp0custom.bat" (
-  call "%~dp0custom.bat" %1 %2 %3 %4 %5
-)
-
-rem ----- Read script arguments (override local settings) -----
-if not ["%1"]    == [""]      set "VCVER=%1"
-if not ["%2"]    == [""]      set "ARCH=%2"
-if /I ["%ARCH%"] == ["win32"] set "ARCH=32"
-if /I ["%ARCH%"] == ["win64"] set "ARCH=64"
-if /I ["%3"]     == ["debug"] set "CASDEB=d"
-if /I ["%3"]     == ["d"]     set "CASDEB=d"
-
-set "CSF_OPT_INC=%CSF_OPT_INC%;%CASROOT%\inc"
-set "CSF_OPT_LIB32D=%CSF_OPT_LIB32%;%CASROOT%\win32\%VCVER%\libd"
-set "CSF_OPT_LIB64D=%CSF_OPT_LIB64%;%CASROOT%\win64\%VCVER%\libd"
-set "CSF_OPT_BIN32D=%CSF_OPT_BIN32%;%CASROOT%\win32\%VCVER%\bind"
-set "CSF_OPT_BIN64D=%CSF_OPT_BIN64%;%CASROOT%\win64\%VCVER%\bind"
-set "CSF_OPT_LIB32=%CSF_OPT_LIB32%;%CASROOT%\win32\%VCVER%\lib"
-set "CSF_OPT_LIB64=%CSF_OPT_LIB64%;%CASROOT%\win64\%VCVER%\lib"
-set "CSF_OPT_BIN32=%CSF_OPT_BIN32%;%CASROOT%\win32\%VCVER%\bin"
-set "CSF_OPT_BIN64=%CSF_OPT_BIN64%;%CASROOT%\win64\%VCVER%\bin"
-
-rem ----- Optional 3rd-parties should be enabled by HAVE macros -----
-set "CSF_OPT_CMPL="
-set "PRODUCTS_DEFINES="
-if ["%HAVE_TBB%"]       == ["true"] set "PRODUCTS_DEFINES=%PRODUCTS_DEFINES% -DHAVE_TBB"
-if ["%HAVE_OPENCL%"]    == ["true"] set "PRODUCTS_DEFINES=%PRODUCTS_DEFINES% -DHAVE_OPENCL"
-if ["%HAVE_GL2PS%"]     == ["true"] set "PRODUCTS_DEFINES=%PRODUCTS_DEFINES% -DHAVE_GL2PS"
-if ["%HAVE_FREEIMAGE%"] == ["true"] set "PRODUCTS_DEFINES=%PRODUCTS_DEFINES% -DHAVE_FREEIMAGE"
-if ["%HAVE_VTK%"]       == ["true"] set "PRODUCTS_DEFINES=%PRODUCTS_DEFINES% -DHAVE_VTK"
-if ["%HAVE_TBB%"]       == ["true"] set "CSF_DEFINES=HAVE_TBB;%CSF_DEFINES%"
-if ["%HAVE_OPENCL%"]    == ["true"] set "CSF_DEFINES=HAVE_OPENCL;%CSF_DEFINES%"
-if ["%HAVE_GL2PS%"]     == ["true"] set "CSF_DEFINES=HAVE_GL2PS;%CSF_DEFINES%"
-if ["%HAVE_FREEIMAGE%"] == ["true"] set "CSF_DEFINES=HAVE_FREEIMAGE;%CSF_DEFINES%"
-if ["%HAVE_VTK%"]       == ["true"] set "CSF_DEFINES=HAVE_VTK;%CSF_DEFINES%"
-rem Eliminate VS warning
-if ["%CSF_DEFINES%"]  == [""] set "CSF_DEFINES=;"
-
-rem ----- Optional 3rd-parties should be enabled by HAVE macros -----
-if not ["%PRODUCTS_DEFINES%"] == [""] set "CSF_OPT_CMPL=%CSF_OPT_CMPL% %PRODUCTS_DEFINES%"
-
-rem ----- Colect 3rd-parties additional include paths into compiler options -----
-for %%a in ("%CSF_OPT_INC:;=";"%") do (
-  set "anItem=%%~a"
-  if not ["%%~a"] == [""] call :concatCmplInc %%~a
-)
-
-rem ----- Colect 3rd-parties additional library paths (32-bit) into linker options -----
-set "OPT_LIB32="
-for %%a in ("%CSF_OPT_LIB32:;=";"%") do (
-  set "anItem=%%~a"
-  if not ["%%~a"] == [""] call :concatLib32 %%~a
-)
-
-rem ----- Colect 3rd-parties additional library paths (64-bit) into linker options -----
-set "OPT_LIB64="
-for %%a in ("%CSF_OPT_LIB64:;=";"%") do (
-  set "anItem=%%~a"
-  if not ["%%~a"] == [""] call :concatLib64 %%~a
-)
-
-set "CSF_OPT_LNK32="
-set "CSF_OPT_LNK64="
-set "CSF_OPT_LNK32D="
-set "CSF_OPT_LNK64D="
-set "CSF_OPT_LNK32=%CSF_OPT_LNK32% %OPT_LIB32%"
-set "CSF_OPT_LNK32D=%CSF_OPT_LNK32D% %OPT_LIB32%"
-set "CSF_OPT_LNK64=%CSF_OPT_LNK64% %OPT_LIB64%"
-set "CSF_OPT_LNK64D=%CSF_OPT_LNK64D% %OPT_LIB64%"
-
-set "CASBIN=win%ARCH%\%VCVER%"
-
-rem ----- Set path to 3rd party and OCCT libraries -----
-set "PATH=%SCRIPTROOT%\%CASBIN%\bin%CASDEB%;%PATH%"
-if     ["%CASDEB%"] == [""] if ["%ARCH%"] == ["32"] set "PATH=%CSF_OPT_BIN32%;%PATH%"
-if     ["%CASDEB%"] == [""] if ["%ARCH%"] == ["64"] set "PATH=%CSF_OPT_BIN64%;%PATH%"
-if not ["%CASDEB%"] == [""] if ["%ARCH%"] == ["32"] set "PATH=%CSF_OPT_BIN32D%;%PATH%"
-if not ["%CASDEB%"] == [""] if ["%ARCH%"] == ["64"] set "PATH=%CSF_OPT_BIN64D%;%PATH%"
-
-rem ----- Set envoronment variables used by OCCT -----
-set CSF_LANGUAGE=us
-set MMGT_CLEAR=1
-set CSF_EXCEPTION_PROMPT=1
-set "CSF_SHMessage=%CASROOT%\src\SHMessage"
-set "CSF_MDTVTexturesDirectory=%CASROOT%\src\Textures"
-set "CSF_ShadersDirectory=%CASROOT%\src\Shaders"
-set "CSF_XSMessage=%CASROOT%\src\XSMessage"
-set "CSF_TObjMessage=%CASROOT%\src\TObj"
-set "CSF_StandardDefaults=%CASROOT%\src\StdResource"
-set "CSF_PluginDefaults=%CASROOT%\src\StdResource"
-set "CSF_XCAFDefaults=%CASROOT%\src\StdResource"
-set "CSF_TObjDefaults=%CASROOT%\src\StdResource"
-set "CSF_StandardLiteDefaults=%CASROOT%\src\StdResource"
-
-set "CSF_UnitsLexicon=%CASROOT%\src\UnitsAPI\Lexi_Expr.dat"
-set "CSF_UnitsDefinition=%CASROOT%\src\UnitsAPI\Units.dat"
-set "CSF_IGESDefaults=%CASROOT%\src\XSTEPResource"
-set "CSF_STEPDefaults=%CASROOT%\src\XSTEPResource"
-set "CSF_XmlOcafResource=%CASROOT%\src\XmlOcafResource"
-set "CSF_MIGRATION_TYPES=%CASROOT%\src\StdResource\MigrationSheet.txt"
-
-rem Draw Harness special stuff
-if exist "%CASROOT%\src\DrawResources" (
-  set "DRAWHOME=%CASROOT%\src\DrawResources"
-  set "CSF_DrawPluginDefaults=%DRAWHOME%"
-)
-if exist "%SCRIPTROOT%\src\DrawResourcesProducts" (
-  set "CSF_DrawPluginProductsDefaults=%SCRIPTROOT%\src\DrawResourcesProducts"
-)
-goto :eof
-
-:concatCmplInc
-set "CSF_OPT_CMPL=%CSF_OPT_CMPL% -I%1"
-goto :eof
-
-:concatLib32
-set "OPT_LIB32=%OPT_LIB32% /LIBPATH:%1"
-goto :eof
-
-:concatLib64
-set "OPT_LIB64=%OPT_LIB64% /LIBPATH:%1"
-goto :eof
Index: oce/env.sh
===================================================================
--- oce.orig/env.sh
+++ /dev/null
@@ -1,199 +0,0 @@
-#!/bin/bash
-
-# go to the script directory
-aScriptPath=${BASH_SOURCE%/*}; if [ -d "${aScriptPath}" ]; then cd "$aScriptPath"; fi; aScriptPath="$PWD";
-
-export CASROOT="${aScriptPath}"
-
-if [ "${CASROOT}" != "" ] && [ -d "${aScriptPath}/${CASROOT}" ]; then
-  export CASROOT="${aScriptPath}/${CASROOT}"
-fi
-if [ "${CASROOT}" == "" ]; then
-  export CASROOT="${aScriptPath}"
-fi
-
-# Reset values
-export CASDEB=""
-export HAVE_TBB="false";
-export HAVE_OPENCL="false";
-export HAVE_FREEIMAGE="false";
-export HAVE_GL2PS="false";
-export HAVE_VTK="false";
-export MACOSX_USE_GLX="false";
-export CSF_OPT_INC=""
-export CSF_OPT_LIB32=""
-export CSF_OPT_LIB64=""
-export CSF_OPT_BIN32=""
-export CSF_OPT_BIN64=""
-
-# ----- Set local settings -----
-if [ -e "${aScriptPath}/custom.sh" ]; then source "${aScriptPath}/custom.sh"; fi
-
-# Read script arguments
-shopt -s nocasematch
-export TARGET="";
-if [[ "$2" == "cbp" ]]; then
-  export TARGET="cbp";
-elif [[ "$2" == "xcd" ]]; then
-  export TARGET="xcd";
-fi
-if [[ "$1" == "debug" ]]; then export CASDEB="d"; fi
-if [[ "$1" == "d" ]]; then export CASDEB="d"; fi
-shopt -u nocasematch
-
-# ----- Setup Environment Variables -----
-anArch=`uname -m`
-if [ "$anArch" != "x86_64" ] && [ "$anArch" != "ia64" ]; then
-  export ARCH="32";
-else
-  export ARCH="64";
-fi
-
-aSystem=`uname -s`
-if [ "$aSystem" == "Darwin" ]; then
-  export WOKSTATION="mac";
-  export ARCH="64";
-else
-  export WOKSTATION="lin";
-fi
-
-export CASBIN=""
-if [ "${TARGET}" == "cbp" ]; then
-  export CASBIN="${WOKSTATION}/cbp"
-elif [ "${TARGET}" == "xcd" ]; then
-  export CASBIN="adm/mac/xcd/build"
-fi
-
-export CSF_OPT_INC="${CSF_OPT_INC}:${CASROOT}/inc"
-
-if [ "${TARGET}" == "cbp" ]; then
-  export CSF_OPT_LIB32D="${CSF_OPT_LIB32}:${CASROOT}/${CASBIN}/libd"
-  export CSF_OPT_LIB64D="${CSF_OPT_LIB64}:${CASROOT}/${CASBIN}/libd"
-  export CSF_OPT_LIB32="${CSF_OPT_LIB32}:${CASROOT}/${CASBIN}/lib"
-  export CSF_OPT_LIB64="${CSF_OPT_LIB64}:${CASROOT}/${CASBIN}/lib"
-elif [ "${TARGET}" == "xcd" ]; then
-  export CSF_OPT_LIB32D="${CSF_OPT_LIB32}:${CASROOT}/${CASBIN}/Debug"
-  export CSF_OPT_LIB64D="${CSF_OPT_LIB64}:${CASROOT}/${CASBIN}/Debug"
-  export CSF_OPT_LIB32="${CSF_OPT_LIB32}:${CASROOT}/${CASBIN}/Release"
-  export CSF_OPT_LIB64="${CSF_OPT_LIB64}:${CASROOT}/${CASBIN}/Release"
-fi
-
-export CSF_OPT_CMPL=""
-
-# Optiona 3rd-parties should be enabled by HAVE macros
-if [ "$HAVE_TBB" == "true" ]; then
-  export CSF_OPT_CMPL="${CSF_OPT_CMPL} -DHAVE_TBB"
-fi
-if [ "$HAVE_OPENCL" == "true" ]; then
-  export CSF_OPT_CMPL="${CSF_OPT_CMPL} -DHAVE_OPENCL"
-fi
-if [ "$HAVE_FREEIMAGE" == "true" ]; then
-  export CSF_OPT_CMPL="${CSF_OPT_CMPL} -DHAVE_FREEIMAGE"
-fi
-if [ "$HAVE_GL2PS" == "true" ]; then
-  export CSF_OPT_CMPL="${CSF_OPT_CMPL} -DHAVE_GL2PS"
-fi
-if [ "$HAVE_VTK" == "true" ]; then
-  export CSF_OPT_CMPL="${CSF_OPT_CMPL} -DHAVE_VTK"
-fi
-# Option to compile OCCT with X11 libs on Mac OS X
-if [ "$MACOSX_USE_GLX" == "true" ]; then
-  export CSF_OPT_CMPL="${CSF_OPT_CMPL} -DMACOSX_USE_GLX"
-fi
-
-# To split string into array
-aDelimBack=$IFS
-IFS=":"
-
-# 3rd-parties additional include paths
-set -- "$CSF_OPT_INC"
-declare -a aPartiesIncs=($*)
-for anItem in ${aPartiesIncs[*]}
-do
-  export CSF_OPT_CMPL="${CSF_OPT_CMPL} -I${anItem}";
-done
-
-# Append 3rd-parties to LD_LIBRARY_PATH
-if [ "$ARCH" == "32" ]; then
-  set -- "$CSF_OPT_LIB32"
-  declare -a aPartiesLibs=($*)
-  set -- "$CSF_OPT_LIB32D"
-  declare -a aPartiesLibsDeb=($*)
-else
-  set -- "$CSF_OPT_LIB64"
-  declare -a aPartiesLibs=($*)
-  set -- "$CSF_OPT_LIB64D"
-  declare -a aPartiesLibsDeb=($*)
-fi
-
-# Turn back value
-IFS=$aDelimBack
-
-OPT_LINKER_OPTIONS_DEB=""
-for anItem in ${aPartiesLibsDeb[*]}
-do
-  OPT_LINKER_OPTIONS_DEB="${OPT_LINKER_OPTIONS_DEB} -L${anItem}"
-done
-
-OPT_LINKER_OPTIONS=""
-for anItem in ${aPartiesLibs[*]}
-do
-  if [ "${LD_LIBRARY_PATH}" == "" ]; then
-    export LD_LIBRARY_PATH="${anItem}"
-  else
-    export LD_LIBRARY_PATH="${anItem}:${LD_LIBRARY_PATH}"
-  fi
-  OPT_LINKER_OPTIONS="${OPT_LINKER_OPTIONS} -L${anItem}"
-done
-
-if [ "$ARCH" == "64" ]; then
-  export CSF_OPT_LNK64="$OPT_LINKER_OPTIONS"
-  export CSF_OPT_LNK64D="$OPT_LINKER_OPTIONS_DEB"
-else
-  export CSF_OPT_LNK32="$OPT_LINKER_OPTIONS"
-  export CSF_OPT_LNK32D="$OPT_LINKER_OPTIONS_DEB"
-fi
-
-
-BIN_PATH="${CASBIN}/bin${CASDEB}"
-LIBS_PATH="${CASBIN}/lib${CASDEB}"
-if [ "${TARGET}" == "xcd" ]; then
-  [[ "${CASDEB}" == "d" ]] && BIN_PATH="${CASBIN}/Debug" || BIN_PATH="${CASBIN}/Release"
-  LIBS_PATH="$BIN_PATH"
-fi
-
-export PATH="${CASROOT}/${BIN_PATH}:${PATH}"
-export LD_LIBRARY_PATH="${CASROOT}/${LIBS_PATH}:${LD_LIBRARY_PATH}"
-if [ "$WOKSTATION" == "mac" ]; then
-  export DYLD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${DYLD_LIBRARY_PATH}"
-fi
-
-# Set envoronment variables used by OCCT
-export CSF_LANGUAGE="us"
-export MMGT_CLEAR="1"
-export CSF_EXCEPTION_PROMPT="1"
-export CSF_SHMessage="${CASROOT}/src/SHMessage"
-export CSF_MDTVTexturesDirectory="${CASROOT}/src/Textures"
-export CSF_ShadersDirectory="${CASROOT}/src/Shaders"
-export CSF_XSMessage="${CASROOT}/src/XSMessage"
-export CSF_TObjMessage="${CASROOT}/src/TObj"
-export CSF_StandardDefaults="${CASROOT}/src/StdResource"
-export CSF_PluginDefaults="${CASROOT}/src/StdResource"
-export CSF_XCAFDefaults="${CASROOT}/src/StdResource"
-export CSF_TObjDefaults="${CASROOT}/src/StdResource"
-export CSF_StandardLiteDefaults="${CASROOT}/src/StdResource"
-export CSF_UnitsLexicon="${CASROOT}/src/UnitsAPI/Lexi_Expr.dat"
-export CSF_UnitsDefinition="${CASROOT}/src/UnitsAPI/Units.dat"
-export CSF_IGESDefaults="${CASROOT}/src/XSTEPResource"
-export CSF_STEPDefaults="${CASROOT}/src/XSTEPResource"
-export CSF_XmlOcafResource="${CASROOT}/src/XmlOcafResource"
-export CSF_MIGRATION_TYPES="${CASROOT}/src/StdResource/MigrationSheet.txt"
-
-# Draw Harness special stuff
-if [ -e "${CASROOT}/src/DrawResources" ]; then
-  export DRAWHOME="${CASROOT}/src/DrawResources"
-  export CSF_DrawPluginDefaults="${DRAWHOME}"
-fi
-if [ -e "${aScriptPath}/src/DrawResourcesProducts" ]; then
-  export CSF_DrawPluginProductsDefaults="${aScriptPath}/src/DrawResourcesProducts"
-fi
Index: oce/gendoc.bat
===================================================================
--- oce.orig/gendoc.bat
+++ /dev/null
@@ -1,23 +0,0 @@
-@echo off
-
-rem Helper script to run generation of OCCT documentation on Windows.
-rem Running it requires that Tcl, Doxygen, and MikTex (for PDF generation)
-rem should be in the PATH
-
-SET "OLD_PATH=%PATH%"
-
-if exist "%~dp0env.bat" (
-  call "%~dp0env.bat"
-)
-
-set "TCL_EXEC=tclsh.exe"
-
-for %%X in (%TCL_EXEC%) do (set TCL_FOUND=%%~$PATH:X)
-
-if defined TCL_FOUND (
-  %TCL_EXEC% %~dp0adm/start.tcl  %*
-) else (
-  echo "Error. %TCL_EXEC% is not found. Please update PATH variable"
-)
-
-SET "PATH=%OLD_PATH%"
Index: oce/msvc.bat
===================================================================
--- oce.orig/msvc.bat
+++ /dev/null
@@ -1,42 +0,0 @@
-@echo off
-
-rem Setup environment
-call "%~dp0env.bat" %1 %2 %3
-
-rem Define path to project file
-set "PRJFILE=%~dp0\adm\msvc\%VCVER%\OCCT.sln"
-if not exist "%PRJFILE%" set "PRJFILE=%~dp0\adm\msvc\%VCVER%\Products.sln"
-if not "%4" == "" (
-  set "PRJFILE=%4"
-)
-
-set "VisualStudioExpressName=VCExpress"
-
-if "%VCVER%" == "vc8" (
-  set "DevEnvDir=%VS80COMNTOOLS%..\IDE"
-) else if "%VCVER%" == "vc9" (
-  set "DevEnvDir=%VS90COMNTOOLS%..\IDE"
-) else if "%VCVER%" == "vc10" (
-  set "DevEnvDir=%VS100COMNTOOLS%..\IDE"
-) else if "%VCVER%" == "vc11" (
-  set "DevEnvDir=%VS110COMNTOOLS%..\IDE"
-  rem Visual Studio Express starting from VS 2012 is called "for Windows Desktop"
-  rem and has a new name for executable - WDExpress
-  set "VisualStudioExpressName=WDExpress"
-) else if "%VCVER%" == "vc12" (
-  set "DevEnvDir=%VS120COMNTOOLS%..\IDE"
-  set "VisualStudioExpressName=WDExpress"
-) else (
-  echo Error: wrong VS identifier
-  exit /B
-)
-
-rem Launch Visual Studio - either professional (devenv) or Express, as available
-if exist "%DevEnvDir%\devenv.exe"  (
-  start "" "%DevEnvDir%\devenv.exe" "%PRJFILE%"
-) else if exist "%DevEnvDir%\%VisualStudioExpressName%.exe"  (
-  start "" "%DevEnvDir%\%VisualStudioExpressName%.exe" "%PRJFILE%"
-) else (
-  echo Error: Could not find MS Visual Studio ^(%VCVER%^)
-  echo Check relevant environment variable ^(e.g. VS80COMNTOOLS for vc8^)
-)
