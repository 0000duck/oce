Index: oce/CMakeLists.txt
===================================================================
--- oce.orig/CMakeLists.txt
+++ oce/CMakeLists.txt
@@ -20,17 +20,17 @@
 PROJECT(OCE)
 
 SET(OCE_VERSION_MAJOR 0)
-SET(OCE_VERSION_MINOR 10)
+SET(OCE_VERSION_MINOR 12)
 # OCE_VERSION_PATCH is used for bugfixes releases only
 # (uncomment following line)
-# SET(OCE_VERSION_PATCH 1)
+#SET(OCE_VERSION_PATCH 0)
 #  Empty for official releases, set to -dev, -rc1, etc for development releases
-SET(OCE_VERSION_DEVEL -dev)
+SET(OCE_VERSION_DEVEL)
 
 # bugfix release: add ${OCE_VERSION_PATCH} to OCE_VERSION
 SET(OCE_VERSION ${OCE_VERSION_MAJOR}.${OCE_VERSION_MINOR}${OCE_VERSION_DEVEL})
 
-SET(OCE_ABI_SOVERSION 2)
+SET(OCE_ABI_SOVERSION 6)
 SET(OCE_ABI_VERSION ${OCE_ABI_SOVERSION}.0.0)
 
 # Set the minimum version of cmake required to 2.6
@@ -73,19 +73,28 @@ IF(MSVC)
 ENDIF(MSVC)
 
 IF(MSVC)
-	OPTION_WITH_DEFAULT( ${PROJECT_NAME}_USE_BUNDLE "Use OCE Windows Bundle" OFF )
+	OPTION_WITH_DEFAULT( ${PROJECT_NAME}_USE_BUNDLE "Use OCE Windows Bundle that has been built and installed" OFF )
+	OPTION_WITH_DEFAULT( ${PROJECT_NAME}_USE_BUNDLE_SOURCE "Use OCE Windows Bundle source and incorporate into current project" OFF )
 ENDIF(MSVC)
 
-IF(${PROJECT_NAME}_USE_BUNDLE)
+IF(BORLAND)
+	OPTION_WITH_DEFAULT( ${PROJECT_NAME}_INSTALL_TDS_FILES "Instal TDS files (debug informations)" ON )
+ENDIF(BORLAND)
+
+IF(${PROJECT_NAME}_USE_BUNDLE OR ${PROJECT_NAME}_USE_BUNDLE_SOURCE)
 	OPTION_WITH_DEFAULT( ${PROJECT_NAME}_BUNDLE_AUTOINSTALL "Autoinstall bundle DLLs" ON )
 	MARK_AS_ADVANCED(${PROJECT_NAME}_BUNDLE_AUTOINSTALL)
-ENDIF(${PROJECT_NAME}_USE_BUNDLE)
+ENDIF(${PROJECT_NAME}_USE_BUNDLE OR ${PROJECT_NAME}_USE_BUNDLE_SOURCE)
 
-IF (MSVC AND NOT NMAKE)
+IF ((MSVC AND NOT NMAKE) OR CMAKE_COMPILER_IS_GNUCXX)
 	SET(${PROJECT_NAME}_COMPILER_SUPPORTS_PCH TRUE)
-	OPTION_WITH_DEFAULT( ${PROJECT_NAME}_USE_PCH "Use Precompiled Headers" ON )
+	IF(MSVC)
+		OPTION_WITH_DEFAULT( ${PROJECT_NAME}_USE_PCH "Use Precompiled Headers" ON )
+	ELSE()
+		OPTION_WITH_DEFAULT( ${PROJECT_NAME}_USE_PCH "Use Precompiled Headers" OFF )	
+	ENDIF()
 	MARK_AS_ADVANCED(${PROJECT_NAME}_USE_PCH)
-ENDIF(MSVC AND NOT NMAKE)
+ENDIF((MSVC AND NOT NMAKE) OR CMAKE_COMPILER_IS_GNUCXX)
 
 OPTION_WITH_DEFAULT( ${PROJECT_NAME}_BUILD_SHARED_LIB "Build shared ${PROJECT_NAME} libs" ON )
 IF(NOT MSVC)
@@ -103,12 +112,42 @@ OPTION_WITH_DEFAULT( ${PROJECT_NAME}_WIT
 OPTION_WITH_DEFAULT( ${PROJECT_NAME}_WITH_FREEIMAGE "Build with FreeImage" OFF )
 OPTION_WITH_DEFAULT( ${PROJECT_NAME}_EXTRA_WARNINGS "Enable Maximum Warnings Level" OFF )
 MARK_AS_ADVANCED(${PROJECT_NAME}_EXTRA_WARNINGS)
-OPTION_WITH_DEFAULT( ${PROJECT_NAME}_TESTING "Enable unittesting framework" OFF )
-MARK_AS_ADVANCED(${PROJECT_NAME}_TESTING)
+IF( NOT "${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.8 )
+	OPTION_WITH_DEFAULT( ${PROJECT_NAME}_TESTING "Enable unittesting framework" OFF )
+	MARK_AS_ADVANCED(${PROJECT_NAME}_TESTING)
+ENDIF( NOT "${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.8 )
 OPTION_WITH_DEFAULT( ${PROJECT_NAME}_ADD_HEADERS "Add headers to project files" OFF )
 MARK_AS_ADVANCED(${PROJECT_NAME}_ADD_HEADERS)
 OPTION_WITH_DEFAULT( ${PROJECT_NAME}_DISABLE_BSPLINE_MESHER "Disable BSpline Mesher" OFF )
 MARK_AS_ADVANCED(${PROJECT_NAME}_DISABLE_BSPLINE_MESHER)
+IF(APPLE)
+  OPTION_WITH_DEFAULT( ${PROJECT_NAME}_OSX_USE_COCOA "Use native OSX Cocoa backend" ON )
+ENDIF(APPLE)
+IF (NOT WIN32)
+  OPTION_WITH_DEFAULT( ${PROJECT_NAME}_RPATH_FILTER_SYSTEM_PATHS "Filter out system paths from RPATH" ON )
+  MARK_AS_ADVANCED(${PROJECT_NAME}_RPATH_FILTER_SYSTEM_PATHS)
+ENDIF (NOT WIN32)
+
+#
+# By default, OSX uses X11 OpenGl implementation
+#
+IF (APPLE)
+  IF (NOT ${PROJECT_NAME}_OSX_USE_COCOA)
+    SET(MACOSX_USE_GLX TRUE)
+  ENDIF(NOT ${PROJECT_NAME}_OSX_USE_COCOA)
+ENDIF(APPLE)
+# The default for the DEB define is ON for all the platforms , in debug mode.
+# In MSVC it is not desirable to have it ON by default, since users must 
+# compile/use the OCE debug libraries to build it's own programs in DEBUG mode.
+# DEB should be enabled by developers only, in this case
+IF ((MSVC OR BORLAND) AND CMAKE_CONFIGURATION_TYPES)
+  SET (DEB_DEFAULT "OFF")
+ELSE ()
+   SET (DEB_DEFAULT "ON")
+ENDIF ((MSVC OR BORLAND) AND CMAKE_CONFIGURATION_TYPES)
+
+OPTION_WITH_DEFAULT( ${PROJECT_NAME}_ENABLE_DEB_FLAG "Enables DEB define in debug configuration" ${DEB_DEFAULT} )
+MARK_AS_ADVANCED(${PROJECT_NAME}_ENABLE_DEB_FLAG)
 
 IF(NOT MSVC)
 	OPTION_WITH_DEFAULT( ${PROJECT_NAME}_COVERAGE "Build with coverage testing" OFF )
@@ -170,7 +209,7 @@ SET_DIRECTORY_PROPERTIES(PROPERTIES COMP
 SET_DIRECTORY_PROPERTIES(PROPERTIES COMPILE_DEFINITIONS_RELWITHDEBINFO  NDEBUG)
 
 IF(${PROJECT_NAME}_ENABLE_DEB_FLAG)
-  SET_DIRECTORY_PROPERTIES(PROPERTIES COMPILE_DEFINITIONS_DEBUG "DEB;_DEBUG")
+  SET_DIRECTORY_PROPERTIES(PROPERTIES COMPILE_DEFINITIONS_DEBUG "DEB=1;_DEBUG")
 ELSE ()
   SET_DIRECTORY_PROPERTIES(PROPERTIES COMPILE_DEFINITIONS_DEBUG "_DEBUG")
 ENDIF (${PROJECT_NAME}_ENABLE_DEB_FLAG)
@@ -271,73 +310,61 @@ IF(${PROJECT_NAME}_MULTITHREAD_LIBRARY S
 	FIND_PACKAGE(OpenMP)
 ENDIF(${PROJECT_NAME}_MULTITHREAD_LIBRARY STREQUAL "OPENMP")
 
-IF (${PROJECT_NAME}_USE_BUNDLE)
+IF (${PROJECT_NAME}_USE_BUNDLE OR ${PROJECT_NAME}_USE_BUNDLE_SOURCE)
 	FIND_PATH(${PROJECT_NAME}_BUNDLE_ROOT_PATH oce-bundle-root.empty "Path for the OCE-win-bundle")
-ENDIF(${PROJECT_NAME}_USE_BUNDLE)
+ENDIF(${PROJECT_NAME}_USE_BUNDLE OR ${PROJECT_NAME}_USE_BUNDLE_SOURCE)
 
 IF(${PROJECT_NAME}_VISUALISATION)
 	IF(${PROJECT_NAME}_WITH_FREEIMAGE)
 		FIND_PATH(FREEIMAGE_INCLUDE_DIR FreeImagePlus.h DOC "Location of header files for FreeImage" ${CMAKE_SYSTEM_INCLUDE_PATH})
 		IF(FREEIMAGE_INCLUDE_DIR)
-			FIND_LIBRARY( FREEIMAGE_LIBRARY freeimageplus "Path to the freeimage library" )
+			FIND_LIBRARY( FREEIMAGE_LIBRARY freeimage "Path to the freeimage library" )
 	
 			IF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
-				FIND_LIBRARY( FREEIMAGE_LIBRARY_DEBUG freeimageplusd "Path to the freeimage debug library" )
+				FIND_LIBRARY( FREEIMAGE_LIBRARY_DEBUG freeimaged "Path to the freeimage debug library" )
 			ENDIF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
 		ENDIF(FREEIMAGE_INCLUDE_DIR)
 		MARK_AS_ADVANCED(FREEIMAGE_INCLUDE_DIR FREEIMAGE_LIBRARY)
+		IF(WIN32)
+			IF(FREEIMAGE_INCLUDE_DIR)
+				FIND_LIBRARY( FREEIMAGEPLUS_LIBRARY freeimageplus "Path to the freeimageplus library" )
+				IF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
+					FIND_LIBRARY( FREEIMAGEPLUS_LIBRARY_DEBUG freeimageplusd "Path to the freeimageplus debug library" )
+				ENDIF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
+			ENDIF(FREEIMAGE_INCLUDE_DIR)
+			MARK_AS_ADVANCED(FREEIMAGEPLUS_LIBRARY)
+		ENDIF(WIN32)
 	ENDIF(${PROJECT_NAME}_WITH_FREEIMAGE)
 
-	IF (NOT WIN32)
+	IF (NOT WIN32) 
 		FIND_PACKAGE(X11 REQUIRED)
 		FIND_LIBRARY( X11_Xmu_LIB Xmu PATHS /usr/openwin/lib )
-		IF( NOT DEFINED X11_FONT_PATH )
-			IF(NOT APPLE)
-				SET(X11_FONT_PATH
-					"/usr/share/X11/fonts"
-					"/usr/share/fonts/X11")
-			ELSE(NOT APPLE)
-				SET(X11_FONT_PATH
-					"/usr/X11/lib/X11/fonts"
-					"/Library/Fonts"
-					"/System/Library/Fonts")
-			ENDIF(NOT APPLE)
-		ENDIF( NOT DEFINED X11_FONT_PATH )
-		SET(X11_FONT_PATH ${X11_FONT_PATH} CACHE PATH
-			"Font directories containing fonts.dir listing files")
-		MARK_AS_ADVANCED(X11_FONT_PATH)
 	ENDIF(NOT WIN32)
-
-	IF (NOT APPLE)
+	
+	IF (NOT APPLE OR ${PROJECT_NAME}_OSX_USE_COCOA)
 		FIND_PACKAGE(OpenGL REQUIRED)
 		IF(NOT ${OPENGL_GLU_FOUND} STREQUAL "YES")
 			MESSAGE( FATAL_ERROR "GLU not found" )
 		ENDIF(NOT ${OPENGL_GLU_FOUND} STREQUAL "YES")
-	ELSE (NOT APPLE)
-		# under OSX, builtin FindOpenGl.cmake returns Cocoa OpenGL implementation
-		# oce requires the X11 based OpenGL
+	ELSE (NOT APPLE OR ${PROJECT_NAME}_OSX_USE_COCOA)
 		SET(OPENGL_INCLUDE_DIR /usr/X11R6/include/)
 		SET(OPENGL_LIBRARIES /usr/X11R6/lib/libGL.dylib /usr/X11R6/lib/libGLU.dylib)
-	ENDIF (NOT APPLE)
-
+	ENDIF (NOT APPLE OR ${PROJECT_NAME}_OSX_USE_COCOA)
+	
 	## FreeType / FTGL
-	IF(NOT ${PROJECT_NAME}_USE_BUNDLE)
+	IF(NOT ${PROJECT_NAME}_USE_BUNDLE AND NOT ${PROJECT_NAME}_USE_BUNDLE_SOURCE)
 		FIND_PACKAGE(Freetype REQUIRED)
-	ELSE (NOT ${PROJECT_NAME}_USE_BUNDLE)
+	ELSE (NOT ${PROJECT_NAME}_USE_BUNDLE AND NOT ${PROJECT_NAME}_USE_BUNDLE_SOURCE)
 		FIND_LIBRARY(FREETYPE_LIBRARY freetype)
-	ENDIF(NOT ${PROJECT_NAME}_USE_BUNDLE)
+	ENDIF(NOT ${PROJECT_NAME}_USE_BUNDLE AND NOT ${PROJECT_NAME}_USE_BUNDLE_SOURCE)
 
-	FIND_PATH(FTGL_V212_INCLUDE_DIR FTGL/FTFace.h DOC "Location of header files for FTGL 2.1.2" ${CMAKE_SYSTEM_INCLUDE_PATH})
-	FIND_PATH(FTGL_INCLUDE_DIR FTGL/ftgl.h "Location of header files for FTGL > 2.1.2" ${CMAKE_SYSTEM_INCLUDE_PATH})
-	IF(NOT FTGL_V212_INCLUDE_DIR AND FTGL_INCLUDE_DIR)
-		ADD_DEFINITIONS(-DHAVE_FTGL_NEWER212)
-	ENDIF(NOT FTGL_V212_INCLUDE_DIR AND FTGL_INCLUDE_DIR)
-	FIND_LIBRARY(FTGL_LIBRARY ftgl "Location of ftgl library (any version)")
+	FIND_PATH(FTGL_INCLUDE_DIR FTGL/ftgl.h "Location of header files for FTGL" ${CMAKE_SYSTEM_INCLUDE_PATH})
+	FIND_LIBRARY(FTGL_LIBRARY ftgl "Location of ftgl library")
 	IF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
-		FIND_LIBRARY(FTGL_LIBRARY_DEBUG ftgld "Location of ftgl debug library (any version)")
+		FIND_LIBRARY(FTGL_LIBRARY_DEBUG ftgld "Location of ftgl debug library")
 		FIND_LIBRARY(FREETYPE_LIBRARY_DEBUG freetyped "Location of freetype debug library")
 	ENDIF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
-	MARK_AS_ADVANCED(X11_Xmu_LIB FTGL_V212_INCLUDE_DIR FTGL_INCLUDE_DIR FTGL_LIBRARY)
+	MARK_AS_ADVANCED(X11_Xmu_LIB FTGL_INCLUDE_DIR FTGL_LIBRARY)
 
 	## GL2PS
 	IF(${PROJECT_NAME}_WITH_GL2PS)
@@ -372,8 +399,7 @@ IF(${PROJECT_NAME}_OCAF)
 		src/StdResource/Standard.us
 		src/StdResource/StandardLite
 		src/StdResource/TObj
-		src/StdResource/XCAF
-		src/StdResource/dftree.tcl )
+		src/StdResource/XCAF )
 ENDIF(${PROJECT_NAME}_OCAF)
 
 IF(${PROJECT_NAME}_DATAEXCHANGE)
@@ -389,10 +415,8 @@ IF(${PROJECT_NAME}_DATAEXCHANGE)
 ENDIF(${PROJECT_NAME}_DATAEXCHANGE)
 
 IF(${PROJECT_NAME}_DRAW)
-	IF (NOT APPLE)
-		FIND_PACKAGE(TCL REQUIRED)
-	ELSE(NOT APPLE)
-		# under OSX, should use a X11 based TCL/TK, for instance fink's implementation
+    IF (APPLE AND NOT ${PROJECT_NAME}_OSX_USE_COCOA)
+    	# under OSX-X11, should use a X11 based TCL/TK, for instance fink's implementation
 		SET(FINK_INSTALL_PATH /sw)
 		MARK_AS_ADVANCED(FINK_INSTALL_PATH)
 		SET(TCL_LIBRARY ${FINK_INSTALL_PATH}/lib/libtcl.dylib)
@@ -402,7 +426,9 @@ IF(${PROJECT_NAME}_DRAW)
 		SET(TK_INCLUDE_PATH ${FINK_INSTALL_PATH}/include)
 		SET(TK_WISH ${FINK_INSTALL_PATH}/bin/wish)
 		MARK_AS_ADVANCED(TCL_INCLUDE_PATH TK_INCLUDE_PATH TCL_LIBRARY TK_LIBRARY)
-	ENDIF(NOT APPLE)
+	ELSE(APPLE AND NOT ${PROJECT_NAME}_OSX_USE_COCOA)
+		FIND_PACKAGE(TCL REQUIRED)
+	ENDIF(APPLE AND NOT ${PROJECT_NAME}_OSX_USE_COCOA)
 	MESSAGE(STATUS "TCL LIB: ${TCL_LIBRARY}")
 	MESSAGE(STATUS "TK LIB: ${TK_LIBRARY}")
 	FILE(GLOB DRAWRESOURCES_TCL_FILES RELATIVE ${${PROJECT_NAME}_SOURCE_DIR} src/DrawResources/*.tcl)
@@ -412,8 +438,6 @@ IF(${PROJECT_NAME}_DRAW)
 		src/DrawResources/DRAW.info
 		src/DrawResources/DrawDefault
 		src/DrawResources/DrawPlugin
-		src/DrawResources/demo
-		src/DrawResources/demo.bat
 		src/DrawResources/idoc
 		src/DrawResources/lamp.ico
 		src/DrawResources/mdltest
@@ -421,11 +445,11 @@ IF(${PROJECT_NAME}_DRAW)
 		src/DrawResources/tdoc
 		src/DrawResources/test2xl
 		src/DrawResources/vmdltest
-		src/DrawResources/wing.brep )
+		src/DrawResources/dftree.tcl )
 ENDIF(${PROJECT_NAME}_DRAW)
 
 IF (${PROJECT_NAME}_USE_BUNDLE AND ${PROJECT_NAME}_BUNDLE_ROOT_PATH)
-	MESSAGE("Using OCE Bundle")
+	MESSAGE("Using previously built and installed OCE Bundle")
 	IF (${PROJECT_NAME}_VISUALISATION)
 		SET(FTGL_INCLUDE_DIR ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/include/FTGL CACHE PATH "" FORCE)
 		SET(FREETYPE_INCLUDE_DIR_freetype2 ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/include/freetype CACHE PATH "" FORCE)
@@ -433,20 +457,21 @@ IF (${PROJECT_NAME}_USE_BUNDLE AND ${PRO
 		SET(FREETYPE_INCLUDE_DIRS ${FREETYPE_INCLUDE_DIR_freetype2} ${FREETYPE_INCLUDE_DIR_ft2build})
 		SET(FREETYPE_LIBRARY ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/lib/freetype.lib CACHE FILEPATH "" FORCE)
 		SET(FREETYPE_LIBRARIES ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/lib/freetype.lib CACHE FILEPATH "" FORCE)
-		SET(FREETYPE_LIBRARY_DEBUG ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/libd/freetyped.lib CACHE FILEPATH "" FORCE)
+		SET(FREETYPE_LIBRARY_DEBUG ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/lib/freetyped.lib CACHE FILEPATH "" FORCE)
 		SET(FTGL_LIBRARY ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/lib/ftgl.lib CACHE FILEPATH "" FORCE)
-		SET(FTGL_LIBRARY_DEBUG ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/libd/ftgld.lib CACHE FILEPATH "" FORCE)
-		ADD_DEFINITIONS(-DHAVE_FTGL_NEWER212)
+		SET(FTGL_LIBRARY_DEBUG ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/lib/ftgld.lib CACHE FILEPATH "" FORCE)
 
 		IF(${PROJECT_NAME}_WITH_GL2PS)
 			SET(GL2PS_LIBRARY ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/lib/gl2ps.lib CACHE FILEPATH "" FORCE)
-			SET(GL2PS_LIBRARY_DEBUG ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/libd/gl2psd.lib CACHE FILEPATH "" FORCE)
+			SET(GL2PS_LIBRARY_DEBUG ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/lib/gl2psd.lib CACHE FILEPATH "" FORCE)
 			SET(GL2PS_INCLUDE_DIR ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/include/gl2ps CACHE PATH "" FORCE)
 		ENDIF(${PROJECT_NAME}_WITH_GL2PS)
 
 		IF(${PROJECT_NAME}_WITH_FREEIMAGE)
 			SET(FREEIMAGE_LIBRARY ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/lib/FreeImage.lib CACHE FILEPATH "" FORCE)
-			SET(FREEIMAGE_LIBRARY_DEBUG ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/libd/FreeImaged.lib CACHE FILEPATH "" FORCE)
+			SET(FREEIMAGE_LIBRARY_DEBUG ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/lib/FreeImaged.lib CACHE FILEPATH "" FORCE)
+			SET(FREEIMAGEPLUS_LIBRARY ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/lib/FreeImagePlus.lib CACHE FILEPATH "" FORCE)
+			SET(FREEIMAGEPLUS_LIBRARY_DEBUG ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/lib/FreeImagePlusd.lib CACHE FILEPATH "" FORCE)
 			SET(FREEIMAGE_INCLUDE_DIR ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/include/FreeImage CACHE PATH "" FORCE)
 		ENDIF(${PROJECT_NAME}_WITH_FREEIMAGE)
 	ENDIF (${PROJECT_NAME}_VISUALISATION)
@@ -470,6 +495,7 @@ IF(WIN32)
 	SET(CSF_kernel32_LIB kernel32)
 	SET(CSF_SOCKETLibs_LIB ws2_32)
 	SET(CSF_wsock32_LIB ws2_32)
+	SET(CSF_psapi_LIB psapi)
 ELSE(WIN32)
 	SET(LM "-lm")
 	SET(WIN32_LIBS "")
@@ -479,6 +505,7 @@ ELSE(WIN32)
 	SET(CSF_kernel32_LIB "")
 	SET(CSF_SOCKETLibs_LIB "")
 	SET(CSF_wsock32_LIB "")
+	SET(CSF_psapi_LIB "")
 ENDIF(WIN32)
 
 ###################################################
@@ -547,6 +574,7 @@ IF (NOT WIN32)
 	CHECK_INCLUDE_FILE_CXX(sys/filio.h HAVE_SYS_FILIO_H)
 	CHECK_INCLUDE_FILE_CXX(sys/mman.h HAVE_SYS_MMAN_H)
 	CHECK_INCLUDE_FILE_CXX(libc.h HAVE_LIBC_H)
+	CHECK_INCLUDE_FILE_CXX(mm_malloc.h HAVE_MM_MALLOC_H)
 	# Check library functions
 	INCLUDE(CheckFunctionExists)
 	CHECK_FUNCTION_EXISTS(alloca HAVE_ALLOCA)
@@ -556,6 +584,7 @@ IF (NOT WIN32)
 	CHECK_FUNCTION_EXISTS(statvfs HAVE_STATVFS)
 	CHECK_FUNCTION_EXISTS(finite HAVE_FINITE)
 	CHECK_FUNCTION_EXISTS(localtime_r HAVE_LOCALTIME_R)
+	CHECK_FUNCTION_EXISTS(posix_memalign HAVE_POSIX_MEMALIGN)
 	SET(CMAKE_REQUIRED_LIBRARIES sunmath)
 	CHECK_FUNCTION_EXISTS(ieee_handler HAVE_SUNMATH)
 	SET(CMAKE_REQUIRED_LIBRARIES)
@@ -621,6 +650,65 @@ IF (NOT WIN32)
 ENDIF(NOT WIN32)
 
 #######################################################
+# Check compiler version - Determine Borland compiler #
+#######################################################
+IF(BORLAND AND NOT BORLAND_VERSION)
+	IF(EXISTS ${CMAKE_CXX_COMPILER})
+		EXECUTE_PROCESS(
+			COMMAND ${CMAKE_CXX_COMPILER}  /?
+			OUTPUT_VARIABLE _output
+			ERROR_QUIET
+		)
+		
+		string(REGEX MATCH "Embarcadero C[+][+] [0-9]+.[0-9]+"
+			_borland_version "${_output}")
+			
+		if(_borland_version)
+			string(REGEX MATCHALL "[0-9]+" _borland_version_list "${_borland_version}")
+			list(GET _borland_version_list 0 _borland_major)
+			list(GET _borland_version_list 1 _borland_minor)
+		else()
+			string(REGEX MATCH "Borland C[+][+] [0-9]+].[0-9]+"
+				_borland_version "${_output}")
+			
+			if(_borland_version)
+				string(REGEX MATCHALL "[0-9]+" _borland_version_list "${_borland_version}")
+				list(GET _borland_version_list 0 _borland_major)
+				list(GET _borland_version_list 1 _borland_minor)
+			endif()
+		endif()
+			
+		# XE2 compiler?
+		if("v${_borland_major}.${_borland_minor}" STREQUAL "v6.41")
+			SET(BORLAND_VERSION "bcc32 v6.41 (RS XE2)")
+			SET(BORLAND_VERSION_RS_XE2 1)
+		# XE compiler?
+		elseif("v${_borland_major}.${_borland_minor}" STREQUAL "v6.30")
+			SET(BORLAND_VERSION "bcc32 v6.30 (RS XE)")
+			SET(BORLAND_VERSION_RS_XE 1)
+		# 2010 compiler?
+		elseif("v${_borland_major}.${_borland_minor}" STREQUAL "v6.20")
+			SET(BORLAND_VERSION "bcc32 v6.20 (RS 2010)")
+			SET(BORLAND_VERSION_RS_2010 1)
+		# TODO: 2009 compiler?
+		# TODO: 2007 compiler?
+		# 2006 compiler?
+		elseif("v${_borland_major}.${_borland_minor}" STREQUAL "v5.82")
+			SET(BORLAND_VERSION "bcc32 v5.82 (BDS 2006)")
+			SET(BORLAND_VERSION_BDS_2006 1)
+		#TODO: Older compilers?
+		else()
+			SET(BORLAND_VERSION "Unknown")
+		endif()
+		
+		UNSET(_output)
+		UNSET(_borland_version)
+		UNSET(_borland_major)
+		UNSET(_borland_minor)
+	ENDIF()
+ENDIF()
+
+#######################################################
 # Check platforms - Define specific compilation flags #
 #######################################################
 IF(UNIX)
@@ -639,6 +727,11 @@ ELSE(UNIX)
 		######### Windows ###########
 		MESSAGE(STATUS "Windows system detected")
 		ADD_DEFINITIONS(-DWNT -DWIN32 -D_WINDOWS -DCSFDB -DHAVE_CONFIG_H )
+		######### Borland ###########
+		IF(BORLAND)
+			MESSAGE(STATUS "Borland compiler detected: ${BORLAND_VERSION}")
+			ADD_DEFINITIONS(-DHAVE_IOS )
+		ENDIF(BORLAND)
 		SET(PLATFORM win)
 	ELSE(WIN32)
 		MESSAGE(STATUS "Unknown platform")
@@ -655,6 +748,9 @@ IF( ${PROJECT_NAME}_EXTRA_WARNINGS)
 	IF(CMAKE_COMPILER_IS_GNUCXX)
 		ADD_DEFINITIONS("-Wall -Wextra")
 	ENDIF(CMAKE_COMPILER_IS_GNUCXX)
+	IF(CMAKE_CXX_COMPILER MATCHES ".*clang")
+		ADD_DEFINITIONS("-Weverything")
+	ENDIF(CMAKE_CXX_COMPILER MATCHES ".*clang")
 	IF(BORLAND)
 		#TODO
 	ENDIF(BORLAND)
@@ -672,9 +768,11 @@ IF(WIN32)
 	IF(MSVC) # The compiler used is MSVC
 		MESSAGE(STATUS "Found MSVC compiler: ${MSVC} ${MSVC_VERSION}")
 		SET(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/bin/)
-	ELSE(MSVC)
+	ELSEIF (BORLAND) # The compiler used is BORLAND
+		SET(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/win${BIT}/bin/${CMAKE_BUILD_TYPE})
+	ELSE()
 		SET(LIBRARY_OUTPUT_PATH win${BIT}/bin/${CMAKE_BUILD_TYPE})
-	ENDIF(MSVC)
+	ENDIF()
 	SET(EXECUTABLE_OUTPUT_PATH ${LIBRARY_OUTPUT_PATH})
 ELSE(WIN32)
 	SET(LIBRARY_OUTPUT_PATH ${PLATFORM}/${CMAKE_SYSTEM_PROCESSOR}-${CMAKE_BUILD_TYPE}-${BIT})
@@ -719,6 +817,64 @@ ELSE(WIN32)
 ENDIF(WIN32)
 STRING(TOLOWER ${PROJECT_NAME} PROJECT_NAME_LOWERCASE)
 
+# Places all of target's output files (dll, lib) in ${target_output_path}
+MACRO( SET_TARGET_OUTPUT_DIRECTORIES target target_output_path )
+	SET_TARGET_PROPERTIES( ${target} PROPERTIES
+		ARCHIVE_OUTPUT_DIRECTORY ${target_output_path}
+		LIBRARY_OUTPUT_DIRECTORY ${target_output_path}
+		RUNTIME_OUTPUT_DIRECTORY ${target_output_path}
+	)
+ENDMACRO()
+
+# If OCE_USE_BUNDLE_SOURCE, then we need to add oce-win-bundle and set it
+# to build into the same destination directories as OCE. This cannot run
+# until LIBRARY_OUTPUT_PATH is set above
+IF (${PROJECT_NAME}_USE_BUNDLE_SOURCE AND ${PROJECT_NAME}_BUNDLE_ROOT_PATH)
+	# Embed oce-win-bundle project into this CMake project
+	MESSAGE("Using OCE Bundle in same CMake project")
+	ADD_SUBDIRECTORY( ${${PROJECT_NAME}_BUNDLE_ROOT_PATH} ${CMAKE_BINARY_DIR}/oce-win-bundle )
+
+  # The installation directory of the bundle must match the one of OCE
+  SET(OCE_WIN_BUNDLE_INSTALL_DIR ${${PROJECT_NAME}_INSTALL_PREFIX} CACHE PATH "" FORCE)
+  
+	# Look for includes in bundle source directory.
+	# Put oce-win-bundle libraries and dlls in same place OCE libraries and dlls are going,
+	# and set variables to point OCE to them.
+	SET( BUNDLE_LIBRARY_OUTPUT_DIRECTORY "${LIBRARY_OUTPUT_PATH}" )
+	IF ( CMAKE_CONFIGURATION_TYPES )
+		SET( BUNDLE_LIBRARY_RESULT_DIRECTORY "${BUNDLE_LIBRARY_OUTPUT_DIRECTORY}/${CMAKE_CFG_INTDIR}" )
+	ELSE( CMAKE_CONFIGURATION_TYPES )
+		SET( BUNDLE_LIBRARY_RESULT_DIRECTORY "${BUNDLE_LIBRARY_OUTPUT_DIRECTORY}" )
+	ENDIF( CMAKE_CONFIGURATION_TYPES )
+	IF (${PROJECT_NAME}_VISUALISATION)
+		SET(FTGL_INCLUDE_DIR ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/libs/ftgl/src CACHE PATH "" FORCE)
+		SET_TARGET_OUTPUT_DIRECTORIES( FTGL ${BUNDLE_LIBRARY_OUTPUT_DIRECTORY} )
+		SET(FTGL_LIBRARY ${BUNDLE_LIBRARY_RESULT_DIRECTORY}/ftgl.lib CACHE FILEPATH "" FORCE)
+		SET(FTGL_LIBRARY_DEBUG ${BUNDLE_LIBRARY_RESULT_DIRECTORY}/ftgld.lib CACHE FILEPATH "" FORCE)
+		SET(FREETYPE_INCLUDE_DIR_freetype2 ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/libs/freetype CACHE PATH "" FORCE)
+		SET(FREETYPE_INCLUDE_DIR_ft2build ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/libs/freetype/include CACHE PATH "" FORCE)
+		SET(FREETYPE_INCLUDE_DIRS ${FREETYPE_INCLUDE_DIR_freetype2} ${FREETYPE_INCLUDE_DIR_ft2build})
+		SET_TARGET_OUTPUT_DIRECTORIES( freetype ${BUNDLE_LIBRARY_OUTPUT_DIRECTORY} )
+		SET(FREETYPE_LIBRARY ${BUNDLE_LIBRARY_RESULT_DIRECTORY}/freetype.lib CACHE FILEPATH "" FORCE)
+		SET(FREETYPE_LIBRARIES ${BUNDLE_LIBRARY_RESULT_DIRECTORY}/freetype.lib CACHE FILEPATH "" FORCE)
+		SET(FREETYPE_LIBRARY_DEBUG ${BUNDLE_LIBRARY_RESULT_DIRECTORY}/freetyped.lib CACHE FILEPATH "" FORCE)
+
+		IF(${PROJECT_NAME}_WITH_GL2PS)
+			SET_TARGET_OUTPUT_DIRECTORIES( gl2ps ${BUNDLE_LIBRARY_OUTPUT_DIRECTORY} )
+			SET(GL2PS_LIBRARY ${BUNDLE_LIBRARY_RESULT_DIRECTORY}/gl2ps.lib CACHE FILEPATH "" FORCE)
+			SET(GL2PS_LIBRARY_DEBUG ${BUNDLE_LIBRARY_RESULT_DIRECTORY}/gl2psd.lib CACHE FILEPATH "" FORCE)
+			SET(GL2PS_INCLUDE_DIR ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/libs/gl2ps CACHE PATH "" FORCE)
+		ENDIF(${PROJECT_NAME}_WITH_GL2PS)
+
+		IF(${PROJECT_NAME}_WITH_FREEIMAGE)
+			SET_TARGET_OUTPUT_DIRECTORIES( FreeImage ${BUNDLE_LIBRARY_OUTPUT_DIRECTORY} )
+			SET(FREEIMAGE_LIBRARY ${BUNDLE_LIBRARY_RESULT_DIRECTORY}/FreeImage.lib CACHE FILEPATH "" FORCE)
+			SET(FREEIMAGE_LIBRARY_DEBUG ${BUNDLE_LIBRARY_RESULT_DIRECTORY}/FreeImaged.lib CACHE FILEPATH "" FORCE)
+			SET(FREEIMAGE_INCLUDE_DIR ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/libs/FreeImage/Source CACHE PATH "" FORCE)
+		ENDIF(${PROJECT_NAME}_WITH_FREEIMAGE)
+	ENDIF (${PROJECT_NAME}_VISUALISATION)
+ENDIF(${PROJECT_NAME}_USE_BUNDLE_SOURCE AND ${PROJECT_NAME}_BUNDLE_ROOT_PATH)
+
 # Binaries
 IF(NOT DEFINED ${PROJECT_NAME}_INSTALL_BIN_DIR)
 	SET(${PROJECT_NAME}_INSTALL_BIN_DIR ${_PSUFFIX}bin)
@@ -739,6 +895,19 @@ ELSE(MSVC)
 	ENDIF(NOT DEFINED ${PROJECT_NAME}_INSTALL_PACKAGE_LIB_DIR)
 ENDIF(MSVC)
 
+# RPATHS
+IF(IS_ABSOLUTE ${${PROJECT_NAME}_INSTALL_LIB_DIR})
+	SET(${PROJECT_NAME}_INSTALL_LIB_DIR_RPATH ${${PROJECT_NAME}_INSTALL_LIB_DIR})
+ELSE(IS_ABSOLUTE ${${PROJECT_NAME}_INSTALL_LIB_DIR})
+	SET(${PROJECT_NAME}_INSTALL_LIB_DIR_RPATH ${${PROJECT_NAME}_INSTALL_PREFIX}/${${PROJECT_NAME}_INSTALL_LIB_DIR})
+ENDIF(IS_ABSOLUTE ${${PROJECT_NAME}_INSTALL_LIB_DIR})
+
+IF(IS_ABSOLUTE ${${PROJECT_NAME}_INSTALL_PACKAGE_LIB_DIR})
+	SET(${PROJECT_NAME}_INSTALL_PACKAGE_LIB_DIR_RPATH ${${PROJECT_NAME}_INSTALL_PACKAGE_LIB_DIR})
+ELSE(IS_ABSOLUTE ${${PROJECT_NAME}_INSTALL_PACKAGE_LIB_DIR})
+	SET(${PROJECT_NAME}_INSTALL_PACKAGE_LIB_DIR_RPATH ${${PROJECT_NAME}_INSTALL_PREFIX}/${${PROJECT_NAME}_INSTALL_PACKAGE_LIB_DIR})
+ENDIF(IS_ABSOLUTE ${${PROJECT_NAME}_INSTALL_PACKAGE_LIB_DIR})
+
 # Includes
 IF(NOT DEFINED ${PROJECT_NAME}_INSTALL_INCLUDE_DIR)
 	SET(${PROJECT_NAME}_INSTALL_INCLUDE_DIR include/${PROJECT_NAME_LOWERCASE})
@@ -777,9 +946,22 @@ IF(NOT DEFINED ${PROJECT_NAME}_INSTALL_C
 		ENDIF(APPLE)
 	ENDIF(WIN32)
 ENDIF(NOT DEFINED ${PROJECT_NAME}_INSTALL_CMAKE_DATA_DIR)
+
 # This relative path is written into OCEConfig.cmake to set OCE_INCLUDE_DIRS relative to OCEConfig.cmake
 # There is no need to prepend ${PROJECT_NAME}_INSTALL_PREFIX, CMake convention is to use slashes.
-FILE(RELATIVE_PATH ${PROJECT_NAME}_CMAKE_DATA_TO_INCLUDE_RELATIVE_DIR "/${${PROJECT_NAME}_INSTALL_CMAKE_DATA_DIR}" "/${${PROJECT_NAME}_INSTALL_INCLUDE_DIR}")
+# The first part is required if -DOCE_INSTALL_CMAKE_DATA_DIR and -DOCE_INSTALL_INCLUDE_DIR are not both absolute paths.
+IF(IS_ABSOLUTE ${${PROJECT_NAME}_INSTALL_CMAKE_DATA_DIR})
+	SET(_${PROJECT_NAME}_INSTALL_CMAKE_DATA_DIR ${${PROJECT_NAME}_INSTALL_CMAKE_DATA_DIR})
+ELSE(IS_ABSOLUTE ${${PROJECT_NAME}_INSTALL_CMAKE_DATA_DIR})
+	SET(_${PROJECT_NAME}_INSTALL_CMAKE_DATA_DIR ${CMAKE_INSTALL_PREFIX}/${${PROJECT_NAME}_INSTALL_CMAKE_DATA_DIR})
+ENDIF(IS_ABSOLUTE ${${PROJECT_NAME}_INSTALL_CMAKE_DATA_DIR})
+IF(IS_ABSOLUTE ${${PROJECT_NAME}_INSTALL_INCLUDE_DIR})
+	SET(_${PROJECT_NAME}_INSTALL_INCLUDE_DIR ${${PROJECT_NAME}_INSTALL_INCLUDE_DIR})
+ELSE(IS_ABSOLUTE ${${PROJECT_NAME}_INSTALL_INCLUDE_DIR})
+	SET(_${PROJECT_NAME}_INSTALL_INCLUDE_DIR ${CMAKE_INSTALL_PREFIX}/${${PROJECT_NAME}_INSTALL_INCLUDE_DIR})
+ENDIF(IS_ABSOLUTE ${${PROJECT_NAME}_INSTALL_INCLUDE_DIR})
+# Now the relative path can be generated
+FILE(RELATIVE_PATH ${PROJECT_NAME}_CMAKE_DATA_TO_INCLUDE_RELATIVE_DIR "${_${PROJECT_NAME}_INSTALL_CMAKE_DATA_DIR}" "${_${PROJECT_NAME}_INSTALL_INCLUDE_DIR}")
 
 FOREACH(RESOURCE_FILE ${INSTALL_RESOURCE_FILES})
 	GET_FILENAME_COMPONENT(RESOURCE_PATH ${RESOURCE_FILE} PATH)
@@ -789,25 +971,14 @@ ENDFOREACH(RESOURCE_FILE ${INSTALL_RESOU
 INSTALL(FILES ${INSTALL_STDRESOURCE_FILES}
 	DESTINATION ${${PROJECT_NAME}_INSTALL_DATA_DIR}/src/StdResource)
 
-CONFIGURE_FILE( ${${PROJECT_NAME}_SOURCE_DIR}/env.sh.cmake
-	${${PROJECT_NAME}_BINARY_DIR}/env.sh @ONLY )
-CONFIGURE_FILE( ${${PROJECT_NAME}_SOURCE_DIR}/env.csh.cmake
-	${${PROJECT_NAME}_BINARY_DIR}/env.csh @ONLY )
-
 IF(WIN32)
 	SET(ENV_SCRIPTS
 		${${PROJECT_NAME}_SOURCE_DIR}/env.bat
-		${${PROJECT_NAME}_SOURCE_DIR}/env_build.bat
 		${${PROJECT_NAME}_SOURCE_DIR}/msvc.bat
 	)
-ELSE(WIN32)
-	SET(ENV_SCRIPTS
-		${${PROJECT_NAME}_BINARY_DIR}/env.csh
-		${${PROJECT_NAME}_BINARY_DIR}/env.sh
-	)
+	INSTALL(FILES ${ENV_SCRIPTS}
+		DESTINATION ${${PROJECT_NAME}_INSTALL_SCRIPT_DIR})
 ENDIF(WIN32)
-INSTALL(FILES ${ENV_SCRIPTS}
-	DESTINATION ${${PROJECT_NAME}_INSTALL_SCRIPT_DIR})
 
 FILE(GLOB header_files ${${PROJECT_NAME}_SOURCE_DIR}/inc/*.*)
 INSTALL(FILES ${header_files}
@@ -816,9 +987,12 @@ INSTALL(FILES ${header_files}
 
 SET(OCE_INSTALL_DATA_DIR ${${PROJECT_NAME}_INSTALL_DATA_DIR})
 IF (NOT MSVC) 
-   SET(OCE_DEFAULT_CSF_GraphicShr ${${PROJECT_NAME}_INSTALL_PREFIX}/${${PROJECT_NAME}_INSTALL_LIB_DIR}/${CMAKE_SHARED_LIBRARY_PREFIX}TKOpenGl${CMAKE_SHARED_LIBRARY_SUFFIX})
-ELSE()
-   SET(OCE_DEFAULT_CSF_GraphicShr ${CMAKE_SHARED_LIBRARY_PREFIX}TKOpenGl)
+	SET(OCE_DEFAULT_CSF_GraphicShr ${${PROJECT_NAME}_INSTALL_PREFIX}/${${PROJECT_NAME}_INSTALL_LIB_DIR}/${CMAKE_SHARED_LIBRARY_PREFIX}TKOpenGl${CMAKE_SHARED_LIBRARY_SUFFIX})
+	IF (NOT ${PROJECT_NAME}_NO_LIBRARY_VERSION)
+		SET(OCE_DEFAULT_CSF_GraphicShr ${OCE_DEFAULT_CSF_GraphicShr}.${OCE_ABI_SOVERSION})
+	ENDIF (NOT ${PROJECT_NAME}_NO_LIBRARY_VERSION)
+ELSE(NOT MSVC)
+	SET(OCE_DEFAULT_CSF_GraphicShr ${CMAKE_SHARED_LIBRARY_PREFIX}TKOpenGl)
 ENDIF(NOT MSVC)
 
 #this is the header used to build OCE
@@ -828,6 +1002,12 @@ INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR
 	RENAME oce_build_config.defs
 	DESTINATION ${${PROJECT_NAME}_INSTALL_INCLUDE_DIR} COMPONENT Development )
 
+#installation paths are written into a separate file (which is not installed)
+#so that only few files have to be recompiled when installation paths are modified
+ADD_DEFINITIONS(-DHAVE_OCE_PATHS_H)
+CONFIGURE_FILE( ${CMAKE_CURRENT_SOURCE_DIR}/oce_build_paths.h.cmake
+	${CMAKE_CURRENT_BINARY_DIR}/build_inc/oce-paths.h )
+
 #this is the header that is installed on the system
 CONFIGURE_FILE( ${CMAKE_CURRENT_SOURCE_DIR}/oce_install_config.h.cmake
 	${CMAKE_CURRENT_BINARY_DIR}/install_inc/oce-config.h )
@@ -838,6 +1018,7 @@ INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR
 IF(NOT ${PROJECT_NAME}_NO_LIBRARY_VERSION)
 CONFIGURE_FILE (${CMAKE_CURRENT_SOURCE_DIR}/Version.rc.cmake
 				${CMAKE_CURRENT_BINARY_DIR}/Version.rc)
+SET ( ${PROJECT_NAME}_WIN32_RES_FILE ${CMAKE_CURRENT_BINARY_DIR}/Version.rc )
 ENDIF(NOT ${PROJECT_NAME}_NO_LIBRARY_VERSION)
 
 MACRO(PROCESS_MODULE modulename modules_std)
@@ -893,14 +1074,9 @@ IF(${PROJECT_NAME}_DATAEXCHANGE)
 	PROCESS_MODULE( "Data Exchange" "TKSTL;TKXSBase;TKSTEPBase;TKIGES;TKSTEPAttr;TKSTEP209;TKSTEP" "TKVRML;TKXCAF;TKXCAFSchema;TKXmlXCAF;TKBinXCAF;TKXDEIGES;TKXDESTEP" )
 ENDIF(${PROJECT_NAME}_DATAEXCHANGE)
 
-# Draw
-IF(${PROJECT_NAME}_DRAW)
-	PROCESS_MODULE( "Draw" "" "TKDraw;TKTopTest;TKViewerTest;TKXSDRAW;TKDCAF;TKXDEDRAW;TKTObjDRAW" )
-ENDIF(${PROJECT_NAME}_DRAW)
-
 # DRAWEXE application
 IF(${PROJECT_NAME}_DRAW)
-	PROCESS_MODULE( "Draw" "" DRAWEXE )
+	PROCESS_MODULE( "Draw" "" "TKDraw;TKTopTest;TKViewerTest;TKXSDRAW;TKDCAF;TKXDEDRAW;TKTObjDRAW;TKQADraw;DRAWEXE" )
 ENDIF(${PROJECT_NAME}_DRAW)
 
 CONFIGURE_FILE( ${CMAKE_CURRENT_SOURCE_DIR}/ProjectConfig.cmake.in
@@ -912,6 +1088,12 @@ INSTALL(FILES ${PROJECT_BINARY_DIR}/${PR
 
 INSTALL(EXPORT ${PROJECT_NAME}-libraries DESTINATION ${${PROJECT_NAME}_INSTALL_CMAKE_DATA_DIR} COMPONENT Development)
 
+IF(${PROJECT_NAME}_USE_BUNDLE_SOURCE AND ${PROJECT_NAME}_BUNDLE_ROOT_PATH)
+	# Add dependencies between OCE and oce-win-bundle
+	add_dependencies( TKService FreeImage )
+	add_dependencies( TKOpenGl freetype FTGL gl2ps )
+ENDIF(${PROJECT_NAME}_USE_BUNDLE_SOURCE AND ${PROJECT_NAME}_BUNDLE_ROOT_PATH)
+
 ############
 # PostBuild Step
 ############
@@ -937,11 +1119,43 @@ IF(MSVC AND ${PROJECT_NAME}_TESTING)
 				    ADD_CUSTOM_COMMAND(TARGET PostBuild POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy ${TCL_BIN_DIR}/${TCL_LIB_NAME_DIR}.dll ${LIBRARY_OUTPUT_PATH}/${config}/ VERBATIM)
 				ENDIF()
 				
+				SET(TMP_SRCDIR ${OCE_BUNDLE_ROOT_PATH}/Win${BIT}/bin/)
+				SET(TMP_DESTDIR ${LIBRARY_OUTPUT_PATH}/${config})
+				STRING(REGEX REPLACE "/" "\\\\" TMP_SRCDIR ${TMP_SRCDIR}) 
+				STRING(REGEX REPLACE "/" "\\\\" TMP_DESTDIR ${TMP_DESTDIR}) 
+				SET (TMP_FILELIST FreeImage FTGL gl2ps freetype FreeImagePlus)
+
+				IF (${config} MATCHES "Debug")
+				   SET(TMP_SUFFIX "d")
+				ELSE ()
+				   SET(TMP_SUFFIX)
+				ENDIF()
+
+				FOREACH (TMP_FILE ${TMP_FILELIST} )
+				     ADD_CUSTOM_COMMAND(TARGET PostBuild POST_BUILD COMMAND xcopy /Y ${TMP_SRCDIR}${TMP_FILE}${TMP_SUFFIX}.dll ${TMP_DESTDIR} VERBATIM )
+				ENDFOREACH()
+
 				# Switch between bin and bind dirs
 				IF (${config} MATCHES "Debug")
-					ADD_CUSTOM_COMMAND(TARGET PostBuild POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy_directory ${OCE_BUNDLE_ROOT_PATH}/Win${BIT}/bind/ ${LIBRARY_OUTPUT_PATH}/${config}/ VERBATIM )
+					
+					# Install TBB libraries
+					IF(${PROJECT_NAME}_MULTITHREAD_LIBRARY STREQUAL "TBB" AND TBB_BIN_DIR)
+						ADD_CUSTOM_COMMAND(TARGET PostBuild POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy "${TBB_BIN_DIR}/tbb_debug.dll" ${LIBRARY_OUTPUT_PATH}/${config}/ VERBATIM)
+					ENDIF(${PROJECT_NAME}_MULTITHREAD_LIBRARY STREQUAL "TBB" AND TBB_BIN_DIR)
+
+					IF(${PROJECT_NAME}_TBB_MALLOC_SUPPORT AND TBB_BIN_DIR)
+						ADD_CUSTOM_COMMAND(TARGET PostBuild POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy "${TBB_BIN_DIR}/tbbmalloc_debug.dll" ${LIBRARY_OUTPUT_PATH}/${config}/ VERBATIM)
+					ENDIF(${PROJECT_NAME}_TBB_MALLOC_SUPPORT AND TBB_BIN_DIR)
 				ELSE ()
-					ADD_CUSTOM_COMMAND(TARGET PostBuild POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy_directory ${OCE_BUNDLE_ROOT_PATH}/Win${BIT}/bin/ ${LIBRARY_OUTPUT_PATH}/${config}/ VERBATIM )
+					
+					# Install TBB libraries
+					IF(${PROJECT_NAME}_MULTITHREAD_LIBRARY STREQUAL "TBB" AND TBB_BIN_DIR)
+						ADD_CUSTOM_COMMAND(TARGET PostBuild POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy "${TBB_BIN_DIR}/tbb.dll" ${LIBRARY_OUTPUT_PATH}/${config}/ VERBATIM)
+					ENDIF(${PROJECT_NAME}_MULTITHREAD_LIBRARY STREQUAL "TBB" AND TBB_BIN_DIR)
+
+					IF(${PROJECT_NAME}_TBB_MALLOC_SUPPORT AND TBB_BIN_DIR)
+						ADD_CUSTOM_COMMAND(TARGET PostBuild POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy "${TBB_BIN_DIR}/tbbmalloc.dll" ${LIBRARY_OUTPUT_PATH}/${config}/ VERBATIM)
+					ENDIF(${PROJECT_NAME}_TBB_MALLOC_SUPPORT AND TBB_BIN_DIR)
 				ENDIF()
 			ENDFOREACH()
 		ELSE (CMAKE_CONFIGURATION_TYPES )
@@ -953,9 +1167,27 @@ IF(MSVC AND ${PROJECT_NAME}_TESTING)
 				ENDIF()
 
 				IF (${CMAKE_BUILD_TYPE} MATCHES "Debug")
-					ADD_CUSTOM_COMMAND(TARGET PostBuild POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy_directory ${OCE_BUNDLE_ROOT_PATH}/Win${BIT}/bind/ ${LIBRARY_OUTPUT_PATH} VERBATIM )
+					ADD_CUSTOM_COMMAND(TARGET PostBuild POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy_directory ${OCE_BUNDLE_ROOT_PATH}/Win${BIT}/bin/ ${LIBRARY_OUTPUT_PATH} VERBATIM )
+
+					# Install TBB libraries
+					IF(${PROJECT_NAME}_MULTITHREAD_LIBRARY STREQUAL "TBB" AND TBB_BIN_DIR)
+						ADD_CUSTOM_COMMAND(TARGET PostBuild POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy "${TBB_BIN_DIR}/tbb_debug.dll" ${LIBRARY_OUTPUT_PATH}/${config}/ VERBATIM)
+					ENDIF(${PROJECT_NAME}_MULTITHREAD_LIBRARY STREQUAL "TBB" AND TBB_BIN_DIR)
+
+					IF(${PROJECT_NAME}_TBB_MALLOC_SUPPORT AND TBB_BIN_DIR)
+						ADD_CUSTOM_COMMAND(TARGET PostBuild POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy "${TBB_BIN_DIR}/tbbmalloc_debug.dll" ${LIBRARY_OUTPUT_PATH}/${config}/ VERBATIM)
+					ENDIF(${PROJECT_NAME}_TBB_MALLOC_SUPPORT AND TBB_BIN_DIR)
 				ELSE ()
 					ADD_CUSTOM_COMMAND(TARGET PostBuild POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy_directory ${OCE_BUNDLE_ROOT_PATH}/Win${BIT}/bin/ ${LIBRARY_OUTPUT_PATH}/ VERBATIM )
+
+					# Install TBB libraries
+					IF(${PROJECT_NAME}_MULTITHREAD_LIBRARY STREQUAL "TBB" AND TBB_BIN_DIR)
+						ADD_CUSTOM_COMMAND(TARGET PostBuild POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy "${TBB_BIN_DIR}/tbb.dll" ${LIBRARY_OUTPUT_PATH}/${config}/ VERBATIM)
+					ENDIF(${PROJECT_NAME}_MULTITHREAD_LIBRARY STREQUAL "TBB" AND TBB_BIN_DIR)
+
+					IF(${PROJECT_NAME}_TBB_MALLOC_SUPPORT AND TBB_BIN_DIR)
+						ADD_CUSTOM_COMMAND(TARGET PostBuild POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy "${TBB_BIN_DIR}/tbbmalloc.dll" ${LIBRARY_OUTPUT_PATH}/${config}/ VERBATIM)
+					ENDIF(${PROJECT_NAME}_TBB_MALLOC_SUPPORT AND TBB_BIN_DIR)
 				ENDIF()
 		ENDIF (CMAKE_CONFIGURATION_TYPES) 
 		
@@ -965,22 +1197,24 @@ ENDIF(MSVC AND ${PROJECT_NAME}_TESTING)
 # Bundle AUTOINSTALL
 ##############
 
-IF (${PROJECT_NAME}_BUNDLE_AUTOINSTALL)
+IF (${PROJECT_NAME}_BUNDLE_AUTOINSTALL AND NOT ${PROJECT_NAME}_USE_BUNDLE_SOURCE)
 	IF (${PROJECT_NAME}_VISUALISATION)
-		INSTALL(FILES ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/bind/freetyped.dll DESTINATION ${${PROJECT_NAME}_INSTALL_BIN_DIR} CONFIGURATIONS Debug)
+		INSTALL(FILES ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/bin/freetyped.dll DESTINATION ${${PROJECT_NAME}_INSTALL_BIN_DIR} CONFIGURATIONS Debug)
 		INSTALL(FILES ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/bin/freetype.dll DESTINATION ${${PROJECT_NAME}_INSTALL_BIN_DIR} CONFIGURATIONS Release RelWithDebInfo MinSizeRel)
-		INSTALL(FILES ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/bind/FTGLd.dll DESTINATION ${${PROJECT_NAME}_INSTALL_BIN_DIR} CONFIGURATIONS Debug)
+		INSTALL(FILES ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/bin/FTGLd.dll DESTINATION ${${PROJECT_NAME}_INSTALL_BIN_DIR} CONFIGURATIONS Debug)
 		INSTALL(FILES ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/bin/FTGL.dll DESTINATION ${${PROJECT_NAME}_INSTALL_BIN_DIR} CONFIGURATIONS Release RelWithDebInfo MinSizeRel)
 	ENDIF(${PROJECT_NAME}_VISUALISATION)
 
 	IF (${PROJECT_NAME}_VISU_DEP AND ${PROJECT_NAME}_WITH_GL2PS )
-		INSTALL(FILES ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/bind/gl2psd.dll DESTINATION ${${PROJECT_NAME}_INSTALL_BIN_DIR} CONFIGURATIONS Debug)
+		INSTALL(FILES ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/bin/gl2psd.dll DESTINATION ${${PROJECT_NAME}_INSTALL_BIN_DIR} CONFIGURATIONS Debug)
 		INSTALL(FILES ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/bin/gl2ps.dll DESTINATION ${${PROJECT_NAME}_INSTALL_BIN_DIR} CONFIGURATIONS Release RelWithDebInfo MinSizeRel)
 	ENDIF(${PROJECT_NAME}_VISU_DEP AND ${PROJECT_NAME}_WITH_GL2PS)
 
 	IF (${PROJECT_NAME}_VISU_DEP AND ${PROJECT_NAME}_WITH_FREEIMAGE)
-		INSTALL(FILES ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/bind/FreeImaged.dll DESTINATION ${${PROJECT_NAME}_INSTALL_BIN_DIR} CONFIGURATIONS Debug)
+		INSTALL(FILES ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/bin/FreeImaged.dll DESTINATION ${${PROJECT_NAME}_INSTALL_BIN_DIR} CONFIGURATIONS Debug)
 		INSTALL(FILES ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/bin/FreeImage.dll DESTINATION ${${PROJECT_NAME}_INSTALL_BIN_DIR} CONFIGURATIONS Release RelWithDebInfo MinSizeRel)
+		INSTALL(FILES ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/bin/FreeImagePlusd.dll DESTINATION ${${PROJECT_NAME}_INSTALL_BIN_DIR} CONFIGURATIONS Debug)
+		INSTALL(FILES ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/bin/FreeImagePlus.dll DESTINATION ${${PROJECT_NAME}_INSTALL_BIN_DIR} CONFIGURATIONS Release RelWithDebInfo MinSizeRel)
 	ENDIF(${PROJECT_NAME}_VISU_DEP AND ${PROJECT_NAME}_WITH_FREEIMAGE)
 
 	# Install TCL
@@ -1001,14 +1235,13 @@ IF (${PROJECT_NAME}_BUNDLE_AUTOINSTALL)
 		INSTALL(FILES "${TBB_BIN_DIR}/tbbmalloc.dll" DESTINATION ${${PROJECT_NAME}_INSTALL_BIN_DIR} CONFIGURATIONS Release RelWithDebInfo MinSizeRel)
 		INSTALL(FILES "${TBB_BIN_DIR}/tbbmalloc_debug.dll" DESTINATION ${${PROJECT_NAME}_INSTALL_BIN_DIR} CONFIGURATIONS Debug)
 	ENDIF(${PROJECT_NAME}_TBB_MALLOC_SUPPORT AND TBB_BIN_DIR)
-ENDIF(${PROJECT_NAME}_BUNDLE_AUTOINSTALL)
+ENDIF(${PROJECT_NAME}_BUNDLE_AUTOINSTALL AND NOT ${PROJECT_NAME}_USE_BUNDLE_SOURCE)
 
 
 ###############
 # UnitTesting #
 ###############
 IF(${PROJECT_NAME}_TESTING)
-	SET( ${PROJECT_NAME}_EXTRA_WARNINGS ON CACHE BOOL "Extra warnings required by testing framework" FORCE)
 	INCLUDE(CTest)
 	ENABLE_TESTING()
 	SUBDIRS(test)
@@ -1035,7 +1268,9 @@ SET(CPACK_SET_DESTDIR "ON")
 
 SET(CPACK_PACKAGE_VERSION_MAJOR ${OCE_VERSION_MAJOR})
 SET(CPACK_PACKAGE_VERSION_MINOR ${OCE_VERSION_MINOR})
-SET(CPACK_PACKAGE_VERSION_PATCH ${OCE_VERSION_PATCH})
+# bugfix release: add ${OCE_VERSION_PATCH} to the package version
+# (uncomment following line)
+#SET(CPACK_PACKAGE_VERSION_PATCH ${OCE_VERSION_PATCH})
 SET(CPACK_PACKAGE_NAME ${PROJECT_NAME} )
 
 SET(CPACK_PACKAGE_CONTACT "OCE Developers <oce-dev@googlegroups.com>")
@@ -1104,3 +1339,15 @@ if( CPACK_GENERATOR MATCHES ".*RPM.*" )
 endif()
 
 INCLUDE(CPack)
+
+########################################################################################
+# Uninstall code                                                                       #
+# From http://www.cmake.org/Wiki/CMake_FAQ#Can_I_do_.22make_uninstall.22_with_CMake.3F #
+# ######################################################################################
+configure_file(
+    "${CMAKE_CURRENT_SOURCE_DIR}/cmake_uninstall.cmake.in"
+    "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
+    IMMEDIATE @ONLY)
+
+add_custom_target(uninstall
+    COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)
Index: oce/Version.rc.cmake
===================================================================
--- oce.orig/Version.rc.cmake
+++ oce/Version.rc.cmake
@@ -1,8 +1,22 @@
 #include <winresrc.h>
 
+#cmakedefine OCE_VERSION_PATCH
+#define OCE_VERSION_PATCH_VAL @OCE_VERSION_PATCH@
+
+/* If patch is not defined at project level, here is defined to 0 */
+#ifndef OCE_VERSION_PATCH
+#undef OCE_VERSION_PATCH_VAL
+#define OCE_VERSION_PATCH_VAL 0
+#endif
+
+/* Stringify OCE_VERSION_PATCH */
+#define QU(x) #x
+#define QUH(x) QU(x)
+#define OCE_VERSION_PATCH_STR QUH(OCE_VERSION_PATCH_VAL)
+
 VS_VERSION_INFO VERSIONINFO
-  FILEVERSION @OCE_VERSION_MAJOR@,@OCE_VERSION_MINOR@,@OCE_VERSION_PATCH@,0
-  PRODUCTVERSION @OCE_VERSION_MAJOR@,@OCE_VERSION_MINOR@,@OCE_VERSION_PATCH@,0
+  FILEVERSION @OCE_VERSION_MAJOR@,@OCE_VERSION_MINOR@,OCE_VERSION_PATCH_VAL,0
+  PRODUCTVERSION @OCE_VERSION_MAJOR@,@OCE_VERSION_MINOR@,OCE_VERSION_PATCH_VAL,0
   FILEFLAGSMASK VS_FFI_FILEFLAGSMASK
 #ifndef DEBUG
   FILEFLAGS 0
@@ -30,12 +44,12 @@ VS_VERSION_INFO VERSIONINFO
       BLOCK "04090000"
       BEGIN
         VALUE "FileDescription", "OpenCascade Community Edition"
-        VALUE "FileVersion", "@OCE_VERSION_MAJOR@.@OCE_VERSION_MINOR@.@OCE_VERSION_PATCH@"
+        VALUE "FileVersion", "@OCE_VERSION_MAJOR@.@OCE_VERSION_MINOR@." OCE_VERSION_PATCH_STR
         VALUE "InternalName", "@PROJECT_NAME@"
         VALUE "LegalCopyright", ""
         VALUE "OriginalFilename", ""
         VALUE "ProductName", "@PROJECT_NAME@"
-        VALUE "ProductVersion", "@OCE_VERSION_MAJOR@.@OCE_VERSION_MINOR@.@OCE_VERSION_PATCH@"
+        VALUE "ProductVersion", "@OCE_VERSION_MAJOR@.@OCE_VERSION_MINOR@." OCE_VERSION_PATCH_STR
       END
     END
     BLOCK "VarFileInfo"
Index: oce/adm/cmake/BuildToolkit.cmake
===================================================================
--- oce.orig/adm/cmake/BuildToolkit.cmake
+++ oce/adm/cmake/BuildToolkit.cmake
@@ -1,59 +1,156 @@
 
 # Instructs the MSVC toolset to use the precompiled header PRECOMPILED_HEADER
 # for each source file given in the collection named by SOURCE_VARIABLE_NAME.
-FUNCTION(ENABLE_PRECOMPILED_HEADERS PRECOMPILED_HEADER SOURCE_VARIABLE_NAME)
-	IF(MSVC)
+FUNCTION(ENABLE_PRECOMPILED_HEADERS PHASE TARGET_NAME PRECOMPILED_HEADER SOURCE_VARIABLE_NAME)
+	IF(MSVC OR CMAKE_COMPILER_IS_GNUCXX)
 		set(files ${${SOURCE_VARIABLE_NAME}})
 
 		# Generate precompiled header translation unit
 		get_filename_component(pch_basename ${PRECOMPILED_HEADER} NAME_WE)
-		set(pch_abs ${CMAKE_CURRENT_SOURCE_DIR}/${PRECOMPILED_HEADER})
 		set(pch_unity ${CMAKE_CURRENT_SOURCE_DIR}/Precompiled.cpp)
-		#set_source_files_properties(${pch_unity} PROPERTIES COMPILE_FLAGS "/Yc\"${pch_abs}\"") #this may be useful for nmake
-		set_source_files_properties(${pch_unity} PROPERTIES COMPILE_FLAGS "/Yc\"${PRECOMPILED_HEADER}\"")
-
-		# A list of exclusions patterns. For the moment is global to the entire project
-		SET (excludes "OSD*" "WNT*" "AlienImage_BMPAlienData.cxx"
-		              "Image_PixMap.cxx" "PlotMgt.cxx" "Visual3d_View.cxx" "V3d_View_Print.cxx" "OpenGl*"
-		              "Viewer2dTest_ViewerCommands.cxx" "ViewerTest_*" )
-
-		# Update properties of source files to use the precompiled header.
-		# Additionally, force the inclusion of the precompiled header at beginning of each source file.
-		foreach(source_file ${files} )
-			# Find if the file is on the exclusion list
-			SET(IsExclude FALSE)
-			foreach (exc ${excludes})
-				IF(${source_file} MATCHES ${exc})
-					SET(IsExclude TRUE)
-				ENDIF()
-			endforeach ()
-			IF (NOT IsExclude)
-				GET_FILENAME_COMPONENT(thisext ${source_file} EXT)
-				IF (${thisext} MATCHES ".cxx")
-					set_source_files_properties( ${source_file} PROPERTIES COMPILE_FLAGS "/Yu\"${PRECOMPILED_HEADER}\" /FI\"${PRECOMPILED_HEADER}\""     )
+		
+		IF(MSVC)
+		    SET(pch_abs ${CMAKE_CURRENT_SOURCE_DIR}/${PRECOMPILED_HEADER})
+		ELSE()
+		    CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/Precompiled.h ${CMAKE_CURRENT_BINARY_DIR}/Precompiled.h)
+		    SET(pch_abs ${CMAKE_CURRENT_BINARY_DIR}/${PRECOMPILED_HEADER})
+		ENDIF()
+		
+		IF (PHASE EQUAL 2)
+			# A list of exclusions patterns. For the moment is global to the entire project
+			SET (excludes "OSD*" "WNT*" "AlienImage_BMPAlienData.cxx"
+				      "Image_PixMap.cxx" "PlotMgt.cxx" "Visual3d_View.cxx" "V3d_View_Print.cxx" "OpenGl*"
+				      "Viewer2dTest_ViewerCommands.cxx" "ViewerTest_*" )
+
+			# GCC requires an additional target to build the PCH file.
+			IF(CMAKE_COMPILER_IS_GNUCXX)
+				
+				# PCH output file
+				#SET(pch_output "${CMAKE_CURRENT_BINARY_DIR}/${TARGET_NAME}.gch")
+				SET(pch_output "${pch_abs}.gch")
+				
+				# Detects compiler flags
+				STRING(TOUPPER "CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE}" _flags_var_name)
+				SET(_compiler_FLAGS ${${_flags_var_name}})
+				
+				# Directory properties
+				GET_DIRECTORY_PROPERTY(_directory_flags INCLUDE_DIRECTORIES)
+				FOREACH(item ${_directory_flags})
+				    LIST(APPEND _compiler_FLAGS "-I${item}")
+				ENDFOREACH(item)
+
+				GET_TARGET_PROPERTY(target_compiler_FLAGS ${TARGET_NAME} COMPILE_FLAGS)
+				IF(target_compiler_FLAGS)
+				    LIST(APPEND _compiler_FLAGS ${target_compiler_FLAGS})
 				ENDIF()
+							
+				STRING(TOUPPER "COMPILE_DEFINITIONS_${CMAKE_BUILD_TYPE}" _defs_prop_name)
+				
+				GET_DIRECTORY_PROPERTY(_directory_flags COMPILE_DEFINITIONS)
+				IF(_directory_flags)
+				      FOREACH(flag ${_directory_flags})
+					  LIST(APPEND _compiler_FLAGS -D${flag})
+				      ENDFOREACH(flag)
+				ENDIF(_directory_flags)
+				
+				GET_DIRECTORY_PROPERTY(_directory_flags ${_defs_prop_name})
+				IF(_directory_flags)
+				      FOREACH(flag ${_directory_flags})
+					  LIST(APPEND _compiler_FLAGS -D${flag})
+				      ENDFOREACH(flag)
+				ENDIF(_directory_flags)
+
+				GET_TARGET_PROPERTY(_target_flags ${TARGET_NAME} COMPILE_DEFINITIONS)
+				IF(_target_flags)
+					FOREACH(flag ${_target_flags})
+						LIST(APPEND _compiler_FLAGS -D${flag})
+					ENDFOREACH(flag)
+				ENDIF(_target_flags)
+
+				GET_TARGET_PROPERTY(_target_flags ${TARGET_NAME} ${_defs_prop_name})
+				IF(_target_flags)
+					FOREACH(flag ${_target_flags})
+						LIST(APPEND _compiler_FLAGS -D${flag})
+					ENDFOREACH(flag)
+				ENDIF(_target_flags)
+				
+				#MESSAGE("compiler flags :" ${_compiler_FLAGS})
+
+				SEPARATE_ARGUMENTS(_compiler_FLAGS)
+				
+				IF(NOT WIN32)
+					SET(additionalCompilerFlags -fPIC)
+				ELSE()
+					SET(additionalCompilerFlags -mthreads)
+				ENDIF()	      
+					      
+				ADD_CUSTOM_COMMAND(OUTPUT ${pch_output} 
+				    COMMAND ${CMAKE_CXX_COMPILER} ${_compiler_FLAGS} -x c++-header -o ${pch_output} ${pch_unity} ${additionalCompilerFlags}
+				    DEPENDS ${pch_unity} )
+				ADD_CUSTOM_TARGET(${TARGET_NAME}_gch DEPENDS ${pch_output})
+				ADD_DEPENDENCIES(${TARGET_NAME} ${TARGET_NAME}_gch)
 			ENDIF()
-		endforeach(source_file)
-
-		# Finally, update the source file collection to contain the precompiled header translation unit
-		set(${SOURCE_VARIABLE_NAME} ${pch_unity} ${PRECOMPILED_HEADER} ${${SOURCE_VARIABLE_NAME}} PARENT_SCOPE)
+	    
+			# Update properties of source files to use the precompiled header.
+			# Additionally, force the inclusion of the precompiled header at beginning of each source file.
+			foreach(source_file ${files} )
+				# Find if the file is on the exclusion list
+				SET(IsExclude FALSE)
+				foreach (exc ${excludes})
+					IF(${source_file} MATCHES ${exc})
+						SET(IsExclude TRUE)
+					ENDIF()
+				endforeach ()
+				IF (NOT IsExclude)
+					GET_FILENAME_COMPONENT(thisext ${source_file} EXT)
+					IF (${thisext} MATCHES ".cxx")
+						IF (MSVC)
+						  set_source_files_properties( ${source_file} PROPERTIES COMPILE_FLAGS "/Yu\"${PRECOMPILED_HEADER}\" /FI\"${PRECOMPILED_HEADER}\""     )
+						ENDIF()
+						IF (CMAKE_COMPILER_IS_GNUCXX)
+						  SET_SOURCE_FILES_PROPERTIES( ${source_file} PROPERTIES COMPILE_FLAGS "-include ${pch_abs} -Winvalid-pch")
+						ENDIF()
+						
+					ENDIF()
+				ENDIF()
+			endforeach(source_file)
+		ELSE(PHASE EQUAL 2)
+		    # Finally, update the source file collection to contain the precompiled header translation unit
+		    set(${SOURCE_VARIABLE_NAME} ${pch_unity} ${PRECOMPILED_HEADER} ${${SOURCE_VARIABLE_NAME}} PARENT_SCOPE)
+		    
+		    #set_source_files_properties(${pch_unity} PROPERTIES COMPILE_FLAGS "/Yc\"${pch_abs}\"") #this may be useful for nmake
+		    IF(MSVC)
+			set_source_files_properties(${pch_unity} PROPERTIES COMPILE_FLAGS "/Yc\"${PRECOMPILED_HEADER}\"")
+		    ENDIF()
+		ENDIF(PHASE EQUAL 2)
 
-	ENDIF(MSVC)
+	ENDIF()
 ENDFUNCTION(ENABLE_PRECOMPILED_HEADERS)
 
 MESSAGE(STATUS "Processing ToolKit: ${TOOLKIT} (${TOOLKIT_MODULES})")
+LIST(APPEND ${PROJECT_NAME}_ALL_BUILT_MODULES ${TOOLKIT_MODULES})
+SET(${PROJECT_NAME}_ALL_BUILT_MODULES ${${PROJECT_NAME}_ALL_BUILT_MODULES} PARENT_SCOPE)
 SET(TOOLKIT_SOURCE_FILES)
 IF(DEFINED TOOLKIT_INCLUDE_DIRECTORIES)
 	INCLUDE_DIRECTORIES(${TOOLKIT_INCLUDE_DIRECTORIES})
 ENDIF(DEFINED TOOLKIT_INCLUDE_DIRECTORIES)
 FOREACH(MODULE ${TOOLKIT_MODULES})
 	
+	IF(APPLE AND ${PROJECT_NAME}_OSX_USE_COCOA)
+	  FILE(GLOB source_files
+		${${PROJECT_NAME}_SOURCE_DIR}/src/${MODULE}/*.cxx
+		${${PROJECT_NAME}_SOURCE_DIR}/src/${MODULE}/*.mm
+		${${PROJECT_NAME}_SOURCE_DIR}/src/${MODULE}/*.c
+		${${PROJECT_NAME}_SOURCE_DIR}/drv/${MODULE}/*.cxx
+		${${PROJECT_NAME}_SOURCE_DIR}/drv/${MODULE}/*.c)
 	# add all .cxx/*.c files or each module
-	FILE(GLOB source_files
+	ELSE(APPLE AND ${PROJECT_NAME}_OSX_USE_COCOA)
+	  FILE(GLOB source_files
 		${${PROJECT_NAME}_SOURCE_DIR}/src/${MODULE}/*.cxx
 		${${PROJECT_NAME}_SOURCE_DIR}/src/${MODULE}/*.c
 		${${PROJECT_NAME}_SOURCE_DIR}/drv/${MODULE}/*.cxx
 		${${PROJECT_NAME}_SOURCE_DIR}/drv/${MODULE}/*.c)
+	ENDIF(APPLE AND ${PROJECT_NAME}_OSX_USE_COCOA)
 	SET (header_files "")
 	
 	IF(${PROJECT_NAME}_ADD_HEADERS)
@@ -77,22 +174,28 @@ ENDFOREACH(MODULE ${TOOLKIT_MODULES})
 # Version info
 IF(NOT ${PROJECT_NAME}_NO_LIBRARY_VERSION)
 	IF(MSVC)
-		SET(TOOLKIT_RESOURCES ${CMAKE_BINARY_DIR}/Version.rc)
+		SET(TOOLKIT_RESOURCES ${${PROJECT_NAME}_WIN32_RES_FILE})
 	ENDIF(MSVC)
 ENDIF(NOT ${PROJECT_NAME}_NO_LIBRARY_VERSION)
 
 # Precompiled Headers
 IF(${PROJECT_NAME}_COMPILER_SUPPORTS_PCH AND ${PROJECT_NAME}_USE_PCH)
-
 	IF (EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/Precompiled.h)
 		#MESSAGE("Using Precompiled.h")
-		ENABLE_PRECOMPILED_HEADERS (Precompiled.h TOOLKIT_SOURCE_FILES)
+		ENABLE_PRECOMPILED_HEADERS (1 ${TOOLKIT} Precompiled.h TOOLKIT_SOURCE_FILES)
 		SOURCE_GROUP (Precompiled FILES Precompiled.h Precompiled.cpp)
 	ENDIF(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/Precompiled.h)
 ENDIF(${PROJECT_NAME}_COMPILER_SUPPORTS_PCH AND ${PROJECT_NAME}_USE_PCH)
 
+# Add the toolkit target
 ADD_LIBRARY(${TOOLKIT} ${${PROJECT_NAME}_LIBRARY_TYPE} ${TOOLKIT_SOURCE_FILES} ${TOOLKIT_RESOURCES} )
 
+IF(${PROJECT_NAME}_COMPILER_SUPPORTS_PCH AND ${PROJECT_NAME}_USE_PCH)
+	IF (EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/Precompiled.h)
+	    ENABLE_PRECOMPILED_HEADERS (2 ${TOOLKIT} Precompiled.h TOOLKIT_SOURCE_FILES)
+	ENDIF()
+ENDIF()
+
 # TODO Add current toolkit header files into a source group?
 # Add target specific locations of *.lxx and *.ixx files
 IF(NOT ${PROJECT_NAME}_NO_LIBRARY_VERSION)
@@ -102,10 +205,6 @@ IF(NOT ${PROJECT_NAME}_NO_LIBRARY_VERSIO
     )
 ENDIF(NOT ${PROJECT_NAME}_NO_LIBRARY_VERSION)
 
-IF(DEFINED X11_FONT_PATH)
-	SET_SOURCE_FILES_PROPERTIES("${${PROJECT_NAME}_SOURCE_DIR}/src/OSD/OSD_FontMgr.cxx" PROPERTIES COMPILE_FLAGS "-DX11_FONT_PATH=\"${X11_FONT_PATH}\"")
-ENDIF(DEFINED X11_FONT_PATH)
-
 # Workaround for Cmake bug #0011240 (see http://public.kitware.com/Bug/view.php?id=11240)
 # Win64+MSVC+static libs = linker error
 IF(MSVC AND NOT ${PROJECT_NAME}_BUILD_SHARED_LIB AND BIT EQUAL 64)
@@ -139,53 +238,53 @@ ENDIF(TOOLKIT_DEPENDS)
 ###########
 SET(TOOLKIT_INSTALL_BIN_DIR ${${PROJECT_NAME}_INSTALL_BIN_DIR})
 
-IF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
-	SET(TOOLKIT_INSTALL_BIN_DEBUG_DIR ${${PROJECT_NAME}_INSTALL_BIN_DEBUG_DIR})
-ENDIF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
+MACRO(SET_TARGET_PROPERTIES_INSTALL_RPATH target dirs)
+	IF(${PROJECT_NAME}_RPATH_FILTER_SYSTEM_PATHS)
+		SET(non_system_paths "")
+		FOREACH(dir ${dirs})
+			LIST(FIND CMAKE_INSTALL_RPATH "${dir}" _exists)
+			LIST(FIND CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES "${dir}" _isSystem)
+			IF("${_exists}" LESS 0 AND "${_isSystem}" LESS 0)
+				LIST(APPEND non_system_paths "${dir}")
+			ENDIF("${_exists}" LESS 0 AND "${_isSystem}" LESS 0)
+		ENDFOREACH(dir ${dirs})
+	ELSE(${PROJECT_NAME}_RPATH_FILTER_SYSTEM_PATHS)
+		SET(non_system_paths "${dirs}")
+	ENDIF(${PROJECT_NAME}_RPATH_FILTER_SYSTEM_PATHS)
+	IF(NOT "${non_system_paths}" STREQUAL "")
+		SET_TARGET_PROPERTIES(${target} PROPERTIES INSTALL_RPATH "${non_system_paths}")
+	ENDIF(NOT "${non_system_paths}" STREQUAL "")
+ENDMACRO(SET_TARGET_PROPERTIES_INSTALL_RPATH target dir)
 
 IF(TOOLKIT_IS_PRIVATE)
 	SET(TOOLKIT_INSTALL_LIB_DIR ${${PROJECT_NAME}_INSTALL_PACKAGE_LIB_DIR})
-	IF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
-		SET(TOOLKIT_INSTALL_LIB_DEBUG_DIR ${${PROJECT_NAME}_INSTALL_PACKAGE_LIB_DEBUG_DIR})
-	ENDIF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
+	SET_TARGET_PROPERTIES_INSTALL_RPATH(${TOOLKIT} "${${PROJECT_NAME}_INSTALL_PACKAGE_LIB_DIR_RPATH};${${PROJECT_NAME}_INSTALL_LIB_DIR_RPATH}")
 ELSE(TOOLKIT_IS_PRIVATE)
 	SET(TOOLKIT_INSTALL_LIB_DIR ${${PROJECT_NAME}_INSTALL_LIB_DIR})
-	IF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
-		SET(TOOLKIT_INSTALL_LIB_DEBUG_DIR ${${PROJECT_NAME}_INSTALL_PACKAGE_LIB_DEBUG_DIR})
-	ENDIF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
-	SET_TARGET_PROPERTIES(${TOOLKIT} PROPERTIES INSTALL_RPATH "${${PROJECT_NAME}_INSTALL_PREFIX}/${${PROJECT_NAME}_INSTALL_LIB_DIR}")
+	SET_TARGET_PROPERTIES_INSTALL_RPATH(${TOOLKIT} "${${PROJECT_NAME}_INSTALL_LIB_DIR_RPATH}")
 ENDIF(TOOLKIT_IS_PRIVATE)
 
-IF(WIN32 AND (CMAKE_CONFIGURATION_TYPES OR NMAKE))
-	# In win32 put the .dll in the bin folder
-	INSTALL(TARGETS ${TOOLKIT}
-		RUNTIME DESTINATION ${TOOLKIT_INSTALL_BIN_DIR} CONFIGURATIONS Release RelWithDebInfo MinSizeRel COMPONENT RuntimeLibraries
-		LIBRARY DESTINATION ${TOOLKIT_INSTALL_LIB_DIR} CONFIGURATIONS Release RelWithDebInfo MinSizeRel COMPONENT RuntimeLibraries
-		ARCHIVE DESTINATION ${TOOLKIT_INSTALL_LIB_DIR} CONFIGURATIONS Release RelWithDebInfo MinSizeRel COMPONENT Development
-		)
-	INSTALL(TARGETS ${TOOLKIT}
-		RUNTIME DESTINATION ${TOOLKIT_INSTALL_BIN_DEBUG_DIR} CONFIGURATIONS "Debug" COMPONENT RuntimeLibraries
-		LIBRARY DESTINATION ${TOOLKIT_INSTALL_LIB_DEBUG_DIR} CONFIGURATIONS "Debug" COMPONENT RuntimeLibraries
-		ARCHIVE DESTINATION ${TOOLKIT_INSTALL_LIB_DEBUG_DIR} CONFIGURATIONS "Debug" COMPONENT Development
-		)
-
-	IF(MSVC AND ${PROJECT_NAME}_INSTALL_PDB_FILES )
-		IF (CMAKE_CONFIGURATION_TYPES)
-			INSTALL(FILES ${LIBRARY_OUTPUT_PATH}/RelWithDebInfo/${TOOLKIT}.pdb DESTINATION ${TOOLKIT_INSTALL_LIB_DIR} CONFIGURATIONS RelWithDebInfo)
-			INSTALL(FILES ${LIBRARY_OUTPUT_PATH}/Debug/${TOOLKIT}${CMAKE_DEBUG_POSTFIX}.pdb DESTINATION ${TOOLKIT_INSTALL_LIB_DEBUG_DIR} CONFIGURATIONS Debug)
-		ELSE(CMAKE_CONFIGURATION_TYPES)
-			INSTALL(FILES ${LIBRARY_OUTPUT_PATH}/${TOOLKIT}.pdb DESTINATION ${TOOLKIT_INSTALL_LIB_DIR} CONFIGURATIONS RelWithDebInfo)
-			INSTALL(FILES ${LIBRARY_OUTPUT_PATH}/${TOOLKIT}${CMAKE_DEBUG_POSTFIX}.pdb DESTINATION ${TOOLKIT_INSTALL_LIB_DEBUG_DIR} CONFIGURATIONS Debug)
-		ENDIF (CMAKE_CONFIGURATION_TYPES)
-
-
-	ENDIF(MSVC AND ${PROJECT_NAME}_INSTALL_PDB_FILES )
-ELSE(WIN32 AND (CMAKE_CONFIGURATION_TYPES OR NMAKE))
-	INSTALL(TARGETS ${TOOLKIT}
-		EXPORT ${PROJECT_NAME}-libraries
-		RUNTIME DESTINATION ${TOOLKIT_INSTALL_BIN_DIR} COMPONENT RuntimeLibraries
-		LIBRARY DESTINATION ${TOOLKIT_INSTALL_LIB_DIR} COMPONENT RuntimeLibraries
-		ARCHIVE DESTINATION ${TOOLKIT_INSTALL_LIB_DIR} COMPONENT Development
-		)
-ENDIF(WIN32 AND (CMAKE_CONFIGURATION_TYPES OR NMAKE))
-
+INSTALL(TARGETS ${TOOLKIT}
+	EXPORT ${PROJECT_NAME}-libraries
+	RUNTIME DESTINATION ${TOOLKIT_INSTALL_BIN_DIR} COMPONENT RuntimeLibraries
+	LIBRARY DESTINATION ${TOOLKIT_INSTALL_LIB_DIR} COMPONENT RuntimeLibraries
+	ARCHIVE DESTINATION ${TOOLKIT_INSTALL_LIB_DIR} COMPONENT Development
+	)
+
+IF(MSVC AND ${PROJECT_NAME}_INSTALL_PDB_FILES )
+	IF (CMAKE_CONFIGURATION_TYPES)
+		INSTALL(FILES ${LIBRARY_OUTPUT_PATH}/RelWithDebInfo/${TOOLKIT}.pdb DESTINATION ${TOOLKIT_INSTALL_LIB_DIR} CONFIGURATIONS RelWithDebInfo)
+		INSTALL(FILES ${LIBRARY_OUTPUT_PATH}/Debug/${TOOLKIT}${CMAKE_DEBUG_POSTFIX}.pdb DESTINATION ${TOOLKIT_INSTALL_LIB_DIR} CONFIGURATIONS Debug)
+	ELSE(CMAKE_CONFIGURATION_TYPES)
+		INSTALL(FILES ${LIBRARY_OUTPUT_PATH}/${TOOLKIT}.pdb DESTINATION ${TOOLKIT_INSTALL_LIB_DIR} CONFIGURATIONS RelWithDebInfo)
+		INSTALL(FILES ${LIBRARY_OUTPUT_PATH}/${TOOLKIT}${CMAKE_DEBUG_POSTFIX}.pdb DESTINATION ${TOOLKIT_INSTALL_LIB_DIR} CONFIGURATIONS Debug)
+	ENDIF (CMAKE_CONFIGURATION_TYPES)
+ENDIF(MSVC AND ${PROJECT_NAME}_INSTALL_PDB_FILES )
+
+IF(BORLAND AND ${PROJECT_NAME}_INSTALL_TDS_FILES )
+	IF (CMAKE_CONFIGURATION_TYPES)
+		INSTALL(FILES ${LIBRARY_OUTPUT_PATH}/Debug/${TOOLKIT}.tds DESTINATION ${TOOLKIT_INSTALL_BIN_DIR} CONFIGURATIONS Debug)
+	ELSE (CMAKE_CONFIGURATION_TYPES)
+		INSTALL(FILES ${LIBRARY_OUTPUT_PATH}/${TOOLKIT}.tds DESTINATION ${TOOLKIT_INSTALL_BIN_DIR} CONFIGURATIONS Debug)
+	ENDIF (CMAKE_CONFIGURATION_TYPES)
+ENDIF(BORLAND AND ${PROJECT_NAME}_INSTALL_TDS_FILES )
Index: oce/adm/cmake/DRAWEXE/CMakeLists.txt
===================================================================
--- oce.orig/adm/cmake/DRAWEXE/CMakeLists.txt
+++ oce/adm/cmake/DRAWEXE/CMakeLists.txt
@@ -44,14 +44,14 @@ ENDFOREACH(MODULE ${TOOLKIT_APP_MODULES}
 # Version info
 IF(NOT ${PROJECT_NAME}_NO_LIBRARY_VERSION)
 	IF(MSVC)
-		SET(TOOLKIT_RESOURCES ${CMAKE_BINARY_DIR}/Version.rc)
+		SET(TOOLKIT_RESOURCES ${${PROJECT_NAME}_WIN32_RES_FILE})
 		ADD_DEFINITIONS("-D${PROJECT_NAME}_VERSION_INFO_IS_EXE")
 	ENDIF(MSVC)
 ENDIF(NOT ${PROJECT_NAME}_NO_LIBRARY_VERSION)
 
 ADD_EXECUTABLE(${TOOLKIT_APP} ${TOOLKIT_APP_SOURCE_FILES} ${TOOLKIT_RESOURCES} )
 
-SET_TARGET_PROPERTIES_INSTALL_RPATH(${TOOLKIT_APP} "${${PROJECT_NAME}_INSTALL_PREFIX}/${${PROJECT_NAME}_INSTALL_LIB_DIR};${${PROJECT_NAME}_INSTALL_PREFIX}/${${PROJECT_NAME}_INSTALL_PACKAGE_LIB_DIR}")
+SET_TARGET_PROPERTIES_INSTALL_RPATH(${TOOLKIT_APP} "${${PROJECT_NAME}_INSTALL_LIB_DIR_RPATH};${${PROJECT_NAME}_INSTALL_PACKAGE_LIB_DIR_RPATH}")
 
 IF(WIN32 AND (CMAKE_CONFIGURATION_TYPES OR NMAKE))
 	SET_TARGET_PROPERTIES(${TOOLKIT_APP} PROPERTIES
Index: oce/adm/cmake/TKMesh/CMakeLists.txt
===================================================================
--- oce.orig/adm/cmake/TKMesh/CMakeLists.txt
+++ oce/adm/cmake/TKMesh/CMakeLists.txt
@@ -19,12 +19,20 @@ SET(TOOLKIT_DEPENDS
 IF(${PROJECT_NAME}_MULTITHREAD_LIBRARY STREQUAL "TBB" AND TBB_INCLUDE_DIR AND TBB_LIBRARY)
 	ADD_DEFINITIONS(-DHAVE_TBB)
 	SET(TOOLKIT_INCLUDE_DIRECTORIES ${TBB_INCLUDE_DIR})
-	SET(TOOLKIT_LIBS_OPTIMIZED ${TBB_LIBRARY})
-	SET(TOOLKIT_LIBS_DEBUG ${TBB_LIBRARY_DEBUG})
+	IF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
+		SET(TOOLKIT_LIBS_DEBUG ${TBB_LIBRARY_DEBUG})
+		SET(TOOLKIT_LIBS_OPTIMIZED ${TBB_LIBRARY})
+	ELSE(CMAKE_CONFIGURATION_TYPES OR NMAKE)
+		SET(TOOLKIT_LIBS ${TBB_LIBRARY})
+	ENDIF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
 ENDIF(${PROJECT_NAME}_MULTITHREAD_LIBRARY STREQUAL "TBB" AND TBB_INCLUDE_DIR AND TBB_LIBRARY)
 IF(${PROJECT_NAME}_MULTITHREAD_LIBRARY STREQUAL "OPENMP" AND OPENMP_FOUND)
 	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
 ENDIF(${PROJECT_NAME}_MULTITHREAD_LIBRARY STREQUAL "OPENMP" AND OPENMP_FOUND)
 
+IF(${PROJECT_NAME}_DISABLE_BSPLINE_MESHER)
+	SET_SOURCE_FILES_PROPERTIES( "${${PROJECT_NAME}_SOURCE_DIR}/src/BRepMesh/BRepMesh_FastDiscretFace.cxx" PROPERTIES COMPILE_DEFINITIONS ${PROJECT_NAME}_DISABLE_BSPLINE_MESHER )
+ENDIF(${PROJECT_NAME}_DISABLE_BSPLINE_MESHER)
+
 INCLUDE(../BuildToolkit.cmake)
 
Index: oce/adm/cmake/TKOpenGl/CMakeLists.txt
===================================================================
--- oce.orig/adm/cmake/TKOpenGl/CMakeLists.txt
+++ oce/adm/cmake/TKOpenGl/CMakeLists.txt
@@ -19,6 +19,20 @@ ENDIF(CMAKE_CONFIGURATION_TYPES OR NMAKE
 
 SET(TOOLKIT_INCLUDE_DIRECTORIES ${OPENGL_INCLUDE_DIR} ${FREETYPE_INCLUDE_DIRS} ${FTGL_INCLUDE_DIR})
 
+# OpenGl_Workspace::Print is available only on Windows
+IF(WIN32 AND FREEIMAGE_LIBRARY AND ${PROJECT_NAME}_WITH_FREEIMAGE)
+	ADD_DEFINITIONS(-DHAVE_FREEIMAGE)
+
+	IF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
+		SET(TOOLKIT_LIBS_DEBUG ${TOOLKIT_LIBS_DEBUG} ${FREEIMAGEPLUS_LIBRARY_DEBUG} ${FREEIMAGE_LIBRARY_DEBUG})
+		SET(TOOLKIT_LIBS_OPTIMIZED ${TOOLKIT_LIBS_OPTIMIZED} ${FREEIMAGEPLUS_LIBRARY} ${FREEIMAGE_LIBRARY})
+	ELSE (CMAKE_CONFIGURATION_TYPES OR NMAKE)
+		SET(TOOLKIT_LIBS ${TOOLKIT_LIBS} ${FREEIMAGEPLUS_LIBRARY} ${FREEIMAGE_LIBRARY})
+	ENDIF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
+
+	SET(TOOLKIT_INCLUDE_DIRECTORIES ${TOOLKIT_INCLUDE_DIRECTORIES} ${FREEIMAGE_INCLUDE_DIR})
+ENDIF(WIN32 AND FREEIMAGE_LIBRARY AND ${PROJECT_NAME}_WITH_FREEIMAGE)
+
 IF(GL2PS_LIBRARY AND ${PROJECT_NAME}_WITH_GL2PS)
 	ADD_DEFINITIONS(-DHAVE_GL2PS)
 
@@ -38,3 +52,18 @@ ENDIF()
 
 INCLUDE(../BuildToolkit.cmake)
 
+IF(BORLAND AND BORLAND_VERSION_RS_XE2)
+	# For bcc32 compiler v6.40 and up -x- compiler option must be passed as a compiler option
+	# in stead of #pragma option -x- in code.
+	foreach(source_file ${TOOLKIT_SOURCE_FILES} )
+		if((source_file MATCHES "OpenGl_attri.cxx") OR
+		   (source_file MATCHES "OpenGl_depthcue.cxx") OR
+		   (source_file MATCHES "OpenGl_pick.cxx") OR
+		   (source_file MATCHES "OpenGl_telem_util.cxx") OR
+		   (source_file MATCHES "OpenGl_undefined.cxx") OR
+		   (source_file MATCHES "OpenGl_view.cxx"))
+			MESSAGE(STATUS "(bcc32) Disabling exceptions for ${source_file}.")
+			set_source_files_properties("${source_file}" PROPERTIES COMPILE_FLAGS "-x-")
+		endif()
+	endforeach(source_file)
+ENDIF(BORLAND AND BORLAND_VERSION_RS_XE2)
Index: oce/adm/cmake/TKQADraw/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKQADraw/CMakeLists.txt
@@ -0,0 +1,54 @@
+SET(TOOLKIT TKQADraw)
+
+SET(TOOLKIT_MODULES
+	DebugTools
+	QABugs
+	QADNaming
+	QADraw
+	QANCollection
+	QANewBRepNaming
+	QANewDBRepNaming
+	QANewModTopOpe
+)
+SET(TOOLKIT_DEPENDS
+	TKernel
+	TKMath
+	TKAdvTools
+	TKG2d
+	TKG3d
+	TKGeomBase
+	TKBRep
+	TKGeomAlgo
+	TKTopAlgo
+	TKPrim
+	TKShHealing
+	TKBool
+	TKFeat
+	TKOffset
+	TKSTL
+	TKXSBase
+	TKIGES
+	TKXDESTEP
+	TKCDF
+	PTKernel
+	TKLCAF
+	TKCAF
+	TKService
+	TKV3d
+	TKDraw
+	TKViewerTest
+	TKXSDRAW
+	TKDCAF
+)
+SET(TOOLKIT_INCLUDE_DIRECTORIES ${TCL_INCLUDE_PATH})
+SET(TOOLKIT_LIBS ${TCL_LIBRARY} ${CSF_gdi32_LIB} ${CSF_advapi32_LIB} ${CSF_user32_LIB})
+
+IF(NOT WIN32)
+	SET(TOOLKIT_INCLUDE_DIRECTORIES ${TOOLKIT_INCLUDE_DIRECTORIES} ${X11_X11_INCLUDE_PATH} ${TK_INCLUDE_PATH})
+	SET(TOOLKIT_LIBS ${TOOLKIT_LIBS} ${TK_LIBRARY} ${X11_X11_LIB})
+ENDIF(NOT WIN32)
+
+SET(TOOLKIT_IS_PRIVATE TRUE)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKService/CMakeLists.txt
===================================================================
--- oce.orig/adm/cmake/TKService/CMakeLists.txt
+++ oce/adm/cmake/TKService/CMakeLists.txt
@@ -4,6 +4,7 @@ SET(TOOLKIT_MODULES
 	AlienImage
 	Aspect
 	CGM
+	Font
 	Image
 	MFT
 	PS
@@ -18,11 +19,20 @@ IF (WIN32)
 		WNT
 	)
 ELSE(WIN32)
-	SET(TOOLKIT_MODULES ${TOOLKIT_MODULES}
-		ImageUtility
-		Xw
-	)
-	SET(TOOLKIT_LIBS ${X11_Xmu_LIB} ${X11_LIBRARIES})
+	IF (APPLE AND ${PROJECT_NAME}_OSX_USE_COCOA)
+		SET(TOOLKIT_MODULES ${TOOLKIT_MODULES}
+			ImageUtility
+			Xw
+			Cocoa
+		)
+		SET(TOOLKIT_LIBS ${X11_Xmu_LIB} ${X11_LIBRARIES} /System/Library/Frameworks/Cocoa.framework)
+	ELSE(APPLE AND ${PROJECT_NAME}_OSX_USE_COCOA)
+		SET(TOOLKIT_MODULES ${TOOLKIT_MODULES}
+			ImageUtility
+			Xw
+		)
+		SET(TOOLKIT_LIBS ${X11_Xmu_LIB} ${X11_LIBRARIES})
+	ENDIF(APPLE AND ${PROJECT_NAME}_OSX_USE_COCOA)
 ENDIF(WIN32)
 SET(TOOLKIT_DEPENDS TKMath TKernel)
 
@@ -41,3 +51,13 @@ ENDIF(FREEIMAGE_LIBRARY AND ${PROJECT_NA
 
 INCLUDE(../BuildToolkit.cmake)
 
+IF(BORLAND)
+	# cgmobin.c, cgmochar.c and cgmotext.c need __STDC__=1 define in order to build for bcc32.
+	foreach(source_file ${TOOLKIT_SOURCE_FILES} )
+		if ((source_file MATCHES "cgmobin.c") OR
+			(source_file MATCHES "cgmochar.c") OR
+			(source_file MATCHES "cgmotext.c"))
+			set_source_files_properties("${source_file}" PROPERTIES COMPILE_DEFINITIONS "__STDC__=1")
+		endif()
+	endforeach(source_file)
+ENDIF(BORLAND)
Index: oce/adm/cmake/TKViewerTest/CMakeLists.txt
===================================================================
--- oce.orig/adm/cmake/TKViewerTest/CMakeLists.txt
+++ oce/adm/cmake/TKViewerTest/CMakeLists.txt
@@ -32,7 +32,7 @@ SET(TOOLKIT_DEPENDS
 IF(WIN32)
 	SET(TOOLKIT_LIBS ${CSF_user32_LIB} ${CSF_gdi32_LIB})
 ELSE(WIN32)
-	SET(TOOLKIT_INCLUDE_DIRECTORIES ${X11_X11_INCLUDE_PATH} ${TK_INCLUDE_PATH})
+	SET(TOOLKIT_INCLUDE_DIRECTORIES ${X11_X11_INCLUDE_PATH} ${TK_INCLUDE_PATH} ${OPENGL_INCLUDE_DIR})
 	SET(TOOLKIT_LIBS ${TK_LIBRARY} ${X11_X11_LIB})
 ENDIF(WIN32)
 
Index: oce/adm/cmake/TKernel/CMakeLists.txt
===================================================================
--- oce.orig/adm/cmake/TKernel/CMakeLists.txt
+++ oce/adm/cmake/TKernel/CMakeLists.txt
@@ -1,6 +1,7 @@
 SET(TOOLKIT TKernel)
 
 SET(TOOLKIT_MODULES
+	StdFail
 	FSD
 	MMgt
 	OSD
@@ -9,7 +10,6 @@ SET(TOOLKIT_MODULES
 	Resource
 	SortTools
 	Standard
-	StdFail
 	Storage
 	TColStd
 	TCollection
@@ -26,7 +26,7 @@ IF(CMAKE_THREAD_LIBS_INIT)
 ENDIF(CMAKE_THREAD_LIBS_INIT)
 SET(TOOLKIT_LIBS ${TOOLKIT_LIBS} ${CMAKE_DL_LIBS} ${LM})
 IF(WIN32)
-	SET(TOOLKIT_LIBS ${TOOLKIT_LIBS} ${CSF_SOCKETLibs_LIB} ${CSF_advapi32_LIB} ${CSF_gdi32_LIB} ${CSF_user32_LIB} ${CSF_kernel32_LIB})
+	SET(TOOLKIT_LIBS ${TOOLKIT_LIBS} ${CSF_SOCKETLibs_LIB} ${CSF_advapi32_LIB} ${CSF_gdi32_LIB} ${CSF_user32_LIB} ${CSF_kernel32_LIB} ${CSF_psapi_LIB})
 ELSE(WIN32)
 	#  An implementation for Mac OS X has been added in src/OSD/gettime_osx.h
 	IF(NOT APPLE)
@@ -47,8 +47,12 @@ ENDIF(WIN32)
 IF(${PROJECT_NAME}_TBB_MALLOC_SUPPORT AND TBB_INCLUDE_DIR AND TBB_MALLOC_LIBRARY)
 	ADD_DEFINITIONS(-DHAVE_TBB)
 	SET(TOOLKIT_INCLUDE_DIRECTORIES ${TBB_INCLUDE_DIR})
-	SET(TOOLKIT_LIBS_OPTIMIZED ${TBB_MALLOC_LIBRARY})
-	SET(TOOLKIT_LIBS_DEBUG ${TBB_MALLOC_LIBRARY_DEBUG})
+	IF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
+		SET(TOOLKIT_LIBS_DEBUG ${TOOLKIT_LIBS_DEBUG} ${TBB_MALLOC_LIBRARY_DEBUG})
+		SET(TOOLKIT_LIBS_OPTIMIZED ${TOOLKIT_LIBS_OPTIMIZED} ${TBB_MALLOC_LIBRARY})
+	ELSE(CMAKE_CONFIGURATION_TYPES OR NMAKE)
+		SET(TOOLKIT_LIBS ${TOOLKIT_LIBS} ${TBB_MALLOC_LIBRARY})
+	ENDIF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
 ENDIF(${PROJECT_NAME}_TBB_MALLOC_SUPPORT AND TBB_INCLUDE_DIR AND TBB_MALLOC_LIBRARY)
 
 INCLUDE(../BuildToolkit.cmake)
Index: oce/cmake_uninstall.cmake.in
===================================================================
--- /dev/null
+++ oce/cmake_uninstall.cmake.in
@@ -0,0 +1,22 @@
+if (NOT EXISTS "@CMAKE_CURRENT_BINARY_DIR@/install_manifest.txt")
+    message(FATAL_ERROR "Cannot find install manifest: \"@CMAKE_CURRENT_BINARY_DIR@/install_manifest.txt\"")
+endif(NOT EXISTS "@CMAKE_CURRENT_BINARY_DIR@/install_manifest.txt")
+
+file(READ "@CMAKE_CURRENT_BINARY_DIR@/install_manifest.txt" files)
+string(REGEX REPLACE "\n" ";" files "${files}")
+list(REVERSE files)
+foreach (file ${files})
+    message(STATUS "Uninstalling \"$ENV{DESTDIR}${file}\"")
+    if (EXISTS "$ENV{DESTDIR}${file}")
+        execute_process(
+            COMMAND ${CMAKE_COMMAND} -E remove "$ENV{DESTDIR}${file}"
+            OUTPUT_VARIABLE rm_out
+            RESULT_VARIABLE rm_retval
+        )
+        if(NOT ${rm_retval} EQUAL 0)
+            message(FATAL_ERROR "Problem when removing \"$ENV{DESTDIR}${file}\"")
+        endif (NOT ${rm_retval} EQUAL 0)
+    else (EXISTS "$ENV{DESTDIR}${file}")
+        message(STATUS "File \"$ENV{DESTDIR}${file}\" does not exist.")
+    endif (EXISTS "$ENV{DESTDIR}${file}")
+endforeach(file)
\ No newline at end of file
Index: oce/oce_build_config.h.cmake
===================================================================
--- oce.orig/oce_build_config.h.cmake
+++ oce/oce_build_config.h.cmake
@@ -253,28 +253,8 @@
 /* Define if you need to in order for stat and other things to work. */
 #cmakedefine _POSIX_SOURCE
 
-/* Location where resource files will be installed. */
-#cmakedefine OCE_INSTALL_DATA_DIR "@OCE_ABSPATH_DATA_DIR@"
-
-/* Debug postfix for DLLs */
-#if defined(_MSC_VER) && defined(_DEBUG)
-#define OCE_DEBUG_POSTFIX "@CMAKE_DEBUG_POSTFIX@"
-#else
-#define OCE_DEBUG_POSTFIX ""
-#endif
-
-/* Location where TKOpenGl shared library will be installed. */
-#ifdef _MSC_VER
-#define OCE_DEFAULT_CSF_GraphicShr "@OCE_DEFAULT_CSF_GraphicShr@" OCE_DEBUG_POSTFIX ".dll"
-#else
-#cmakedefine OCE_DEFAULT_CSF_GraphicShr "@OCE_DEFAULT_CSF_GraphicShr@"
-#endif
-
-/* Define MACOSX_USE_GLX to use X11 OpenGL on OSX */
-#cmakedefine MACOSX_USE_GLX
-
 /* Whether OCE is build as static lib */
 #cmakedefine OCE_BUILD_STATIC_LIB
 
-/* Whether disable or not the bspline mesher */
-#cmakedefine OCE_DISABLE_BSPLINE_MESHER
+/* Define MACOSX_USE_GLX to use X11 OpenGL on OSX */
+#cmakedefine MACOSX_USE_GLX
Index: oce/ProjectConfig.cmake.in
===================================================================
--- oce.orig/ProjectConfig.cmake.in
+++ oce/ProjectConfig.cmake.in
@@ -4,6 +4,7 @@
 #  ${PROJECT_NAME}_LIBRARIES    - all libraries to link against (warning, may be slower than just specify the used libs)
 #  ${PROJECT_NAME}_ALL_FOUND    - set to TRUE if all requested COMPONENTS are specified (see below), false otherwise
 #  ${PROJECT_NAME}_MISSING_TOOLKITS - when ${PROJECT_NAME}_ALL_FOUND is FALSE, contains a list of missing toolkits
+#  ${PROJECT_NAME}_ALL_BUILT_MODULES - the list of source directories compiled (mostly useful when running swig to generate wrappers)
 #
 # If COMPONENTS is specified in the find_package() commands, it contains
 # a list of toolkit modules which are requested.  For each component,
@@ -18,6 +19,7 @@ GET_FILENAME_COMPONENT(SELF_DIR "${CMAKE
 
 SET(@PROJECT_NAME@_INCLUDE_DIRS "${SELF_DIR}/@OCE_CMAKE_DATA_TO_INCLUDE_RELATIVE_DIR@")
 SET(@PROJECT_NAME@_LIBRARIES "@OCE_LIBRARIES@")
+SET(@PROJECT_NAME@_ALL_BUILT_MODULES "@OCE_ALL_BUILT_MODULES@")
 INCLUDE("${SELF_DIR}/@PROJECT_NAME@-libraries.cmake")
 
 SET(@PROJECT_NAME@_ALL_FOUND true)
Index: oce/adm/cmake/TKCAF/CMakeLists.txt
===================================================================
--- oce.orig/adm/cmake/TKCAF/CMakeLists.txt
+++ oce/adm/cmake/TKCAF/CMakeLists.txt
@@ -8,6 +8,7 @@ SET(TOOLKIT_MODULES
 )
 SET(TOOLKIT_DEPENDS
 	TKernel
+	TKBO
 	TKLCAF
 	TKG3d
 	TKGeomBase
Index: oce/oce_build_paths.h.cmake
===================================================================
--- /dev/null
+++ oce/oce_build_paths.h.cmake
@@ -0,0 +1,27 @@
+/****************************************************************
+**
+**  File: oce_build_paths.h.cmake, build-inc/oce-paths.h
+**
+**  This configuration header is used to build OCE. It is
+**  not installed.
+**
+****************************************************************/
+
+
+/* Location where resource files will be installed. */
+#cmakedefine OCE_INSTALL_DATA_DIR "@OCE_ABSPATH_DATA_DIR@"
+
+/* Debug postfix for DLLs */
+#if defined(_MSC_VER) && defined(_DEBUG)
+#define OCE_DEBUG_POSTFIX "@CMAKE_DEBUG_POSTFIX@"
+#else
+#define OCE_DEBUG_POSTFIX ""
+#endif
+
+/* Location where TKOpenGl shared library will be installed. */
+#ifdef _MSC_VER
+#define OCE_DEFAULT_CSF_GraphicShr "@OCE_DEFAULT_CSF_GraphicShr@" OCE_DEBUG_POSTFIX ".dll"
+#else
+#cmakedefine OCE_DEFAULT_CSF_GraphicShr "@OCE_DEFAULT_CSF_GraphicShr@"
+#endif
+
