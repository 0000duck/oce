From: Denis Barbier <bouzim@gmail.com>
Date: Thu, 14 Jul 2011 08:54:25 +0200
Subject: [PATCH 03/82] Copy CMake files from 5e184f9

    Merge pull request #41 from tpaviot/review/all-warning-fixes

    Review/all warning fixes
---
 AUTHORS                                |   13 +
 BUILD.MSVC.txt                         |  228 +++++++++
 CMakeLists.txt                         |  790 ++++++++++++++++++++++++++++++++
 DrawDefault.cmake                      |   37 ++
 INSTALL.MSVC.txt                       |   33 ++
 INSTALL.Unix                           |  112 +++++
 NEWS                                   |  158 +++++++
 ProjectConfig.cmake.in                 |   11 +
 README                                 |   27 ++
 Version.rc.cmake                       |   46 ++
 adm/cmake/DRAWEXE/CMakeLists.txt       |   84 ++++
 adm/cmake/FWOSPlugin/CMakeLists.txt    |   12 +
 adm/cmake/OccBuildKit.cmake            |  119 +++++
 adm/cmake/PTKernel/CMakeLists.txt      |   18 +
 adm/cmake/TKAdvTools/CMakeLists.txt    |   16 +
 adm/cmake/TKBO/CMakeLists.txt          |   23 +
 adm/cmake/TKBRep/CMakeLists.txt        |   21 +
 adm/cmake/TKBin/CMakeLists.txt         |   24 +
 adm/cmake/TKBinL/CMakeLists.txt        |   18 +
 adm/cmake/TKBinTObj/CMakeLists.txt     |   16 +
 adm/cmake/TKBinXCAF/CMakeLists.txt     |   22 +
 adm/cmake/TKBool/CMakeLists.txt        |   27 ++
 adm/cmake/TKCAF/CMakeLists.txt         |   25 +
 adm/cmake/TKCDF/CMakeLists.txt         |   15 +
 adm/cmake/TKDCAF/CMakeLists.txt        |   38 ++
 adm/cmake/TKDraw/CMakeLists.txt        |   33 ++
 adm/cmake/TKFeat/CMakeLists.txt        |   22 +
 adm/cmake/TKFillet/CMakeLists.txt      |   27 ++
 adm/cmake/TKG2d/CMakeLists.txt         |   19 +
 adm/cmake/TKG3d/CMakeLists.txt         |   19 +
 adm/cmake/TKGeomAlgo/CMakeLists.txt    |   50 ++
 adm/cmake/TKGeomBase/CMakeLists.txt    |   35 ++
 adm/cmake/TKHLR/CMakeLists.txt         |   24 +
 adm/cmake/TKIGES/CMakeLists.txt        |   40 ++
 adm/cmake/TKLCAF/CMakeLists.txt        |   16 +
 adm/cmake/TKMath/CMakeLists.txt        |   23 +
 adm/cmake/TKMesh/CMakeLists.txt        |   29 ++
 adm/cmake/TKMeshVS/CMakeLists.txt      |   17 +
 adm/cmake/TKNIS/CMakeLists.txt         |   19 +
 adm/cmake/TKOffset/CMakeLists.txt      |   26 +
 adm/cmake/TKOpenGl/CMakeLists.txt      |   36 ++
 adm/cmake/TKPCAF/CMakeLists.txt        |   29 ++
 adm/cmake/TKPLCAF/CMakeLists.txt       |   21 +
 adm/cmake/TKPShape/CMakeLists.txt      |   30 ++
 adm/cmake/TKPrim/CMakeLists.txt        |   21 +
 adm/cmake/TKSTEP/CMakeLists.txt        |   36 ++
 adm/cmake/TKSTEP209/CMakeLists.txt     |   16 +
 adm/cmake/TKSTEPAttr/CMakeLists.txt    |   16 +
 adm/cmake/TKSTEPBase/CMakeLists.txt    |   20 +
 adm/cmake/TKSTL/CMakeLists.txt         |   20 +
 adm/cmake/TKService/CMakeLists.txt     |   45 ++
 adm/cmake/TKShHealing/CMakeLists.txt   |   28 ++
 adm/cmake/TKShapeSchema/CMakeLists.txt |   17 +
 adm/cmake/TKStdLSchema/CMakeLists.txt  |   17 +
 adm/cmake/TKStdSchema/CMakeLists.txt   |   24 +
 adm/cmake/TKTObj/CMakeLists.txt        |   14 +
 adm/cmake/TKTObjDRAW/CMakeLists.txt    |   19 +
 adm/cmake/TKTopAlgo/CMakeLists.txt     |   32 ++
 adm/cmake/TKTopTest/CMakeLists.txt     |   41 ++
 adm/cmake/TKV2d/CMakeLists.txt         |   25 +
 adm/cmake/TKV3d/CMakeLists.txt         |   33 ++
 adm/cmake/TKVRML/CMakeLists.txt        |   26 +
 adm/cmake/TKViewerTest/CMakeLists.txt  |   42 ++
 adm/cmake/TKVoxel/CMakeLists.txt       |   24 +
 adm/cmake/TKXCAF/CMakeLists.txt        |   24 +
 adm/cmake/TKXCAFSchema/CMakeLists.txt  |   24 +
 adm/cmake/TKXDEDRAW/CMakeLists.txt     |   36 ++
 adm/cmake/TKXDEIGES/CMakeLists.txt     |   19 +
 adm/cmake/TKXDESTEP/CMakeLists.txt     |   23 +
 adm/cmake/TKXMesh/CMakeLists.txt       |   15 +
 adm/cmake/TKXSBase/CMakeLists.txt      |   33 ++
 adm/cmake/TKXSDRAW/CMakeLists.txt      |   39 ++
 adm/cmake/TKXml/CMakeLists.txt         |   24 +
 adm/cmake/TKXmlL/CMakeLists.txt        |   19 +
 adm/cmake/TKXmlTObj/CMakeLists.txt     |   16 +
 adm/cmake/TKXmlXCAF/CMakeLists.txt     |   23 +
 adm/cmake/TKernel/CMakeLists.txt       |   50 ++
 env.csh                                |   69 ---
 env.csh.cmake                          |   23 +
 env.sh                                 |   53 ---
 env.sh.cmake                           |   23 +
 oce_build_config.h.cmake               |  261 +++++++++++
 oce_install_config.h.cmake             |   25 +
 src/OSD/gettime_osx.h                  |  143 ++++++
 84 files changed, 3784 insertions(+), 122 deletions(-)
 create mode 100644 AUTHORS
 create mode 100644 BUILD.MSVC.txt
 create mode 100644 CMakeLists.txt
 create mode 100644 DrawDefault.cmake
 create mode 100644 INSTALL.MSVC.txt
 create mode 100644 INSTALL.Unix
 create mode 100644 NEWS
 create mode 100644 ProjectConfig.cmake.in
 create mode 100644 README
 create mode 100644 Version.rc.cmake
 create mode 100644 adm/cmake/DRAWEXE/CMakeLists.txt
 create mode 100644 adm/cmake/FWOSPlugin/CMakeLists.txt
 create mode 100644 adm/cmake/OccBuildKit.cmake
 create mode 100644 adm/cmake/PTKernel/CMakeLists.txt
 create mode 100644 adm/cmake/TKAdvTools/CMakeLists.txt
 create mode 100644 adm/cmake/TKBO/CMakeLists.txt
 create mode 100644 adm/cmake/TKBRep/CMakeLists.txt
 create mode 100644 adm/cmake/TKBin/CMakeLists.txt
 create mode 100644 adm/cmake/TKBinL/CMakeLists.txt
 create mode 100644 adm/cmake/TKBinTObj/CMakeLists.txt
 create mode 100644 adm/cmake/TKBinXCAF/CMakeLists.txt
 create mode 100644 adm/cmake/TKBool/CMakeLists.txt
 create mode 100644 adm/cmake/TKCAF/CMakeLists.txt
 create mode 100644 adm/cmake/TKCDF/CMakeLists.txt
 create mode 100644 adm/cmake/TKDCAF/CMakeLists.txt
 create mode 100644 adm/cmake/TKDraw/CMakeLists.txt
 create mode 100644 adm/cmake/TKFeat/CMakeLists.txt
 create mode 100644 adm/cmake/TKFillet/CMakeLists.txt
 create mode 100644 adm/cmake/TKG2d/CMakeLists.txt
 create mode 100644 adm/cmake/TKG3d/CMakeLists.txt
 create mode 100644 adm/cmake/TKGeomAlgo/CMakeLists.txt
 create mode 100644 adm/cmake/TKGeomBase/CMakeLists.txt
 create mode 100644 adm/cmake/TKHLR/CMakeLists.txt
 create mode 100644 adm/cmake/TKIGES/CMakeLists.txt
 create mode 100644 adm/cmake/TKLCAF/CMakeLists.txt
 create mode 100644 adm/cmake/TKMath/CMakeLists.txt
 create mode 100644 adm/cmake/TKMesh/CMakeLists.txt
 create mode 100644 adm/cmake/TKMeshVS/CMakeLists.txt
 create mode 100644 adm/cmake/TKNIS/CMakeLists.txt
 create mode 100644 adm/cmake/TKOffset/CMakeLists.txt
 create mode 100644 adm/cmake/TKOpenGl/CMakeLists.txt
 create mode 100644 adm/cmake/TKPCAF/CMakeLists.txt
 create mode 100644 adm/cmake/TKPLCAF/CMakeLists.txt
 create mode 100644 adm/cmake/TKPShape/CMakeLists.txt
 create mode 100644 adm/cmake/TKPrim/CMakeLists.txt
 create mode 100644 adm/cmake/TKSTEP/CMakeLists.txt
 create mode 100644 adm/cmake/TKSTEP209/CMakeLists.txt
 create mode 100644 adm/cmake/TKSTEPAttr/CMakeLists.txt
 create mode 100644 adm/cmake/TKSTEPBase/CMakeLists.txt
 create mode 100644 adm/cmake/TKSTL/CMakeLists.txt
 create mode 100644 adm/cmake/TKService/CMakeLists.txt
 create mode 100644 adm/cmake/TKShHealing/CMakeLists.txt
 create mode 100644 adm/cmake/TKShapeSchema/CMakeLists.txt
 create mode 100644 adm/cmake/TKStdLSchema/CMakeLists.txt
 create mode 100644 adm/cmake/TKStdSchema/CMakeLists.txt
 create mode 100644 adm/cmake/TKTObj/CMakeLists.txt
 create mode 100644 adm/cmake/TKTObjDRAW/CMakeLists.txt
 create mode 100644 adm/cmake/TKTopAlgo/CMakeLists.txt
 create mode 100644 adm/cmake/TKTopTest/CMakeLists.txt
 create mode 100644 adm/cmake/TKV2d/CMakeLists.txt
 create mode 100644 adm/cmake/TKV3d/CMakeLists.txt
 create mode 100644 adm/cmake/TKVRML/CMakeLists.txt
 create mode 100644 adm/cmake/TKViewerTest/CMakeLists.txt
 create mode 100644 adm/cmake/TKVoxel/CMakeLists.txt
 create mode 100644 adm/cmake/TKXCAF/CMakeLists.txt
 create mode 100644 adm/cmake/TKXCAFSchema/CMakeLists.txt
 create mode 100644 adm/cmake/TKXDEDRAW/CMakeLists.txt
 create mode 100644 adm/cmake/TKXDEIGES/CMakeLists.txt
 create mode 100644 adm/cmake/TKXDESTEP/CMakeLists.txt
 create mode 100644 adm/cmake/TKXMesh/CMakeLists.txt
 create mode 100644 adm/cmake/TKXSBase/CMakeLists.txt
 create mode 100644 adm/cmake/TKXSDRAW/CMakeLists.txt
 create mode 100644 adm/cmake/TKXml/CMakeLists.txt
 create mode 100644 adm/cmake/TKXmlL/CMakeLists.txt
 create mode 100644 adm/cmake/TKXmlTObj/CMakeLists.txt
 create mode 100644 adm/cmake/TKXmlXCAF/CMakeLists.txt
 create mode 100644 adm/cmake/TKernel/CMakeLists.txt
 delete mode 100755 env.csh
 create mode 100755 env.csh.cmake
 delete mode 100755 env.sh
 create mode 100755 env.sh.cmake
 create mode 100644 oce_build_config.h.cmake
 create mode 100644 oce_install_config.h.cmake
 create mode 100644 src/OSD/gettime_osx.h

From 7e813f4a31a252e07fc9332370f4851c5fb5535f Mon Sep 17 00:00:00 2001
From: tpaviot <tpaviot@gmail.com>
Date: Thu, 28 Jul 2011 18:35:03 +0200
Subject: [PATCH 1/3] Added TBB memory allocator support in TKernel
 CMakeLists.txt

---
 adm/cmake/TKernel/CMakeLists.txt |    8 ++++++++
 1 files changed, 8 insertions(+), 0 deletions(-)

From c681f87f0c188b2ea4a709d383c2976c49856e90 Mon Sep 17 00:00:00 2001
From: tpaviot <tpaviot@gmail.com>
Date: Thu, 28 Jul 2011 18:36:51 +0200
Subject: [PATCH 2/3] Support for both debug and release TBB library
 (contribution from HYQ)

---
 adm/cmake/TKMesh/CMakeLists.txt |    3 ++-
 1 files changed, 2 insertions(+), 1 deletions(-)

From 2e40cc2d15b1618960a4ac9007316a9defe93b30 Mon Sep 17 00:00:00 2001
From: tpaviot <tpaviot@gmail.com>
Date: Thu, 28 Jul 2011 18:37:35 +0200
Subject: [PATCH 3/3] Added optional TBB memory allocator option

This option is set by default to True when 'TBB' is set as
the multithreading library to use by OCE.
---
 CMakeLists.txt |   14 ++++++++++++++
 1 files changed, 14 insertions(+), 0 deletions(-)

From a3e7c5c11e61da958a8d2cb724a344c701c6cbe5 Mon Sep 17 00:00:00 2001
From: Denis Barbier <bouzim@gmail.com>
Date: Fri, 29 Jul 2011 13:45:40 +0200
Subject: [PATCH] Install an OCEConfigVersion.cmake file to provide versioned
 FIND_PACKAGE

Based on example found at
  http://www.vtk.org/Wiki/CMake/Tutorials/How_to_create_a_ProjectConfig.cmake_file

Fixes https://github.com/tpaviot/oce/issues/32
---
 CMakeLists.txt                |    5 ++++-
 ProjectConfigVersion.cmake.in |   12 ++++++++++++
 2 files changed, 16 insertions(+), 1 deletions(-)
 create mode 100644 ProjectConfigVersion.cmake.in

From 7d9fbf50e90423ee0e9c38e9c23b9769b4c8985d Mon Sep 17 00:00:00 2001
From: Denis Barbier <bouzim@gmail.com>
Date: Fri, 5 Aug 2011 08:42:08 +0200
Subject: [PATCH] Use tabulations to indent CMake files, and remove trailing
 spaces

---
 CMakeLists.txt                     |  548 ++++++++++++++++++------------------
 ProjectConfigVersion.cmake.in      |   10 +-
 adm/cmake/DRAWEXE/CMakeLists.txt   |    6 +-
 adm/cmake/OccBuildKit.cmake        |   98 +++----
 adm/cmake/TKOpenGl/CMakeLists.txt  |    6 +-
 adm/cmake/TKService/CMakeLists.txt |    6 +-
 6 files changed, 333 insertions(+), 341 deletions(-)

From 56c72cd479aa7a9b5240fc5fdfe5006265ff61b7 Mon Sep 17 00:00:00 2001
From: Denis Barbier <bouzim@gmail.com>
Date: Wed, 10 Aug 2011 02:06:01 +0200
Subject: [PATCH] Change OSD_FontMgr.cxx so that TKernel does not depend on
 X11

This class uses X11 calls to get the list of available fonts,
which is then used by OpenGl_FontMgr.cxx; see
  http://www.opencascade.org/org/forum/thread_21351/
for details about why this is a bad idea.

Here we use an environment variable to get the list of directories
where fonts have to be looked for.  If it is unset, default paths
are set when compiling:
 * On Darwin, /usr/X11/lib/X11/fonts:/Library/Fonts:/System/Library/Fonts
 * On other Unix, /usr/share/X11/fonts:/usr/share/fonts/X11

Closes issue #12.

Tkernel indirectly depends on libdl through libX11, so this commit
must be applied after ca78eea, otherwise applications may have
unresolved symbols when linking against TKernel.
---
 CMakeLists.txt                   |   23 +++++++---
 adm/cmake/OccBuildKit.cmake      |    3 +
 adm/cmake/TKernel/CMakeLists.txt |    3 -
 src/OSD/OSD_FontMgr.cxx          |   92 ++++++++++++++++++++------------------
 4 files changed, 67 insertions(+), 54 deletions(-)

From 2c20fbce1156a45736966949da30ee2098363753 Mon Sep 17 00:00:00 2001
From: Denis Barbier <bouzim@gmail.com>
Date: Wed, 10 Aug 2011 23:43:06 +0200
Subject: [PATCH] Change installation path of CMake files

Hopefully we are now compliant with what is described at
  http://www.cmake.org/cmake/help/cmake-2-8-docs.html#command:find_package
and users will be able to run FIND_PACKAGE(OCE) to find OCE without
tweaking their configuration.
---
 CMakeLists.txt |   15 ++++++++++++++-
 1 files changed, 14 insertions(+), 1 deletions(-)

From ca78eea2574a680a3fb6d27536b57b69dd16f006 Mon Sep 17 00:00:00 2001
From: Denis Barbier <bouzim@gmail.com>
Date: Thu, 11 Aug 2011 00:51:08 +0200
Subject: [PATCH 1/2] Let TKernel depend on ${CMAKE_DL_LIBS}

dlopen(), dlclose(), etc. are used in src/OSD/OSD_SharedLibrary.cxx,
thus TKernel must depend on ${CMAKE_DL_LIBS}.

This is not a problem just now because TKernel depends on Xmu which
itself links against libdl, but indirect dependencies cause trouble
and must be avoided.

Closes issue #78
---
 adm/cmake/TKernel/CMakeLists.txt |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

From 871003911064c81ce96a4a0ce08cd574c1dc276e Mon Sep 17 00:00:00 2001
From: Denis Barbier <bouzim@gmail.com>
Date: Fri, 12 Aug 2011 20:00:26 +0200
Subject: [PATCH 2/2] Drop dependency of DRAWEXE against ${CMAKE_DL_LIBS}

It had been added in c3cc969, but log message does not explain why.
Remove it now, it should no more be needed thanks to ca78eea.
---
 adm/cmake/DRAWEXE/CMakeLists.txt |    3 ---
 1 files changed, 0 insertions(+), 3 deletions(-)

From a9dcc411f7ab17b0c2a1633049b25efc08c00d2e Mon Sep 17 00:00:00 2001
From: QbProg <tholag@gmail.com>
Date: Tue, 23 Aug 2011 12:40:33 +0200
Subject: [PATCH] Workaround for cmake bug that prevented build in
 Win64+MSVC+static libs

---
 adm/cmake/OccBuildKit.cmake |    6 ++++++
 1 files changed, 6 insertions(+), 0 deletions(-)

From 5a1c0f3928de825b81c0572668ee33efe5eda0a2 Mon Sep 17 00:00:00 2001
From: Denis Barbier <bouzim@gmail.com>
Date: Wed, 31 Aug 2011 08:19:33 +0200
Subject: [PATCH] Rename OccBuildKit.cmake into BuildToolkit.cmake

---
 adm/cmake/BuildToolkit.cmake           |  180 ++++++++++++++++++++++++++++++++
 adm/cmake/FWOSPlugin/CMakeLists.txt    |    2 +-
 adm/cmake/OccBuildKit.cmake            |  180 --------------------------------
 adm/cmake/PTKernel/CMakeLists.txt      |    2 +-
 adm/cmake/TKAdvTools/CMakeLists.txt    |    2 +-
 adm/cmake/TKBO/CMakeLists.txt          |    2 +-
 adm/cmake/TKBRep/CMakeLists.txt        |    2 +-
 adm/cmake/TKBin/CMakeLists.txt         |    2 +-
 adm/cmake/TKBinL/CMakeLists.txt        |    2 +-
 adm/cmake/TKBinTObj/CMakeLists.txt     |    2 +-
 adm/cmake/TKBinXCAF/CMakeLists.txt     |    2 +-
 adm/cmake/TKBool/CMakeLists.txt        |    2 +-
 adm/cmake/TKCAF/CMakeLists.txt         |    2 +-
 adm/cmake/TKCDF/CMakeLists.txt         |    2 +-
 adm/cmake/TKDCAF/CMakeLists.txt        |    2 +-
 adm/cmake/TKDraw/CMakeLists.txt        |    2 +-
 adm/cmake/TKFeat/CMakeLists.txt        |    2 +-
 adm/cmake/TKFillet/CMakeLists.txt      |    2 +-
 adm/cmake/TKG2d/CMakeLists.txt         |    2 +-
 adm/cmake/TKG3d/CMakeLists.txt         |    2 +-
 adm/cmake/TKGeomAlgo/CMakeLists.txt    |    2 +-
 adm/cmake/TKGeomBase/CMakeLists.txt    |    2 +-
 adm/cmake/TKHLR/CMakeLists.txt         |    2 +-
 adm/cmake/TKIGES/CMakeLists.txt        |    2 +-
 adm/cmake/TKLCAF/CMakeLists.txt        |    2 +-
 adm/cmake/TKMath/CMakeLists.txt        |    2 +-
 adm/cmake/TKMesh/CMakeLists.txt        |    2 +-
 adm/cmake/TKMeshVS/CMakeLists.txt      |    2 +-
 adm/cmake/TKNIS/CMakeLists.txt         |    2 +-
 adm/cmake/TKOffset/CMakeLists.txt      |    2 +-
 adm/cmake/TKOpenGl/CMakeLists.txt      |    2 +-
 adm/cmake/TKPCAF/CMakeLists.txt        |    2 +-
 adm/cmake/TKPLCAF/CMakeLists.txt       |    2 +-
 adm/cmake/TKPShape/CMakeLists.txt      |    2 +-
 adm/cmake/TKPrim/CMakeLists.txt        |    2 +-
 adm/cmake/TKSTEP/CMakeLists.txt        |    2 +-
 adm/cmake/TKSTEP209/CMakeLists.txt     |    2 +-
 adm/cmake/TKSTEPAttr/CMakeLists.txt    |    2 +-
 adm/cmake/TKSTEPBase/CMakeLists.txt    |    2 +-
 adm/cmake/TKSTL/CMakeLists.txt         |    2 +-
 adm/cmake/TKService/CMakeLists.txt     |    2 +-
 adm/cmake/TKShHealing/CMakeLists.txt   |    2 +-
 adm/cmake/TKShapeSchema/CMakeLists.txt |    2 +-
 adm/cmake/TKStdLSchema/CMakeLists.txt  |    2 +-
 adm/cmake/TKStdSchema/CMakeLists.txt   |    2 +-
 adm/cmake/TKTObj/CMakeLists.txt        |    2 +-
 adm/cmake/TKTObjDRAW/CMakeLists.txt    |    2 +-
 adm/cmake/TKTopAlgo/CMakeLists.txt     |    2 +-
 adm/cmake/TKTopTest/CMakeLists.txt     |    2 +-
 adm/cmake/TKV2d/CMakeLists.txt         |    2 +-
 adm/cmake/TKV3d/CMakeLists.txt         |    2 +-
 adm/cmake/TKVRML/CMakeLists.txt        |    2 +-
 adm/cmake/TKViewerTest/CMakeLists.txt  |    2 +-
 adm/cmake/TKVoxel/CMakeLists.txt       |    2 +-
 adm/cmake/TKXCAF/CMakeLists.txt        |    2 +-
 adm/cmake/TKXCAFSchema/CMakeLists.txt  |    2 +-
 adm/cmake/TKXDEDRAW/CMakeLists.txt     |    2 +-
 adm/cmake/TKXDEIGES/CMakeLists.txt     |    2 +-
 adm/cmake/TKXDESTEP/CMakeLists.txt     |    2 +-
 adm/cmake/TKXMesh/CMakeLists.txt       |    2 +-
 adm/cmake/TKXSBase/CMakeLists.txt      |    2 +-
 adm/cmake/TKXSDRAW/CMakeLists.txt      |    2 +-
 adm/cmake/TKXml/CMakeLists.txt         |    2 +-
 adm/cmake/TKXmlL/CMakeLists.txt        |    2 +-
 adm/cmake/TKXmlTObj/CMakeLists.txt     |    2 +-
 adm/cmake/TKXmlXCAF/CMakeLists.txt     |    2 +-
 adm/cmake/TKernel/CMakeLists.txt       |    2 +-
 67 files changed, 245 insertions(+), 245 deletions(-)
 create mode 100644 adm/cmake/BuildToolkit.cmake
 delete mode 100644 adm/cmake/OccBuildKit.cmake

From 88a1672fb803f735929414c03bee9767deeff9f7 Mon Sep 17 00:00:00 2001
From: Denis Barbier <bouzim@gmail.com>
Date: Wed, 10 Aug 2011 02:13:21 +0200
Subject: [PATCH 1/3] Let TKService depend on X11 only when visualization
 component is compiled

This allows building OCAF and Data Exchange on computers without X11.

Closes issue #36.
---
 adm/cmake/TKService/CMakeLists.txt             |    2 +-
 inc/Aspect_XWD.hxx                             |    1 +
 src/AlienImage/AlienImage_X11XWDAlienData.cxx  |    4 +---
 src/AlienImage/AlienImage_X11XWDFileHeader.cxx |    4 +---
 4 files changed, 4 insertions(+), 7 deletions(-)

From 3fa6246c5af545e80aaf4759d3f15ea0afa32363 Mon Sep 17 00:00:00 2001
From: Denis Barbier <bouzim@gmail.com>
Date: Wed, 10 Aug 2011 02:14:57 +0200
Subject: [PATCH 2/3] Remove option OCE_VISUALISATION

This module contains only 3 components, it is unlikely that it
is needed alone.  It is pulled in by other modules, so make it
a pure dependency instead of an option, and rename it into
OCE_VISU_DEP.

This allows renaming OCE_VISUALISATION_FULL into OCE_VISUALISATION.
---
 CMakeLists.txt |   34 +++++++++++++++++-----------------
 1 files changed, 17 insertions(+), 17 deletions(-)

From ea56c45ff48e907ff2a8559fb27e02dda522e1e4 Mon Sep 17 00:00:00 2001
From: Denis Barbier <bouzim@gmail.com>
Date: Wed, 10 Aug 2011 02:15:53 +0200
Subject: [PATCH 3/3] Rename OCE_VISUALISATION_FULL option into
 OCE_VISUALISATION

---
 CMakeLists.txt                     |   24 ++++++++++++------------
 adm/cmake/TKService/CMakeLists.txt |    4 ++--
 2 files changed, 14 insertions(+), 14 deletions(-)

From 3efe3e41a47db44690f25809d429e6ceedcf4984 Mon Sep 17 00:00:00 2001
From: Denis Barbier <bouzim@gmail.com>
Date: Sun, 21 Aug 2011 09:08:05 +0200
Subject: [PATCH] Change installation paths

 * header files: include/oce
 * env.{sh,csh}: lib/oce-X.Y.Z
 * src: share/oce-X.Y.Z

Rationale: These paths are more standard, at least on Unix.
Version is added to paths of runtime files, so that users may
have two different OCE versions, this may be needed if they
have one program linked against OCE X1.Y1.Z1 and another one
against OCE X2.Y2.Z2.

On the other hand, header files and .cmake files are not
versioned, because it would then be difficult to know which
version to use.

Closes issue #2.
---
 CMakeLists.txt           |   11 +++++++----
 DrawDefault.cmake        |    2 +-
 env.csh.cmake            |    2 +-
 env.sh.cmake             |    2 +-
 oce_build_config.h.cmake |    2 +-
 5 files changed, 11 insertions(+), 8 deletions(-)

From 58595af8246959cff40f06750c6da8d7c62eff8c Mon Sep 17 00:00:00 2001
From: Matthew Dempsky <matthew@dempsky.org>
Date: Sat, 27 Aug 2011 19:35:40 -0700
Subject: [PATCH] use localtime_r if available

---
 CMakeLists.txt          |    1 +
 src/OSD/OSD_Process.cxx |    4 ++++
 2 files changed, 5 insertions(+), 0 deletions(-)

From eb52815a1ea924700621d9f3cfeb7582c7b4b6c7 Mon Sep 17 00:00:00 2001
From: Denis Barbier <bouzim@gmail.com>
Date: Wed, 31 Aug 2011 08:59:56 +0200
Subject: [PATCH 1/3] Cosmetics: fix whitespace

---
 CMakeLists.txt |    4 ++--
 1 files changed, 2 insertions(+), 2 deletions(-)

From 0fe366b3c0c762e3d202b76ee527a12282983a21 Mon Sep 17 00:00:00 2001
From: Denis Barbier <bouzim@gmail.com>
Date: Wed, 31 Aug 2011 09:04:47 +0200
Subject: [PATCH 2/3] Rename PROCESS_OCC_MODULE macro into PROCESS_MODULE

---
 CMakeLists.txt |   22 +++++++++++-----------
 1 files changed, 11 insertions(+), 11 deletions(-)

From 8c429472fb7dad0f81f78bb9800a146edf33f1e1 Mon Sep 17 00:00:00 2001
From: Denis Barbier <bouzim@gmail.com>
Date: Wed, 31 Aug 2011 09:06:53 +0200
Subject: [PATCH 3/3] Rename OCE_BUNDLE_ROOT_PATH into
 ${PROJECT_NAME}_BUNDLE_ROOT_PATH

---
 CMakeLists.txt |   34 +++++++++++++++++-----------------
 1 files changed, 17 insertions(+), 17 deletions(-)

From 3d244c7b2d6f6fef4d354cf659856584b2c6ad5a Mon Sep 17 00:00:00 2001
From: Denis Barbier <bouzim@gmail.com>
Date: Thu, 8 Sep 2011 00:07:28 +0200
Subject: [PATCH] Revisit the problem of building without X11

There had been some efforts to remove unnecessary dependencies against X11.
But several toolkits (especially TKV3d) are needed by OCAF and Data Exchange,
and they cannot easily be compiled without X11.

This commit uses a different approach, based on Debian packages.  A new
OCE_DISABLE_X11 option is added (for non-MSVC builds); it is OFF by default,
and can be set to ON when compiling without X11.

The list of toolkits passed to the PROCESS_MODULE macro is splitted into
two parts, the first one contains toolkits which can be compiled without
X11, and the second one (optional) contains toolkits which are compiled
only if OCE_DISABLE_X11 is OFF.

This allows building many toolkits from OCAF and Data Exchange without X11.
Of course, VISUALISATION and DRAW modules are disabled when OCE_DISABLE_X11
is ON.
---
 CMakeLists.txt                     |   97 +++++++++++++++++++++---------------
 adm/cmake/TKService/CMakeLists.txt |   12 ++---
 2 files changed, 61 insertions(+), 48 deletions(-)

From 0fb88c4cce2390cdfac19fe9d9d9b6b5e9e32ca3 Mon Sep 17 00:00:00 2001
From: Denis Barbier <bouzim@gmail.com>
Date: Wed, 7 Sep 2011 21:29:20 +0200
Subject: [PATCH 1/6] Let users specify COMPONENTS in find_package(OCE)

Those components are OpenCascade toolkits, or in other words,
library names.
If REQUIRED is also specified, a FATAL_ERROR is thrown if at least
one library is missing.  If REQUIRED is not specified, processing
continues even if a library is missing.  User can check afterwards
if OCE_<toolkit>_FOUND is set to true or false.
---
 ProjectConfig.cmake.in |   18 ++++++++++++++++++
 1 files changed, 18 insertions(+), 0 deletions(-)

From 52dc0a6784ffd04d6053a656b47a80205e9b55fe Mon Sep 17 00:00:00 2001
From: Denis Barbier <bouzim@gmail.com>
Date: Fri, 9 Sep 2011 07:54:19 +0200
Subject: [PATCH 3/6] Fix indentation of ProjectConfig.cmake.in

---
 ProjectConfig.cmake.in |   20 ++++++++++----------
 1 files changed, 10 insertions(+), 10 deletions(-)

From 37724c9adc1ac32ed2b3cf0ee1e34dba6a47a475 Mon Sep 17 00:00:00 2001
From: Denis Barbier <bouzim@gmail.com>
Date: Fri, 9 Sep 2011 08:02:00 +0200
Subject: [PATCH 4/6] New variables in OCEConfig.cmake: OCE_ALL_FOUND and
 OCE_MISSING_TOOLKITS

OCE_ALL_FOUND is set to TRUE if all requested components are defined,
otherwise FALSE.  If FALSE, OCE_MISSING_TOOLKITS contains the list
of missing toolkits.
---
 ProjectConfig.cmake.in |    9 +++++++++
 1 files changed, 9 insertions(+), 0 deletions(-)

From f44e2cfba7c7b63a1cc9965f6b9cff86eccb85f4 Mon Sep 17 00:00:00 2001
From: Denis Barbier <bouzim@gmail.com>
Date: Fri, 9 Sep 2011 19:12:19 +0200
Subject: [PATCH 6/6] Fix handling of REQUIRED in OCEConfig.cmake

---
 ProjectConfig.cmake.in |    5 ++---
 1 files changed, 2 insertions(+), 3 deletions(-)

From f6986342937abbde3dcf44e716eab6eccc09d6aa Mon Sep 17 00:00:00 2001
From: QbProg <tholag@gmail.com>
Date: Sun, 11 Sep 2011 12:07:27 +0200
Subject: [PATCH] Add support for tests in MSVC

- Disable coverage in MSVC
- Add solution folders support to test projects
---
 CMakeLists.txt      |   59 +++++++++++++++++++++++++++++++++++++++++++++++++-
 test/CMakeLists.txt |   18 ++++++++++++++-
 2 files changed, 74 insertions(+), 3 deletions(-)

From fe63d14234e4fd2a3bc70ff32c1ff66506f0e6fe Mon Sep 17 00:00:00 2001
From: QbProg <tholag@gmail.com>
Date: Sun, 11 Sep 2011 13:55:16 +0200
Subject: [PATCH] Autoinstall bundle DLLs

---
 CMakeLists.txt |   38 ++++++++++++++++++++++++++++++++++++++
 1 files changed, 38 insertions(+), 0 deletions(-)

From 4051d938563f43470c0b4abcbaf4d4cce12b4381 Mon Sep 17 00:00:00 2001
From: Denis Barbier <bouzim@gmail.com>
Date: Wed, 14 Sep 2011 19:44:57 +0200
Subject: [PATCH] Tests were not found when NOT WIN32

Use the new (CMake 2.8) add_test(NAME name COMMAND command)
signature, as explained at
  http://www.cmake.org/pipermail/cmake/2002-January/002644.html

Bump CMake requirement to 2.8.
---
 CMakeLists.txt      |   16 +++++++---------
 test/CMakeLists.txt |   11 +----------
 2 files changed, 8 insertions(+), 19 deletions(-)

From 0dc9faf2decb2a15b84242e30bb04116a8289808 Mon Sep 17 00:00:00 2001
From: Denis Barbier <bouzim@gmail.com>
Date: Thu, 22 Sep 2011 13:16:12 +0200
Subject: [PATCH] Mark OCE_DISABLE_X11 option as advanced except on Mac and
 Win32

---
 CMakeLists.txt |    3 +++
 1 files changed, 3 insertions(+), 0 deletions(-)

From 43c5bab58f92cbc100cfcb3016bfb095d3f63bb4 Mon Sep 17 00:00:00 2001
From: QbProg <tholag@gmail.com>
Date: Sat, 24 Sep 2011 16:11:00 +0200
Subject: [PATCH 1/3] Enable config.h support in WIN32 platforms

---
 CMakeLists.txt |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

From b0683f1431426fb27eb776cab78b57ded5b61ffa Mon Sep 17 00:00:00 2001
From: QbProg <tholag@gmail.com>
Date: Sat, 24 Sep 2011 16:22:30 +0200
Subject: [PATCH 2/3] Correctly use debug postfix in MSVC builds. This allows
 to load DRAWEXE/TKOpenGL even in Debug builds

---
 CMakeLists.txt                               |    6 +++++-
 oce_build_config.h.cmake                     |   11 +++++++++++
 src/Draw/Draw.cxx                            |    2 +-
 src/Graphic3d/Graphic3d_WNTGraphicDevice.cxx |    2 +-
 src/Plugin/Plugin.cxx                        |    2 +-
 5 files changed, 19 insertions(+), 4 deletions(-)

From c9fb74cfc1f0e1ab0bc043b9d154ba50639e53fb Mon Sep 17 00:00:00 2001
From: QbProg <tholag@gmail.com>
Date: Sat, 24 Sep 2011 20:49:58 +0200
Subject: [PATCH 3/3] In MSVC, don't include version number in the CASROOT
 path

---
 CMakeLists.txt |    6 +++++-
 1 files changed, 5 insertions(+), 1 deletions(-)

From 785b1cf7c3e94fc8d9933443f17e3a4b8254067f Mon Sep 17 00:00:00 2001
From: QbProg <tholag@gmail.com>
Date: Sat, 24 Sep 2011 17:35:10 +0200
Subject: [PATCH 3/3] Disable DRAW when static build is ON

---
 CMakeLists.txt |    5 +++++
 1 files changed, 5 insertions(+), 0 deletions(-)

From 88005b727f1e094571d5f4bbd59aef2015f43c38 Mon Sep 17 00:00:00 2001
From: QbProg <tholag@gmail.com>
Date: Sun, 25 Sep 2011 10:56:35 +0200
Subject: [PATCH] Add an option to include header files in the project

---
 CMakeLists.txt               |    2 ++
 adm/cmake/BuildToolkit.cmake |    8 +++++++-
 2 files changed, 9 insertions(+), 1 deletions(-)

From e8d54d2a917ab84e3291f4fd16066eae176afeab Mon Sep 17 00:00:00 2001
From: QbProg <tholag@gmail.com>
Date: Mon, 26 Sep 2011 20:44:56 +0200
Subject: [PATCH] Fixes wrong variable usage in commit
 785b1cf7c3e94fc8d9933443f17e3a4b8254067f

---
 CMakeLists.txt |    4 ++--
 1 files changed, 2 insertions(+), 2 deletions(-)

From fd482ad09dd7b7f0a12b1cb1e4837279fa425c35 Mon Sep 17 00:00:00 2001
From: Denis Barbier <bouzim@gmail.com>
Date: Fri, 28 Oct 2011 22:55:43 +0200
Subject: [PATCH 1/3] Update instructions in INSTALL.Unix

Slightly change CMake cache variables.
Add instructions for running our test suite.
---
 INSTALL.Unix |   10 ++++++++--
 1 files changed, 8 insertions(+), 2 deletions(-)

From 321e7742895259e25b762d468276d7220bc0ff3d Mon Sep 17 00:00:00 2001
From: Denis Barbier <bouzim@gmail.com>
Date: Fri, 28 Oct 2011 22:57:39 +0200
Subject: [PATCH 2/3] Update instructions in INSTALL.MSVC.txt

Debug and Release directories have been merged.
---
 INSTALL.MSVC.txt |   11 +++++------
 1 files changed, 5 insertions(+), 6 deletions(-)

From 7b62e95b1c8a453b8656a3c515201424df598f1c Mon Sep 17 00:00:00 2001
From: Denis Barbier <bouzim@gmail.com>
Date: Fri, 28 Oct 2011 23:08:23 +0200
Subject: [PATCH 3/3] Update BUILD.MSVC.txt

We now require CMake 2.8.
Advocate using unversioned oce-win-bundle directories, these dependencies will seldom change.
Debug and Release installation directories have been merged.
---
 BUILD.MSVC.txt |   22 +++++++++++-----------
 1 files changed, 11 insertions(+), 11 deletions(-)

Index: oce/AUTHORS
===================================================================
--- /dev/null
+++ oce/AUTHORS
@@ -0,0 +1,13 @@
+OCE contains additional code over OCC contributed by (alphabetical sort):
+
+Guillaume Alleon (guillaume.alleon at gmail dot com)
+Denis Barbier (bouzim at gmail dot com)
+fohlenrolle (mmuellen at gmx dot de)
+QbProg (tholag at gmail dot com)
+Thomas Paviot (tpaviot at gmail dot com)
+Mark Pictor (mpictor at gmail dot com)
+Jérôme Robert (jrobert dot pro at gmail dot com)
+Fotis Sioutis (sfotis at gmail dot com)
+Hugh Sorby ()
+
+Copyright 2011
Index: oce/BUILD.MSVC.txt
===================================================================
--- /dev/null
+++ oce/BUILD.MSVC.txt
@@ -0,0 +1,228 @@
+OCE MSVC Build Instructions
+
+1) INTRODUCTION
+2) PREREQUISITES
+  2.1) Cmake
+  2.2) External Libraries
+    2.2.1) Compile the libs by yourself
+    2.2.2) Using OCE - BUNDLE
+3) Extracting the sources
+4) Configuring
+  4.1) Designate a build directory 
+  4.2) Run cmake-gui 
+  4.3) Select the generator
+  4.4) Configuration Options
+  4.5) Configuring library paths
+    4.5.1) TCL
+    4.5.2) OCE bundle
+    4.5.3) Using your own compiled libs
+  4.6) Generating 
+5) Compiling
+6) Installing
+  6.1) External libs
+  6.2) Command line
+7) Building for Win64
+8) Building for both Win32 and Win64
+9) Final Notes
+  9.1) Debug libraries
+  9.2) Debug symbols 
+
+
+1) INTRODUCTION
+
+This guide will help you throught recompiling OCE from scratch. Consider downloading 
+precompiled binaries if you just want to use it in a supported compiler.
+
+2) PREREQUISITES
+
+  2.1) Cmake
+  OCE build system requires CMake 2.8 to function. Download and install it at www.cmake.org
+
+  2.2) External Libraries
+    Some modules of OCE require external libraries. These include
+
+    - freetype , required by Visualization
+    - FTGL , required by Visualization
+    - TCL , required by DRAW
+    - gl2ps and FreeImage , optionally required by Visualization
+    - TBB , optionally required to to multithreading
+
+    If you use DRAW , we strongly suggest that you install ActiveState TCL for Win32 or Win64. It comes
+    with a simple to use installation package and cmake automatically finds it.
+
+    You have two choices to build or use dependency binaries:
+
+    - Compile all the libs by yourself
+    - Use OCE-WIN-BUNDLE (see below), to be found at http://www.github.com/QbProg/oce-win-bundle
+
+      2.2.1) Compile the libs by yourself
+        
+        These libs must be downloaded and compiled separately.
+        If you find precompiled binaries, make sure that the compiler version used to compile matches
+        exactly the one installed in your system (even the service pack level).
+        If you choose build the libraries, make sure you compile them in debug and release.
+
+      2.2.2) Using OCE - BUNDLE
+      
+        The bundle will let you compile all the libraries required by oce in one simple step.
+        You can also download precompiled binaries of the bundle if you use VC2008 or VC2010.
+
+        If you choose to use the bundle, make sure you have extracted or INSTALLed it to a specific folder, one time for 32bit binaries,
+        and in a different folder for 64bit binaries (always debug+release). 
+        Actually bundle 32/64 binaries are split, and will be provided together in OCE-0.4
+
+        If you want to rebuild the bundle from sources, follow the instructions at 
+        http://www.github.com/QbProg/oce-win-bundle
+        
+        In this example we will extract the precompiled bundle in C:\oce-win-bundle-win32\
+  --
+    
+3) Extracting the sources
+    
+  - Download oce-x.x.zip and extract it in a folder. Say C:\oce-src
+
+4) Configuring
+
+  We strongly suggest the use of out-of-source CMake builds. This means that the temporary
+  compilation projects and objects will not pollute the source folder.
+
+  4.1) Designate a build directory 
+    You can use a subdirectory of the source one, or a completely different one. 
+    In this case we will use c:\oce-src\Build32\
+
+  4.2) Run cmake-gui 
+     This is the GUI front-end to CMake. It will help you to select
+     the compilation options and configurations.  
+
+    - In the "Where is the source code" field put the oce source directory : C:\oce-src
+    - In the "Where to build the binaries" field put your build folder : C:\oce-src\Build32\
+    - Press "Configure"
+
+  4.3) Select the generator 
+      The first time you press "Configure", you will have to select the compiler you plan to use. 
+      Select one of the "Visual Studio xx" generators, and select the "Win64" ones if you want to do a 64bit compilation
+      
+  4.4) Configuration Options
+
+    After the first configuration step, you will have to select the options.
+    You will find a lot of options: concentrate first on these that begin with OCE_
+    Here the most important ones:
+      
+      - OCE_INSTALL_PREFIX : the destination folder of the INSTALL phase. 
+      At the end of the process, you will find there all the includes, binaries, libraries,etc...
+      NOTE : This directory is filled only when you compile the INSTALL project.
+      In this example we'll set it pointing to C:/oce-bin/
+ 
+      - OCE_USE_MSVC_EXPRESS : enable this if you are using the express edition. 
+      - OCE_BUILD_SHARED_LIB : disable this if you want static libraries
+      - OCE_WITH_xxx : enable or disable the usage of the xxx external library
+      - OCE_xxxxxx : enables or disables a specific component to be built. (i.e. OCE_VISUALIZATION, OCE_DRAW , etc...) 
+      - OCE_INSTALL_PDB_FILES : enable this if you want to copy resulting PDB files (debug symbols) in the INSTALL directory
+
+      After you set the required options , press CONFIGURE. You will likely get errors.  To fix those errors, you
+      have to tell CMake where to find headers and libraries for dependencies, this is discussed just below.
+      
+   4.5) Configuring library paths
+      Now, depending on the enabled options, it's time to set the external library directories.
+
+    4.5.1) TCL
+      If you use ActiveState TCL, CMake will find it automatically. Else, you should set the variables 
+      starting with TCL_ and TK (eventually available in the "Advanced" section of cmake-gui)
+
+    4.5.2) OCE bundle
+     
+      - Enable the OCE_USE_BUNDLE option
+      - Press Configure
+      - Set OCE_BUNDLE_ROOT_PATH to point to the oce-win-bundle installation directory. For example C:/oce-win-bundle-win32/
+      - Configure again
+      
+      It should automatically set all the library paths. Some of them will appear in red, but the CONFIGURE phase will end successfully at 
+      this time. You should check this in the output window at the bottom of cmake-gui
+      
+    4.5.3) Using your own compiled libs
+      For each lib, set the appropriate fields pointing to the include directories or libraries.
+      For example, you will have to set FREETYPE_INCLUDE_DIR to C:/freetype-???/include/ and so on...
+      Reconfigure until all the errors go away
+
+  4.6) Generating      
+    Once you configured everything , press the Generate button. It will create a MSVC solution in C:\oce-src\Build32\OCE.sln
+    If you want to change settings, you can return to cmake-gui , reconfigure and regenerate again.
+
+--
+5) Compiling
+
+ You can just open c:/oce-src/Build32/OCE.sln and compile as usual from the IDE.
+ You must compile the Debug configuration and one of the Release ones. 
+ RelWithDebInfo is good because it generates debug symbols while being optimized.
+ 
+ If you use MSVC2010 , you can build from the commandline using a Visual Studio 2010 prompt.
+ 
+ cd \oce-src\Build32
+ msbuild OCE.sln /p:Configuration=Debug
+ msbuild OCE.sln /p:Configuration=RelWithDebInfo
+ 
+ The process could take hours, depending on the system. If you have a multicore machine and MSVC 2010, BEFORE running these commands you can run
+ 
+ SET cl=/MP
+ 
+ the compiler will then use all your cores to compile.
+ 
+ If you get compilation errors, it is likely that you did something wrong in the configure phase. Go back there and make sure that all the libraries
+ are found.
+ 
+6) Installing
+  
+ In CMake+MSVC, INSTALLing means copying just the required files to a designed folder, set by OCE_INSTALL_PREFIX.
+ This include header files, libs, binaries and data files.
+ Object files will be left in the BUILD directory. This means that you can distribute your INSTALL folder and other will be able to use
+ it to compile programs dependent by OCE.
+  
+ Once compiled, from the IDE explicitly compile the "INSTALL" project. 
+ You do this by right-clicking on the project and selecting "Compile".
+ 
+ IMPORTANT : do this once for each Configuration you compiled : Debug and RelWithDebInfo
+ 
+ After the INSTALL phase, we'll find the result in c:\oce-bin\Win32
+ 
+ 6.1) External libs
+  We miss just one piece : unless you have these in your path, copy all the external DLLs in the \bin folder of the installation directory.
+  (remember tcl85.dll too)
+
+  If you used oce-win-bundle, copy the dlls from c:\oce-win-bundle-win32\bin and c:\oce-win-bundle-win32\bind to your c:\oce-bin\Win32\bin forlder.
+ 
+ 6.2) Command line
+   Again, in MSVC2010 command prompt you can run
+    
+   msbuild INSTALL.vcxproj /p:Configuration=Debug 
+   msbuild INSTALL.vcxproj /p:Configuration=RelWithDebInfo 
+   
+   and you will get the same effect.
+
+7) Building for Win64
+  
+  You should do exactly the same step as before, except that 
+   - Use a "Win64" generator in the Configure phase
+   - Use the "win64" oce-win-bundle packages
+   - Install TCL for 64 bit and all your libs compiled for 64bits
+   - Use a Build64 folder in the CMake configuration phase
+   - Installation files will go in OCE_INSTALL_PREFIX/Win64
+   
+8) Building for both Win32 and Win64
+
+  First of all, let's make this clear: CMake doesn't support mixing 32bit and 64bit compilation. 
+  You will have to do all the steps two times, one for win32, one for win64. 
+  Just use a Build32 and Build64 folder, and configure *exactly* in the same way the two projects.
+
+  You CAN use the same OCE_INSTALL_PREFIX, if you configure the two build in the same way. 
+  Otherwise it is better to use different installation folders.
+  You will find the binaries in the OCE_INSTALL_PREFIX/Win32 and OCE_INSTALL_PREFIX/Win64 directories.
+
+9) Final Notes
+
+  9.1) Debug libraries
+    You can avoid to build the debug libraries , but then you won't be able to build projects using oce in debug mode. It is *UNSUPPORTED* and 
+    really not working to link release libraries in debug configurations.
+  9.2) Debug symbols 
+    If you include them in the INSTALL directory, you will be able to see OCE call stacks and local variables. The INSTALL dir will grow in size
+    of about 200MB.
+     
\ No newline at end of file
Index: oce/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/CMakeLists.txt
@@ -0,0 +1,902 @@
+# REQUIREMENTS: this script needs CMake 2.8 or higher. Downloads are available at http://www.cmake.org
+
+# How to build OCE using CMake under Unix (Linux, Darwin etc.)?
+# 1. Copy this file, as-is, to the top-level OCE folder
+# 2. Make a build directory somewhere outside the OCE source tree
+# 3. cmake "relative/path/to/OCE"
+# 4. make
+# 5. make install (or sudo make install)
+
+# How to build OCE using CMake under Windows (Linux, Darwin etc.)?
+# 1. Copy this file, as-is, to the top-level folder
+# 2. Launch the cmake-gui, and select the top-level folder
+# 3. You can choose whatever you want as an install directory
+# 4. Click 'Configure'
+# 5. Choose your generator
+# 6. When configure is achived, you can change the variable with a red background
+# 7. Click 'Generate'
+# 8. From your IDE, open the generated makefile and run the compilation.
+
+PROJECT(OCE)
+
+SET(OCE_VERSION_MAJOR 0)
+SET(OCE_VERSION_MINOR 3)
+SET(OCE_VERSION_PATCH 0)
+
+SET(OCE_VERSION ${OCE_VERSION_MAJOR}.${OCE_VERSION_MINOR}.${OCE_VERSION_PATCH})
+
+SET(OCE_ABI_SOVERSION 0)
+SET(OCE_ABI_VERSION 0.0.0)
+
+# Set the minimum version of cmake required to 2.8
+CMAKE_MINIMUM_REQUIRED( VERSION 2.8 )
+
+# Define helper macro OPTION_WITH_DEFAULT
+MACRO( OPTION_WITH_DEFAULT OPTION_NAME OPTION_STRING OPTION_DEFAULT )
+	IF( NOT DEFINED ${OPTION_NAME} )
+		SET( ${OPTION_NAME} ${OPTION_DEFAULT} )
+	ENDIF( NOT DEFINED ${OPTION_NAME} )
+	OPTION( ${OPTION_NAME} "${OPTION_STRING}" ${${OPTION_NAME}} )
+ENDMACRO( OPTION_WITH_DEFAULT OPTION_NAME OPTION_STRING OPTION_DEFAULT )
+
+IF( "${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.7 )
+	MESSAGE( FATAL_ERROR "CMake >= 2.8.0 required" )
+ENDIF( "${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.7 )
+
+############################
+# Check 32/64 bit platform #
+############################
+IF (${CMAKE_SIZEOF_VOID_P} MATCHES "8") # It is 64bit, otherwise 32 bit systems match 4
+	ADD_DEFINITIONS(-D_OCC64)
+	SET(BIT 64)
+ELSE (${CMAKE_SIZEOF_VOID_P} MATCHES "8")
+	SET(BIT 32)
+ENDIF(${CMAKE_SIZEOF_VOID_P} MATCHES "8")
+
+MESSAGE(STATUS "Build ${BIT}bit")
+
+IF (NOT MSVC)
+	IF( NOT DEFINED ${PROJECT_NAME}_BUILD_TYPE )
+		SET( ${PROJECT_NAME}_BUILD_TYPE "Release" CACHE STRING "Build type" ) # By default set release build
+	ENDIF( NOT DEFINED ${PROJECT_NAME}_BUILD_TYPE )
+	SET( CMAKE_BUILD_TYPE ${${PROJECT_NAME}_BUILD_TYPE} CACHE INTERNAL "Build type,
+		immutable" FORCE )
+ENDIF(NOT MSVC)
+
+IF(CMAKE_BUILD_TOOL STREQUAL "nmake")
+	SET(NMAKE TRUE)
+ENDIF(CMAKE_BUILD_TOOL STREQUAL "nmake")
+
+IF(MSVC)
+	OPTION_WITH_DEFAULT( ${PROJECT_NAME}_INSTALL_PDB_FILES "Install PDB files (debug informations)" ON )
+ENDIF(MSVC)
+
+IF(MSVC)
+	OPTION_WITH_DEFAULT( ${PROJECT_NAME}_USE_BUNDLE "Use OCE Windows Bundle" OFF )
+ENDIF(MSVC)
+
+IF(${PROJECT_NAME}_USE_BUNDLE)
+	OPTION_WITH_DEFAULT( ${PROJECT_NAME}_BUNDLE_AUTOINSTALL "Autoinstall bundle DLLs" ON )
+	MARK_AS_ADVANCED(${PROJECT_NAME}_BUNDLE_AUTOINSTALL)
+ENDIF(${PROJECT_NAME}_USE_BUNDLE)
+
+OPTION_WITH_DEFAULT( ${PROJECT_NAME}_BUILD_SHARED_LIB "Build shared ${PROJECT_NAME} libs" ON )
+IF(NOT MSVC)
+	OPTION_WITH_DEFAULT( ${PROJECT_NAME}_DISABLE_X11 "Disable components requiring X11 support" OFF )
+	IF(NOT APPLE AND NOT WIN32)
+		MARK_AS_ADVANCED(${PROJECT_NAME}_DISABLE_X11)
+	ENDIF(NOT APPLE AND NOT WIN32)
+ENDIF(NOT MSVC)
+OPTION_WITH_DEFAULT( ${PROJECT_NAME}_MODEL "Build model components" ON )
+OPTION_WITH_DEFAULT( ${PROJECT_NAME}_OCAF "Build application framework" ON )
+OPTION_WITH_DEFAULT( ${PROJECT_NAME}_DATAEXCHANGE "Build data exchange" ON )
+OPTION_WITH_DEFAULT( ${PROJECT_NAME}_DRAW "Build test harness \(DRAW\)" OFF )
+OPTION_WITH_DEFAULT( ${PROJECT_NAME}_VISUALISATION "Build visualisation component" ON )
+OPTION_WITH_DEFAULT( ${PROJECT_NAME}_WITH_GL2PS "Build with GL2PS" OFF )
+OPTION_WITH_DEFAULT( ${PROJECT_NAME}_WITH_FREEIMAGE "Build with FreeImage" OFF )
+OPTION_WITH_DEFAULT( ${PROJECT_NAME}_EXTRA_WARNINGS "Enable Maximum Warnings Level" OFF )
+MARK_AS_ADVANCED(${PROJECT_NAME}_EXTRA_WARNINGS)
+OPTION_WITH_DEFAULT( ${PROJECT_NAME}_ADD_HEADERS "Add headers to project files" OFF )
+MARK_AS_ADVANCED(${PROJECT_NAME}_ADD_HEADERS)
+
+IF( NOT DEFINED ${PROJECT_NAME}_MULTITHREAD_LIBRARY)
+	SET( ${PROJECT_NAME}_MULTITHREAD_LIBRARY "NONE" CACHE STRING "(values are: NONE TBB OPENMP)" )
+ENDIF( NOT DEFINED ${PROJECT_NAME}_MULTITHREAD_LIBRARY)
+
+IF( "${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" GREATER 2.8 )
+	SET_PROPERTY(CACHE ${PROJECT_NAME}_MULTITHREAD_LIBRARY PROPERTY STRINGS NONE TBB OPENMP)
+ENDIF( "${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" GREATER 2.8 )
+
+OPTION( ${PROJECT_NAME}_MULTITHREAD_LIBRARY "Multithread library" ${${PROJECT_NAME}_MULTITHREAD_LIBRARY} )
+
+IF( ${PROJECT_NAME}_MULTITHREAD_LIBRARY STREQUAL "TBB" )
+	OPTION_WITH_DEFAULT( ${PROJECT_NAME}_TBB_MALLOC_SUPPORT "Use TBB for memory allocation" ON )
+ENDIF( ${PROJECT_NAME}_MULTITHREAD_LIBRARY STREQUAL "TBB" )
+
+IF( NOT DEFINED ${PROJECT_NAME}_INSTALL_PREFIX )
+	IF( WIN32 )
+		SET(${PROJECT_NAME}_INSTALL_PREFIX
+			"c:/${PROJECT_NAME}-${${PROJECT_NAME}_VERSION}")
+	ELSE( WIN32 )
+		SET(${PROJECT_NAME}_INSTALL_PREFIX
+			"/usr/local")
+	ENDIF( WIN32 )
+ENDIF( NOT DEFINED ${PROJECT_NAME}_INSTALL_PREFIX )
+
+SET( ${PROJECT_NAME}_INSTALL_PREFIX ${${PROJECT_NAME}_INSTALL_PREFIX} CACHE
+	PATH "Install prefix prepended to target to create install location" )
+SET( CMAKE_INSTALL_PREFIX "${${PROJECT_NAME}_INSTALL_PREFIX}" CACHE INTERNAL "Prefix
+	prepended to install directories if target destination is not absolute,
+	immutable" FORCE )
+
+IF( ${PROJECT_NAME}_BUILD_SHARED_LIB )
+	SET( ${PROJECT_NAME}_LIBRARY_TYPE SHARED )
+ELSE( ${PROJECT_NAME}_BUILD_SHARED_LIB )
+	SET( ${PROJECT_NAME}_LIBRARY_TYPE STATIC )
+	IF ( WIN32 )
+		ADD_DEFINITIONS("-DHAVE_NO_DLL")
+	ENDIF( WIN32 )
+ENDIF( ${PROJECT_NAME}_BUILD_SHARED_LIB )
+
+# MSVC specific options
+IF(MSVC_IDE)
+	IF (NOT DEFINED ${PROJECT_NAME}_USE_MSVC_EXPRESS )
+		SET (${PROJECT_NAME}_USE_MSVC_EXPRESS OFF)
+	ENDIF (NOT DEFINED ${PROJECT_NAME}_USE_MSVC_EXPRESS)
+	OPTION( ${PROJECT_NAME}_USE_MSVC_EXPRESS "Use a Visual C++ express IDE"
+		${${PROJECT_NAME}_USE_MSVC_EXPRESS} )
+ENDIF(MSVC_IDE)
+
+#
+# Check components dependencies
+#
+SET(${PROJECT_NAME}_FOUNDATION TRUE)
+IF(NOT ${PROJECT_NAME}_DISABLE_X11 AND (
+		${PROJECT_NAME}_OCAF OR ${PROJECT_NAME}_DATAEXCHANGE OR
+		${PROJECT_NAME}_VISUALISATION OR ${PROJECT_NAME}_DRAW))
+	SET(${PROJECT_NAME}_VISU_DEP TRUE)
+ENDIF(NOT ${PROJECT_NAME}_DISABLE_X11 AND (
+		${PROJECT_NAME}_OCAF OR ${PROJECT_NAME}_DATAEXCHANGE OR
+		${PROJECT_NAME}_VISUALISATION OR ${PROJECT_NAME}_DRAW))
+IF(${PROJECT_NAME}_DISABLE_X11)
+	SET(${PROJECT_NAME}_DRAW OFF CACHE BOOL "Build DRAWEXE" FORCE)
+	SET(${PROJECT_NAME}_VISUALISATION OFF CACHE BOOL "Build visualisation component" FORCE)
+ENDIF(${PROJECT_NAME}_DISABLE_X11)
+
+IF(NOT ${PROJECT_NAME}_BUILD_SHARED_LIB AND ${PROJECT_NAME}_DRAW)
+	SET(${PROJECT_NAME}_DRAW OFF CACHE BOOL "Build DRAWEXE" FORCE)
+	MESSAGE("Warning : DRAW disabled when statically linking")
+ENDIF(NOT ${PROJECT_NAME}_BUILD_SHARED_LIB AND ${PROJECT_NAME}_DRAW)
+
+IF(${PROJECT_NAME}_DRAW AND NOT ${PROJECT_NAME}_DATAEXCHANGE)
+	SET(${PROJECT_NAME}_DATAEXCHANGE ON CACHE BOOL "Build data exchange" FORCE)
+ENDIF(${PROJECT_NAME}_DRAW AND NOT ${PROJECT_NAME}_DATAEXCHANGE)
+IF(${PROJECT_NAME}_DATAEXCHANGE AND NOT ${PROJECT_NAME}_OCAF)
+	SET(${PROJECT_NAME}_OCAF ON CACHE BOOL "Build application framework" FORCE)
+ENDIF(${PROJECT_NAME}_DATAEXCHANGE AND NOT ${PROJECT_NAME}_OCAF)
+IF(${PROJECT_NAME}_OCAF AND NOT ${PROJECT_NAME}_MODEL)
+	SET(${PROJECT_NAME}_MODEL ON CACHE BOOL "Build model components" FORCE)
+ENDIF(${PROJECT_NAME}_OCAF AND NOT ${PROJECT_NAME}_MODEL)
+IF(${PROJECT_NAME}_VISUALISATION AND NOT ${PROJECT_NAME}_MODEL)
+	SET(${PROJECT_NAME}_MODEL ON CACHE BOOL "Build model components" FORCE)
+ENDIF(${PROJECT_NAME}_VISUALISATION AND NOT ${PROJECT_NAME}_MODEL)
+IF(${PROJECT_NAME}_DRAW AND NOT ${PROJECT_NAME}_VISUALISATION)
+	SET(${PROJECT_NAME}_VISUALISATION ON CACHE BOOL "Build visualisation component" FORCE)
+ENDIF(${PROJECT_NAME}_DRAW AND NOT ${PROJECT_NAME}_VISUALISATION)
+
+SET(INSTALL_RESOURCE_FILES)
+FILE(GLOB OS_TCL_SCRIPTS RELATIVE ${${PROJECT_NAME}_SOURCE_DIR} src/OS/*.tcl)
+SET(INSTALL_RESOURCE_FILES ${INSTALL_RESOURCE_FILES}
+	${OS_TCL_SCRIPTS}
+	src/UnitsAPI/Lexi_Expr.dat
+	src/UnitsAPI/Units.dat )
+
+FIND_PACKAGE(Threads)
+IF(${PROJECT_NAME}_MULTITHREAD_LIBRARY STREQUAL "TBB")
+	FIND_PATH(TBB_INCLUDE_DIR tbb/tbb.h DOC "Location of header files for TBB (containing tbb/tbb.h)" ${CMAKE_SYSTEM_INCLUDE_PATH})
+	IF(TBB_INCLUDE_DIR)
+		FIND_LIBRARY( TBB_LIBRARY tbb "Path to the TBB library" )
+		IF (${PROJECT_NAME}_TBB_MALLOC_SUPPORT)
+			FIND_LIBRARY( TBB_MALLOC_LIBRARY tbbmalloc "Path to the TBB MALLOC library")
+		ENDIF (${PROJECT_NAME}_TBB_MALLOC_SUPPORT)
+		IF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
+			FIND_LIBRARY( TBB_LIBRARY_DEBUG tbb_debug "Path to the TBB debug library" )
+			IF (${PROJECT_NAME}_TBB_MALLOC_SUPPORT)
+				FIND_LIBRARY( TBB_MALLOC_LIBRARY_DEBUG tbbmalloc_debug "Path to the TBB MALLOC debug library")
+			ENDIF (${PROJECT_NAME}_TBB_MALLOC_SUPPORT)
+		ENDIF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
+	ENDIF(TBB_INCLUDE_DIR)
+	MARK_AS_ADVANCED(TBB_INCLUDE_DIR TBB_LIBRARY)
+ENDIF(${PROJECT_NAME}_MULTITHREAD_LIBRARY STREQUAL "TBB")
+
+IF(${PROJECT_NAME}_MULTITHREAD_LIBRARY STREQUAL "OPENMP")
+	FIND_PACKAGE(OpenMP)
+ENDIF(${PROJECT_NAME}_MULTITHREAD_LIBRARY STREQUAL "OPENMP")
+
+IF (${PROJECT_NAME}_USE_BUNDLE)
+	FIND_PATH(${PROJECT_NAME}_BUNDLE_ROOT_PATH oce-bundle-root.empty "Path for the OCE-win-bundle")
+ENDIF(${PROJECT_NAME}_USE_BUNDLE)
+
+IF(${PROJECT_NAME}_VISUALISATION)
+	IF(${PROJECT_NAME}_WITH_FREEIMAGE)
+		FIND_PATH(FREEIMAGE_INCLUDE_DIR FreeImagePlus.h DOC "Location of header files for FreeImage" ${CMAKE_SYSTEM_INCLUDE_PATH})
+		IF(FREEIMAGE_INCLUDE_DIR)
+			FIND_LIBRARY( FREEIMAGE_LIBRARY freeimageplus "Path to the freeimage library" )
+	
+			IF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
+				FIND_LIBRARY( FREEIMAGE_LIBRARY_DEBUG freeimageplusd "Path to the freeimage debug library" )
+			ENDIF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
+		ENDIF(FREEIMAGE_INCLUDE_DIR)
+		MARK_AS_ADVANCED(FREEIMAGE_INCLUDE_DIR FREEIMAGE_LIBRARY)
+	ENDIF(${PROJECT_NAME}_WITH_FREEIMAGE)
+
+	IF (NOT WIN32)
+		FIND_PACKAGE(X11 REQUIRED)
+		FIND_LIBRARY( X11_Xmu_LIB Xmu PATHS /usr/openwin/lib )
+		IF( NOT DEFINED X11_FONT_PATH )
+			IF(NOT APPLE)
+				SET(X11_FONT_PATH
+					"/usr/share/X11/fonts"
+					"/usr/share/fonts/X11")
+			ELSE(NOT APPLE)
+				SET(X11_FONT_PATH
+					"/usr/X11/lib/X11/fonts"
+					"/Library/Fonts"
+					"/System/Library/Fonts")
+			ENDIF(NOT APPLE)
+		ENDIF( NOT DEFINED X11_FONT_PATH )
+		SET(X11_FONT_PATH ${X11_FONT_PATH} CACHE PATH
+			"Font directories containing fonts.dir listing files")
+		MARK_AS_ADVANCED(X11_FONT_PATH)
+	ENDIF(NOT WIN32)
+
+	IF (NOT APPLE)
+		FIND_PACKAGE(OpenGL REQUIRED)
+	ELSE (NOT APPLE)
+		# under OSX, builtin FindOpenGl.cmake returns Cocoa OpenGL implementation
+		# oce requires the X11 based OpenGL
+		SET(OPENGL_INCLUDE_DIR /usr/X11R6/include/)
+		SET(OPENGL_LIBRARIES /usr/X11R6/lib/libGL.dylib /usr/X11R6/lib/libGLU.dylib)
+	ENDIF (NOT APPLE)
+
+	## FreeType / FTGL
+	IF(NOT ${PROJECT_NAME}_USE_BUNDLE)
+		FIND_PACKAGE(Freetype REQUIRED)
+	ELSE (NOT ${PROJECT_NAME}_USE_BUNDLE)
+		FIND_LIBRARY(FREETYPE_LIBRARY freetype)
+	ENDIF(NOT ${PROJECT_NAME}_USE_BUNDLE)
+
+	FIND_PATH(FTGL_V212_INCLUDE_DIR FTGL/FTFace.h DOC "Location of header files for FTGL 2.1.2" ${CMAKE_SYSTEM_INCLUDE_PATH})
+	FIND_PATH(FTGL_INCLUDE_DIR FTGL/ftgl.h "Location of header files for FTGL > 2.1.2" ${CMAKE_SYSTEM_INCLUDE_PATH})
+	IF(NOT FTGL_V212_INCLUDE_DIR AND FTGL_INCLUDE_DIR)
+		ADD_DEFINITIONS(-DHAVE_FTGL_NEWER212)
+	ENDIF(NOT FTGL_V212_INCLUDE_DIR AND FTGL_INCLUDE_DIR)
+	FIND_LIBRARY(FTGL_LIBRARY ftgl "Location of ftgl library (any version)")
+	IF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
+		FIND_LIBRARY(FTGL_LIBRARY_DEBUG ftgld "Location of ftgl debug library (any version)")
+		FIND_LIBRARY(FREETYPE_LIBRARY_DEBUG freetyped "Location of freetype debug library")
+	ENDIF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
+	MARK_AS_ADVANCED(X11_Xmu_LIB FTGL_V212_INCLUDE_DIR FTGL_INCLUDE_DIR FTGL_LIBRARY)
+
+	## GL2PS
+	IF(${PROJECT_NAME}_WITH_GL2PS)
+		FIND_PATH(GL2PS_INCLUDE_DIR gl2ps.h DOC "Location of header files for GL2PS (containing gl2ps.h)" ${CMAKE_SYSTEM_INCLUDE_PATH})
+		IF(GL2PS_INCLUDE_DIR)
+			FIND_LIBRARY( GL2PS_LIBRARY gl2ps "Path to the gl2ps library" )
+			IF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
+				FIND_LIBRARY( GL2PS_LIBRARY_DEBUG gl2psd "Path to the gl2ps debug library" )
+			ENDIF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
+		ENDIF(GL2PS_INCLUDE_DIR)
+		MARK_AS_ADVANCED(GL2PS_INCLUDE_DIR GL2PS_LIBRARY)
+	ENDIF(${PROJECT_NAME}_WITH_GL2PS)
+
+	MESSAGE(STATUS "X11 LIBS: ${X11_LIBRARIES}")
+	MESSAGE(STATUS "OPENGL LIBS: ${OPENGL_LIBRARIES}")
+	MESSAGE(STATUS "FREETYPE LIBS: ${FREETYPE_LIBRARIES}")
+	MESSAGE(STATUS "FREETYPE INCLUDES: ${FREETYPE_INCLUDE_DIRS}")
+	MESSAGE(STATUS "THREAD LIB: ${CMAKE_THREAD_LIBS_INIT}")
+
+	FILE(GLOB TEXTURES_RGB_FILES RELATIVE ${${PROJECT_NAME}_SOURCE_DIR} src/Textures/*.rgb)
+	FILE(GLOB FONTMFT_MFT_FILES RELATIVE ${${PROJECT_NAME}_SOURCE_DIR} src/FontMFT/*.mft)
+	SET(INSTALL_RESOURCE_FILES ${INSTALL_RESOURCE_FILES} ${FONTMFT_MFT_FILES} ${TEXTURES_RGB_FILES})
+ENDIF(${PROJECT_NAME}_VISUALISATION)
+
+IF(${PROJECT_NAME}_OCAF)
+	FILE(GLOB XMLOCAFRESOURCE_XSD_FILES RELATIVE ${${PROJECT_NAME}_SOURCE_DIR} src/XmlOcafResource/*.xsd)
+	SET(INSTALL_RESOURCE_FILES ${INSTALL_RESOURCE_FILES}
+		${XMLOCAFRESOURCE_XSD_FILES}
+		src/StdResource/MDTV-Standard.xwd
+		src/StdResource/Plugin
+		src/StdResource/Standard
+		src/StdResource/Standard.us
+		src/StdResource/StandardLite
+		src/StdResource/TObj
+		src/StdResource/XCAF
+		src/StdResource/dftree.tcl )
+ENDIF(${PROJECT_NAME}_OCAF)
+
+IF(${PROJECT_NAME}_DATAEXCHANGE)
+	SET(INSTALL_RESOURCE_FILES ${INSTALL_RESOURCE_FILES}
+		src/SHMessage/SHAPE.fr
+		src/SHMessage/SHAPE.us
+		src/XSMessage/IGES.fr
+		src/XSMessage/IGES.us
+		src/XSMessage/XSTEP.fr
+		src/XSMessage/XSTEP.us
+		src/XSTEPResource/IGES
+		src/XSTEPResource/STEP )
+ENDIF(${PROJECT_NAME}_DATAEXCHANGE)
+
+IF(${PROJECT_NAME}_DRAW)
+	IF (NOT APPLE)
+		FIND_PACKAGE(TCL REQUIRED)
+	ELSE(NOT APPLE)
+		# under OSX, should use a X11 based TCL/TK, for instance fink's implementation
+		SET(FINK_INSTALL_PATH /sw)
+		MARK_AS_ADVANCED(FINK_INSTALL_PATH)
+		SET(TCL_LIBRARY ${FINK_INSTALL_PATH}/lib/libtcl.dylib)
+		SET(TCL_INCLUDE_PATH ${FINK_INSTALL_PATH}/include)
+		SET(TCL_TCLSH ${FINK_INSTALL_PATH}/bin/tclsh)
+		SET(TK_LIBRARY ${FINK_INSTALL_PATH}/lib/libtk.dylib)
+		SET(TK_INCLUDE_PATH ${FINK_INSTALL_PATH}/include)
+		SET(TK_WISH ${FINK_INSTALL_PATH}/bin/wish)
+		MARK_AS_ADVANCED(TCL_INCLUDE_PATH TK_INCLUDE_PATH TCL_LIBRARY TK_LIBRARY)
+	ENDIF(NOT APPLE)
+	MESSAGE(STATUS "TCL LIB: ${TCL_LIBRARY}")
+	MESSAGE(STATUS "TK LIB: ${TK_LIBRARY}")
+	FILE(GLOB DRAWRESOURCES_TCL_FILES RELATIVE ${${PROJECT_NAME}_SOURCE_DIR} src/DrawResources/*.tcl)
+	SET(INSTALL_RESOURCE_FILES ${INSTALL_RESOURCE_FILES}
+		${DRAWRESOURCES_TCL_FILES}
+		src/DrawResources/DRAW.doc
+		src/DrawResources/DRAW.info
+		src/DrawResources/DrawPlugin
+		src/DrawResources/demo
+		src/DrawResources/demo.bat
+		src/DrawResources/idoc
+		src/DrawResources/lamp.ico
+		src/DrawResources/mdltest
+		src/DrawResources/mkdoc
+		src/DrawResources/tdoc
+		src/DrawResources/test2xl
+		src/DrawResources/vmdltest
+		src/DrawResources/wing.brep )
+ENDIF(${PROJECT_NAME}_DRAW)
+
+IF (${PROJECT_NAME}_USE_BUNDLE AND ${PROJECT_NAME}_BUNDLE_ROOT_PATH)
+	MESSAGE("Using OCE Bundle")
+	IF (${PROJECT_NAME}_VISUALISATION)
+		SET(FTGL_INCLUDE_DIR ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/include/FTGL CACHE PATH "" FORCE)
+		SET(FREETYPE_INCLUDE_DIR_freetype2 ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/include/freetype CACHE PATH "" FORCE)
+		SET(FREETYPE_INCLUDE_DIR_ft2build ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/include/freetype CACHE PATH "" FORCE)
+		SET(FREETYPE_INCLUDE_DIRS ${FREETYPE_INCLUDE_DIR_freetype2} ${FREETYPE_INCLUDE_DIR_ft2build})
+		SET(FREETYPE_LIBRARY ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/lib/freetype.lib CACHE FILEPATH "" FORCE)
+		SET(FREETYPE_LIBRARIES ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/lib/freetype.lib CACHE FILEPATH "" FORCE)
+		SET(FREETYPE_LIBRARY_DEBUG ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/libd/freetyped.lib CACHE FILEPATH "" FORCE)
+		SET(FTGL_LIBRARY ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/lib/ftgl.lib CACHE FILEPATH "" FORCE)
+		SET(FTGL_LIBRARY_DEBUG ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/libd/ftgld.lib CACHE FILEPATH "" FORCE)
+		ADD_DEFINITIONS(-DHAVE_FTGL_NEWER212)
+
+		IF(${PROJECT_NAME}_WITH_GL2PS)
+			SET(GL2PS_LIBRARY ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/lib/gl2ps.lib CACHE FILEPATH "" FORCE)
+			SET(GL2PS_LIBRARY_DEBUG ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/libd/gl2psd.lib CACHE FILEPATH "" FORCE)
+			SET(GL2PS_INCLUDE_DIR ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/include/gl2ps CACHE PATH "" FORCE)
+		ENDIF(${PROJECT_NAME}_WITH_GL2PS)
+
+		IF(${PROJECT_NAME}_WITH_FREEIMAGE)
+			SET(FREEIMAGE_LIBRARY ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/lib/FreeImage.lib CACHE FILEPATH "" FORCE)
+			SET(FREEIMAGE_LIBRARY_DEBUG ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/libd/FreeImaged.lib CACHE FILEPATH "" FORCE)
+			SET(FREEIMAGE_INCLUDE_DIR ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/include/FreeImage CACHE PATH "" FORCE)
+		ENDIF(${PROJECT_NAME}_WITH_FREEIMAGE)
+	ENDIF (${PROJECT_NAME}_VISUALISATION)
+ENDIF(${PROJECT_NAME}_USE_BUNDLE AND ${PROJECT_NAME}_BUNDLE_ROOT_PATH)
+
+IF(MSVC)
+	SET( CMAKE_DEBUG_POSTFIX "d" )
+ENDIF(MSVC)
+
+INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR}/build_inc
+	${CMAKE_CURRENT_SOURCE_DIR}/inc)
+
+###################################
+# Architecture-specific libraries #
+###################################
+IF(WIN32)
+	SET(LM)
+	SET(CSF_gdi32_LIB gdi32)
+	SET(CSF_advapi32_LIB advapi32)
+	SET(CSF_user32_LIB user32)
+	SET(CSF_kernel32_LIB kernel32)
+	SET(CSF_SOCKETLibs_LIB ws2_32)
+	SET(CSF_wsock32_LIB ws2_32)
+ELSE(WIN32)
+	SET(LM "-lm")
+	SET(WIN32_LIBS "")
+	SET(CSF_gdi32_LIB "")
+	SET(CSF_advapi32_LIB "")
+	SET(CSF_user32_LIB "")
+	SET(CSF_kernel32_LIB "")
+	SET(CSF_SOCKETLibs_LIB "")
+	SET(CSF_wsock32_LIB "")
+ENDIF(WIN32)
+
+###################################################
+# Check required headers, functions and libraries #
+###################################################
+IF (NOT WIN32)
+	# Check headers
+	# I think these should all be check cxx headers, as I think there is no c
+	# compilation anywhere in ${PROJECT_NAME}
+	INCLUDE(CheckIncludeFile)
+	#INCLUDE(CheckIncludeFiles)
+	CHECK_INCLUDE_FILE(string.h HAVE_STRING_H)
+	CHECK_INCLUDE_FILE(dlfcn.h HAVE_DLFCN_H)
+	CHECK_INCLUDE_FILE(dl.h HAVE_DL_H)
+	CHECK_INCLUDE_FILE(ieeefp.h HAVE_IEEEFP_H)
+	CHECK_INCLUDE_FILE(time.h HAVE_TIME_H)
+	CHECK_INCLUDE_FILE(sys/time.h HAVE_SYS_TIME_H)
+	CHECK_INCLUDE_FILE(pwd.h HAVE_PWD_H)
+	CHECK_INCLUDE_FILE(sys/statvfs.h HAVE_SYS_STATVFS_H)
+	CHECK_INCLUDE_FILE(sys/vfs.h HAVE_SYS_VFS_H)
+	CHECK_INCLUDE_FILE(sys/param.h HAVE_SYS_PARAM_H)
+	CHECK_INCLUDE_FILE(osfcn.h HAVE_OSFCN_H)
+	CHECK_INCLUDE_FILE(netdb.h HAVE_NETDB_H)
+	CHECK_INCLUDE_FILE(sys/ioctl.h HAVE_SYS_IOCTL_H)
+	CHECK_INCLUDE_FILE(net/if.h HAVE_NET_IF_H)
+	CHECK_INCLUDE_FILE(sys/systeminfo.h HAVE_SYS_SYSTEMINFO_H)
+	CHECK_INCLUDE_FILE(sys/utsname.h HAVE_SYS_UTSNAME_H)
+	CHECK_INCLUDE_FILE(sysent.h HAVE_SYSENT_H)
+	CHECK_INCLUDE_FILE(unistd.h HAVE_UNISTD_H)
+	CHECK_INCLUDE_FILE(sys/unistd.h HAVE_SYS_UNISTD_H)
+	CHECK_INCLUDE_FILE(sys/socket.h HAVE_SYS_SOCKET_H)
+	CHECK_INCLUDE_FILE(ndir.h HAVE_NDIR_H)
+	CHECK_INCLUDE_FILE(sys/ndir.h HAVE_SYS_NDIR_H)
+	CHECK_INCLUDE_FILE(sys/dir.h HAVE_SYS_DIR_H)
+	CHECK_INCLUDE_FILE(signal.h HAVE_SIGNAL_H)
+	CHECK_INCLUDE_FILE(sys/signal.h HAVE_SYS_SIGNAL_H)
+	CHECK_INCLUDE_FILE(sigfpe.h HAVE_SIGFPE_H)
+	CHECK_INCLUDE_FILE(floatingpoint.h HAVE_FLOATINGPOINT_H)
+	CHECK_INCLUDE_FILE(sys/machsig.h HAVE_SYS_MACHSIG_H)
+	CHECK_INCLUDE_FILE(sys/siginfo.h HAVE_SYS_SIGINFO_H)
+	CHECK_INCLUDE_FILE(malloc.h HAVE_MALLOC_H)
+	CHECK_INCLUDE_FILE(strings.h HAVE_STRINGS_H)
+	CHECK_INCLUDE_FILE(sys/stat.h HAVE_SYS_STAT_H)
+	CHECK_INCLUDE_FILE(sys/sem.h HAVE_SYS_SEM_H)
+	CHECK_INCLUDE_FILE(sys/ipc.h HAVE_SYS_IPC_H)
+	CHECK_INCLUDE_FILE(sys/times.h HAVE_SYS_TIMES_H)
+	CHECK_INCLUDE_FILE(dirent.h HAVE_DIRENT_H)
+	INCLUDE(CheckIncludeFileCXX)
+	CHECK_INCLUDE_FILE_CXX(iomanip.h OCE_HAVE_IOMANIP_H)
+	CHECK_INCLUDE_FILE_CXX(limits OCE_HAVE_LIMITS)
+	CHECK_INCLUDE_FILE_CXX(climits OCE_HAVE_CLIMITS)
+	CHECK_INCLUDE_FILE_CXX(limits.h OCE_HAVE_LIMITS_H)
+	CHECK_INCLUDE_FILE_CXX(values.h HAVE_VALUES_H)
+	CHECK_INCLUDE_FILE_CXX(fstream OCE_HAVE_FSTREAM)
+	CHECK_INCLUDE_FILE_CXX(ios HAVE_IOS)
+	CHECK_INCLUDE_FILE_CXX(iomanip OCE_HAVE_IOMANIP)
+	CHECK_INCLUDE_FILE_CXX(iostream OCE_HAVE_IOSTREAM)
+	CHECK_INCLUDE_FILE_CXX(fstream.h OCE_HAVE_FSTREAM_H)
+	CHECK_INCLUDE_FILE_CXX(ios.h HAVE_IOS_H)
+	CHECK_INCLUDE_FILE_CXX(iostream.h OCE_HAVE_IOSTREAM_H)
+	CHECK_INCLUDE_FILE_CXX(stdlib.h HAVE_STDLIB_H)
+	CHECK_INCLUDE_FILE_CXX(sys/types.h HAVE_SYS_TYPES_H)
+	CHECK_INCLUDE_FILE_CXX(sys/select.h HAVE_SYS_SELECT_H)
+	CHECK_INCLUDE_FILE_CXX(X11/extensions/readdisplay.h HAVE_X11_EXTENSIONS_READDISPLAY_H)
+	CHECK_INCLUDE_FILE_CXX(X11/extensions/multibuf.h HAVE_X11_EXTENSIONS_MULTIBUF_H)
+	CHECK_INCLUDE_FILE_CXX(sys/filio.h HAVE_SYS_FILIO_H)
+	CHECK_INCLUDE_FILE_CXX(sys/mman.h HAVE_SYS_MMAN_H)
+	CHECK_INCLUDE_FILE_CXX(libc.h HAVE_LIBC_H)
+	# Check library functions
+	INCLUDE(CheckFunctionExists)
+	CHECK_FUNCTION_EXISTS(alloca HAVE_ALLOCA)
+	CHECK_FUNCTION_EXISTS(memcmp HAVE_MEMCMP)
+	CHECK_FUNCTION_EXISTS(signal HAVE_SIGNAL)
+	CHECK_FUNCTION_EXISTS(statfs HAVE_STATFS)
+	CHECK_FUNCTION_EXISTS(statvfs HAVE_STATVFS)
+	CHECK_FUNCTION_EXISTS(finite HAVE_FINITE)
+	CHECK_FUNCTION_EXISTS(localtime_r HAVE_LOCALTIME_R)
+	SET(CMAKE_REQUIRED_LIBRARIES sunmath)
+	CHECK_FUNCTION_EXISTS(ieee_handler HAVE_SUNMATH)
+	SET(CMAKE_REQUIRED_LIBRARIES)
+	INCLUDE(CheckTypeSize)
+	SET(CMAKE_EXTRA_INCLUDE_FILES sys/time.h)
+	CHECK_TYPE_SIZE(tm TM_IN_SYS_TIME)
+	SET(CMAKE_EXTRA_INCLUDE_FILES)
+	INCLUDE (CheckCSourceCompiles)
+	CHECK_C_SOURCE_COMPILES("
+		#include <sys/time.h>
+		#include <sys/sem.h>
+		int main(){union semun c;return 0;}
+		"
+		SEMUN_DEFINED)
+	IF (SEMUN_DEFINED)
+		CHECK_C_SOURCE_COMPILES("
+			#include <sys/time.h>
+			#include <sys/sem.h>
+			int main(){union semun c;c.__buf = 0;return 0;}
+			"
+			SEMUN_BUF_DEFINED)
+	ENDIF (SEMUN_DEFINED)
+	CHECK_C_SOURCE_COMPILES("
+		#include <sys/sem.h>
+		static struct sembuf event_flag;
+		int main(){int status; int *semid;status = semop(*semid,event_flag,1);return 0;}
+		"
+		SEMOP_NO_REFERENCE)
+
+	CHECK_C_SOURCE_COMPILES("
+		#include <sys/sem.h>
+		int get_semaphore(int *semid,int *event,int *value)
+		{
+			int status;
+			status = semctl((*semid),*event,GETVAL,value);
+			return 0;
+		}
+		int main(){ int *a,*b,*c;
+		if(get_semaphore(a,b,c))
+			return 0;
+		return 0;}
+		"
+		SEMCTL_NO_REFERENCE)
+
+	INCLUDE (CheckCXXSourceCompiles)
+	CHECK_CXX_SOURCE_COMPILES("
+		#include <ios>
+		int main(){static const int input = (std::ios::in)|(std::ios::nocreate);
+		static const int output = (std::ios::out);return 0;}
+		"
+		DEF_IOS_OK)
+	CHECK_CXX_SOURCE_COMPILES("
+		#include <iostream>
+		int main(){std::cout << std::cout.form(\"%9.3e\", 3.14159627e-4) << std::endl;return 0;}
+		"
+		OSTREAM_FORM_OK)
+	INCLUDE(TestBigEndian)
+	TEST_BIG_ENDIAN(WORDS_BIGENDIAN)
+	SET(STDC_HEADERS TRUE) # Only for really old systems, being lazy
+	SET(STACK_DIRECTION 0) # Don't have a test for this, TODO?
+
+# TODO: check all headers/functions/libraries that are checked in configure.ac original OCC script
+ENDIF(NOT WIN32)
+
+#######################################################
+# Check platforms - Define specific compilation flags #
+#######################################################
+IF(UNIX)
+	IF(APPLE)
+		######### MacOSX ###########
+		MESSAGE(STATUS "MacOSX platform detected")
+		SET(PLATFORM Darwin)
+	ELSE(APPLE)
+		######### Unix/Linux ###########
+		MESSAGE(STATUS "Unix/Linux platform detected")
+		SET(PLATFORM Unix)
+	ENDIF(APPLE)
+	ADD_DEFINITIONS(-DHAVE_CONFIG_H -DCSFDB -DOCC_CONVERT_SIGNALS)
+ELSE(UNIX)
+	IF(WIN32)
+		######### Windows ###########
+		MESSAGE(STATUS "Windows system detected")
+		ADD_DEFINITIONS(-DWNT -DWIN32 -D_WINDOWS -DCSFDB -DHAVE_CONFIG_H )
+		SET(PLATFORM win)
+	ELSE(WIN32)
+		MESSAGE(STATUS "Unknown platform")
+	ENDIF(WIN32)
+ENDIF(UNIX)
+# TODO: better detection of different Unices (Linux, Solaris etc.)
+# TODO: add CXX compiler flags for each platform
+
+# Enable Extra warnings for each compiler
+IF( ${PROJECT_NAME}_EXTRA_WARNINGS)
+	IF(MSVC)
+		ADD_DEFINITIONS("/W4 /wd4100 /wd4206 /wd4127")
+	ENDIF(MSVC)
+	IF(CMAKE_COMPILER_IS_GNUCXX)
+		ADD_DEFINITIONS("-Wall -Wextra")
+	ENDIF(CMAKE_COMPILER_IS_GNUCXX)
+	IF(BORLAND)
+		#TODO
+	ENDIF(BORLAND)
+ENDIF(${PROJECT_NAME}_EXTRA_WARNINGS)
+
+################################################
+# Define output path for generated libraries:  #
+# platform/compiler-build_type-bits            #
+# for instance:                                #
+#     ./win32/bin/vc7.1-release-64             #
+#     ./win32/bin/vc9-debug-32                 #
+#     ./Unix/i386-debug-64                     #
+################################################
+IF(WIN32)
+	IF(MSVC) # The compiler used is MSVC
+		MESSAGE(STATUS "Found MSVC compiler: ${MSVC} ${MSVC_VERSION}")
+	ELSE(MSVC)
+		SET(LIBRARY_OUTPUT_PATH win${BIT}/bin/${CMAKE_BUILD_TYPE})
+	ENDIF(MSVC)
+ELSE(WIN32)
+	SET(LIBRARY_OUTPUT_PATH ${PLATFORM}/${CMAKE_SYSTEM_PROCESSOR}-${CMAKE_BUILD_TYPE}-${BIT})
+ENDIF(WIN32)
+MESSAGE(STATUS "output_path: ${LIBRARY_OUTPUT_PATH}")
+
+# TODO: under win32/64, dlls and libs should not be in the same path (non MSVC)
+
+IF(MINGW)
+	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mthreads")
+	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mthreads")
+	SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -mthreads -Wl,--export-all-symbols")
+	SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -mthreads -Wl,--export-all-symbols")
+	# For the file Message_MsgFile.cxx of TKernel we must additionally set the __TCollection_DLL define to resolve the needed HashCode() method
+	SET_SOURCE_FILES_PROPERTIES("src/Message/Message_MsgFile.cxx" PROPERTIES COMPILE_FLAGS "-D__Message_DLL -D__TCollection_DLL")
+ENDIF(MINGW)
+
+# DISABLE SECURE CRT WARNINGS AND OTHER MS CRT SPECIFC THINGS
+IF (MSVC)
+	ADD_DEFINITIONS("/D_CRT_SECURE_NO_WARNINGS")
+	ADD_DEFINITIONS("/D_CRT_NONSTDC_NO_WARNINGS")
+ENDIF(MSVC)
+
+IF(MSVC_IDE)
+	IF(NOT ${PROJECT_NAME}_USE_MSVC_EXPRESS)
+		#Use solution folders.
+		SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)
+		SET(USE_SOLUTION_FOLDERS TRUE)
+	ELSE( NOT ${PROJECT_NAME}_USE_MSVC_EXPRESS)
+		SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS OFF)
+	ENDIF( NOT ${PROJECT_NAME}_USE_MSVC_EXPRESS)
+ENDIF(MSVC_IDE)
+
+# Libraries are installed by default in /usr/local/lib on UNIX
+# based platforms and c:/${PROJECT_NAME}-VERSION/Win[32|64]/lib on windows based
+# platforms
+
+IF(WIN32)
+	SET(_PSUFFIX "Win${BIT}/")
+ELSE(WIN32)
+	SET(_PSUFFIX "")
+ENDIF(WIN32)
+STRING(TOLOWER ${PROJECT_NAME} PROJECT_NAME_LOWERCASE)
+
+# Binaries
+IF(NOT DEFINED ${PROJECT_NAME}_INSTALL_BIN_DIR)
+	SET(${PROJECT_NAME}_INSTALL_BIN_DIR ${_PSUFFIX}bin)
+ENDIF(NOT DEFINED ${PROJECT_NAME}_INSTALL_BIN_DIR)
+
+IF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
+	IF(NOT DEFINED ${PROJECT_NAME}_INSTALL_BIN_DEBUG_DIR)
+		SET(${PROJECT_NAME}_INSTALL_BIN_DEBUG_DIR ${_PSUFFIX}bind)
+	ENDIF(NOT DEFINED ${PROJECT_NAME}_INSTALL_BIN_DEBUG_DIR)
+ENDIF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
+
+# Libraries
+IF(NOT DEFINED ${PROJECT_NAME}_INSTALL_LIB_DIR)
+	SET(${PROJECT_NAME}_INSTALL_LIB_DIR ${_PSUFFIX}lib)
+ENDIF(NOT DEFINED ${PROJECT_NAME}_INSTALL_LIB_DIR)
+
+IF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
+	IF(NOT DEFINED ${PROJECT_NAME}_INSTALL_LIB_DEBUG_DIR)
+		SET(${PROJECT_NAME}_INSTALL_LIB_DEBUG_DIR ${_PSUFFIX}libd)
+	ENDIF(NOT DEFINED ${PROJECT_NAME}_INSTALL_LIB_DEBUG_DIR)
+ENDIF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
+
+IF(MSVC)
+	IF(NOT DEFINED ${PROJECT_NAME}_INSTALL_PACKAGE_LIB_DIR)
+		SET(${PROJECT_NAME}_INSTALL_PACKAGE_LIB_DIR ${${PROJECT_NAME}_INSTALL_LIB_DIR})
+		IF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
+			SET(${PROJECT_NAME}_INSTALL_PACKAGE_LIB_DEBUG_DIR ${${PROJECT_NAME}_INSTALL_LIB_DEBUG_DIR})
+		ENDIF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
+	ENDIF(NOT DEFINED ${PROJECT_NAME}_INSTALL_PACKAGE_LIB_DIR)
+ELSE(MSVC)
+	IF(NOT DEFINED ${PROJECT_NAME}_INSTALL_PACKAGE_LIB_DIR)
+		SET(${PROJECT_NAME}_INSTALL_PACKAGE_LIB_DIR lib/${PROJECT_NAME_LOWERCASE}-${${PROJECT_NAME}_VERSION})
+	ENDIF(NOT DEFINED ${PROJECT_NAME}_INSTALL_PACKAGE_LIB_DIR)
+ENDIF(MSVC)
+
+# Includes
+IF(NOT DEFINED ${PROJECT_NAME}_INSTALL_INCLUDE_DIR)
+	SET(${PROJECT_NAME}_INSTALL_INCLUDE_DIR include/${PROJECT_NAME_LOWERCASE})
+ENDIF(NOT DEFINED ${PROJECT_NAME}_INSTALL_INCLUDE_DIR)
+
+# Scripts
+IF(NOT DEFINED ${PROJECT_NAME}_INSTALL_SCRIPT_DIR)
+	SET(${PROJECT_NAME}_INSTALL_SCRIPT_DIR ${${PROJECT_NAME}_INSTALL_PACKAGE_LIB_DIR})
+ENDIF(NOT DEFINED ${PROJECT_NAME}_INSTALL_SCRIPT_DIR)
+
+# Data
+IF(NOT DEFINED ${PROJECT_NAME}_INSTALL_DATA_DIR)
+	IF(NOT MSVC)
+		SET(${PROJECT_NAME}_INSTALL_DATA_DIR share/${PROJECT_NAME_LOWERCASE}-${${PROJECT_NAME}_VERSION})
+	ELSE ()
+		SET(${PROJECT_NAME}_INSTALL_DATA_DIR "share/${PROJECT_NAME_LOWERCASE}")
+	ENDIF(NOT MSVC)
+ENDIF(NOT DEFINED ${PROJECT_NAME}_INSTALL_DATA_DIR)
+# Absolute path, written into oce-config.h
+SET(${PROJECT_NAME}_ABSPATH_DATA_DIR ${CMAKE_INSTALL_PREFIX}/${${PROJECT_NAME}_INSTALL_DATA_DIR})
+
+# CMake
+IF(NOT DEFINED ${PROJECT_NAME}_INSTALL_CMAKE_DATA_DIR)
+	#  See http://www.cmake.org/cmake/help/cmake-2-8-docs.html#command:find_package
+	#  and the definition of ${PROJECT_NAME}_INSTALL_PREFIX at the beginning.
+	#  CMake files are installed under INSTALL_PREFIX/INSTALL_CMAKE_DATA_DIR.
+	IF(WIN32)
+		SET(${PROJECT_NAME}_INSTALL_CMAKE_DATA_DIR cmake)
+	ELSE(WIN32)
+		IF(APPLE)
+			SET(${PROJECT_NAME}_INSTALL_CMAKE_DATA_DIR
+				${PROJECT_NAME}.framework/Versions/${${PROJECT_NAME}_VERSION}/Resources)
+		ELSE(APPLE)
+			SET(${PROJECT_NAME}_INSTALL_CMAKE_DATA_DIR
+				lib/${PROJECT_NAME_LOWERCASE}-${${PROJECT_NAME}_VERSION})
+		ENDIF(APPLE)
+	ENDIF(WIN32)
+ENDIF(NOT DEFINED ${PROJECT_NAME}_INSTALL_CMAKE_DATA_DIR)
+FILE(RELATIVE_PATH ${PROJECT_NAME}_CMAKE_DATA_TO_INCLUDE_RELATIVE_DIR "${CMAKE_INSTALL_PREFIX}/${${PROJECT_NAME}_INSTALL_CMAKE_DATA_DIR}" "${CMAKE_INSTALL_PREFIX}/${${PROJECT_NAME}_INSTALL_INCLUDE_DIR}")
+
+FOREACH(RESOURCE_FILE ${INSTALL_RESOURCE_FILES})
+	GET_FILENAME_COMPONENT(RESOURCE_PATH ${RESOURCE_FILE} PATH)
+	INSTALL(FILES ${RESOURCE_FILE}
+		DESTINATION ${${PROJECT_NAME}_INSTALL_DATA_DIR}/${RESOURCE_PATH})
+ENDFOREACH(RESOURCE_FILE ${INSTALL_RESOURCE_FILES})
+
+CONFIGURE_FILE( ${${PROJECT_NAME}_SOURCE_DIR}/env.sh.cmake
+	${${PROJECT_NAME}_BINARY_DIR}/env.sh @ONLY )
+CONFIGURE_FILE( ${${PROJECT_NAME}_SOURCE_DIR}/env.csh.cmake
+	${${PROJECT_NAME}_BINARY_DIR}/env.csh @ONLY )
+
+IF(WIN32)
+	SET(ENV_SCRIPTS
+		${${PROJECT_NAME}_SOURCE_DIR}/env.bat
+		${${PROJECT_NAME}_SOURCE_DIR}/env_build.bat
+		${${PROJECT_NAME}_SOURCE_DIR}/msvc.bat
+	)
+ELSE(WIN32)
+	SET(ENV_SCRIPTS
+		${${PROJECT_NAME}_BINARY_DIR}/env.csh
+		${${PROJECT_NAME}_BINARY_DIR}/env.sh
+	)
+ENDIF(WIN32)
+INSTALL(FILES ${ENV_SCRIPTS}
+	DESTINATION ${${PROJECT_NAME}_INSTALL_SCRIPT_DIR})
+
+FILE(GLOB header_files ${${PROJECT_NAME}_SOURCE_DIR}/inc/*.*)
+INSTALL(FILES ${header_files}
+	DESTINATION ${${PROJECT_NAME}_INSTALL_INCLUDE_DIR} COMPONENT Development
+)
+
+SET(OCE_INSTALL_DATA_DIR ${${PROJECT_NAME}_INSTALL_DATA_DIR})
+IF (NOT MSVC) 
+   SET(OCE_DEFAULT_CSF_GraphicShr ${${PROJECT_NAME}_INSTALL_PREFIX}/${${PROJECT_NAME}_INSTALL_LIB_DIR}/${CMAKE_SHARED_LIBRARY_PREFIX}TKOpenGl${CMAKE_SHARED_LIBRARY_SUFFIX})
+ELSE()
+   SET(OCE_DEFAULT_CSF_GraphicShr ${CMAKE_SHARED_LIBRARY_PREFIX}TKOpenGl)
+ENDIF(NOT MSVC)
+
+#this is the header used to build OCE
+CONFIGURE_FILE( ${CMAKE_CURRENT_SOURCE_DIR}/oce_build_config.h.cmake
+	${CMAKE_CURRENT_BINARY_DIR}/build_inc/oce-config.h )
+INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/build_inc/oce-config.h
+	RENAME oce_build_config.defs
+	DESTINATION ${${PROJECT_NAME}_INSTALL_INCLUDE_DIR} COMPONENT Development )
+
+#this is the header that is installed on the system
+CONFIGURE_FILE( ${CMAKE_CURRENT_SOURCE_DIR}/oce_install_config.h.cmake
+	${CMAKE_CURRENT_BINARY_DIR}/install_inc/oce-config.h )
+INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/install_inc/oce-config.h
+		DESTINATION ${${PROJECT_NAME}_INSTALL_INCLUDE_DIR} COMPONENT Development )
+
+IF(${PROJECT_NAME}_DRAW)
+	CONFIGURE_FILE( ${CMAKE_CURRENT_SOURCE_DIR}/DrawDefault.cmake
+		${CMAKE_CURRENT_BINARY_DIR}/DrawDefault @ONLY )
+	INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/DrawDefault
+		DESTINATION ${${PROJECT_NAME}_INSTALL_DATA_DIR}/src/DrawResources)
+ENDIF(${PROJECT_NAME}_DRAW)
+
+# Version information
+CONFIGURE_FILE (${CMAKE_CURRENT_SOURCE_DIR}/Version.rc.cmake
+				${CMAKE_CURRENT_BINARY_DIR}/Version.rc)
+
+MACRO(PROCESS_MODULE modulename modules_std)
+	set(modules ${modules_std})
+	IF(NOT ${PROJECT_NAME}_DISABLE_X11)
+		LIST(APPEND modules ${ARGN})
+	ENDIF(NOT ${PROJECT_NAME}_DISABLE_X11)
+	FOREACH(module ${modules})
+		LIST(APPEND ${PROJECT_NAME}_LIBRARIES ${module})
+		SET(TOOLKIT_MODULES "")
+		SET(TOOLKIT_DEPENDS "")
+		SET(TOOLKIT_INCLUDE_DIRECTORIES "")
+		SET(TOOLKIT_LIBS "")
+		ADD_SUBDIRECTORY( adm/cmake/${module} )
+
+		IF (USE_SOLUTION_FOLDERS)
+			SET_TARGET_PROPERTIES(${module} PROPERTIES FOLDER ${modulename} )
+		ENDIF(USE_SOLUTION_FOLDERS)
+	ENDFOREACH(module ${modules})
+ENDMACRO(PROCESS_MODULE modulename modules_std)
+
+####################################################################################
+# Process modules of each ToolKit                                                  #
+####################################################################################
+# Foundation
+PROCESS_MODULE( "Kernel" "TKernel;TKMath;TKAdvTools" )
+
+# Modeling Data
+IF (${PROJECT_NAME}_MODEL)
+	PROCESS_MODULE( "Modeling Data" "TKG2d;TKG3d;TKGeomBase;TKBRep" )
+ENDIF (${PROJECT_NAME}_MODEL)
+
+# Modeling Algorithms
+IF (${PROJECT_NAME}_MODEL)
+	PROCESS_MODULE( "Modeling Algorithms" "TKGeomAlgo;TKTopAlgo;TKPrim;TKBO;TKHLR;TKMesh;TKShHealing;TKXMesh;TKBool;TKFillet;TKFeat;TKOffset" )
+ENDIF (${PROJECT_NAME}_MODEL)
+
+# Visualisation
+IF(${PROJECT_NAME}_VISU_DEP)
+	PROCESS_MODULE( "Visualization" "" "TKService;TKV2d;TKV3d" )
+ENDIF(${PROJECT_NAME}_VISU_DEP)
+IF(${PROJECT_NAME}_VISUALISATION)
+	PROCESS_MODULE( "Visualization" "" "TKOpenGl;TKMeshVS;TKNIS;TKVoxel" )
+ENDIF(${PROJECT_NAME}_VISUALISATION)
+
+# Application framework
+IF(${PROJECT_NAME}_OCAF)
+	PROCESS_MODULE( "OCAF" "TKCDF;PTKernel;TKLCAF;FWOSPlugin;TKPShape;TKBinL;TKXmlL;TKPLCAF;TKTObj;TKShapeSchema;TKStdLSchema" "TKCAF;TKBin;TKXml;TKPCAF;TKBinTObj;TKXmlTObj;TKStdSchema" )
+ENDIF(${PROJECT_NAME}_OCAF)
+
+# Data exchange
+IF(${PROJECT_NAME}_DATAEXCHANGE)
+	PROCESS_MODULE( "Data Exchange" "TKSTL;TKXSBase;TKSTEPBase;TKIGES;TKSTEPAttr;TKSTEP209;TKSTEP" "TKVRML;TKXCAF;TKXCAFSchema;TKXmlXCAF;TKBinXCAF;TKXDEIGES;TKXDESTEP" )
+ENDIF(${PROJECT_NAME}_DATAEXCHANGE)
+
+# Draw
+IF(${PROJECT_NAME}_DRAW)
+	PROCESS_MODULE( "Draw" "" "TKDraw;TKTopTest;TKViewerTest;TKXSDRAW;TKDCAF;TKXDEDRAW;TKTObjDRAW" )
+ENDIF(${PROJECT_NAME}_DRAW)
+
+# DRAWEXE application
+IF(${PROJECT_NAME}_DRAW)
+	PROCESS_MODULE( "Draw" "" DRAWEXE )
+ENDIF(${PROJECT_NAME}_DRAW)
+
+CONFIGURE_FILE( ${CMAKE_CURRENT_SOURCE_DIR}/ProjectConfig.cmake.in
+	${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake @ONLY )
+CONFIGURE_FILE( ${CMAKE_CURRENT_SOURCE_DIR}/ProjectConfigVersion.cmake.in
+	${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake @ONLY )
+INSTALL(FILES ${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake ${PROJECT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake
+	DESTINATION ${${PROJECT_NAME}_INSTALL_CMAKE_DATA_DIR} COMPONENT Development )
+
+IF(NOT (WIN32 AND (CMAKE_CONFIGURATION_TYPES OR NMAKE)))
+INSTALL(EXPORT ${PROJECT_NAME}-libraries DESTINATION ${${PROJECT_NAME}_INSTALL_CMAKE_DATA_DIR} COMPONENT Development)
+ENDIF(NOT (WIN32 AND (CMAKE_CONFIGURATION_TYPES OR NMAKE)))
+
+
+##############
+# Bundle AUTOINSTALL
+##############
+
+IF (${PROJECT_NAME}_BUNDLE_AUTOINSTALL)
+	IF (${PROJECT_NAME}_VISUALISATION)
+		INSTALL(FILES ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/bind/freetyped.dll DESTINATION ${${PROJECT_NAME}_INSTALL_BIN_DEBUG_DIR} CONFIGURATIONS Debug)
+		INSTALL(FILES ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/bin/freetype.dll DESTINATION ${${PROJECT_NAME}_INSTALL_BIN_DIR} CONFIGURATIONS Release RelWithDebInfo MinSizeRel)
+		INSTALL(FILES ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/bind/FTGLd.dll DESTINATION ${${PROJECT_NAME}_INSTALL_BIN_DEBUG_DIR} CONFIGURATIONS Debug)
+		INSTALL(FILES ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/bin/FTGL.dll DESTINATION ${${PROJECT_NAME}_INSTALL_BIN_DIR} CONFIGURATIONS Release RelWithDebInfo MinSizeRel)
+	ENDIF(${PROJECT_NAME}_VISUALISATION)
+
+	IF (${PROJECT_NAME}_VISU_DEP AND ${PROJECT_NAME}_WITH_GL2PS )
+		INSTALL(FILES ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/bind/gl2psd.dll DESTINATION ${${PROJECT_NAME}_INSTALL_BIN_DEBUG_DIR} CONFIGURATIONS Debug)
+		INSTALL(FILES ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/bin/gl2ps.dll DESTINATION ${${PROJECT_NAME}_INSTALL_BIN_DIR} CONFIGURATIONS Release RelWithDebInfo MinSizeRel)
+	ENDIF(${PROJECT_NAME}_VISU_DEP AND ${PROJECT_NAME}_WITH_GL2PS)
+
+	IF (${PROJECT_NAME}_VISU_DEP AND ${PROJECT_NAME}_WITH_FREEIMAGE)
+		INSTALL(FILES ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/bind/FreeImaged.dll DESTINATION ${${PROJECT_NAME}_INSTALL_BIN_DEBUG_DIR} CONFIGURATIONS Debug)
+		INSTALL(FILES ${${PROJECT_NAME}_BUNDLE_ROOT_PATH}/Win${BIT}/bin/FreeImage.dll DESTINATION ${${PROJECT_NAME}_INSTALL_BIN_DIR} CONFIGURATIONS Release RelWithDebInfo MinSizeRel)
+	ENDIF(${PROJECT_NAME}_VISU_DEP AND ${PROJECT_NAME}_WITH_FREEIMAGE)
+
+	# Install TCL
+	IF (${PROJECT_NAME}_DRAW)
+		GET_FILENAME_COMPONENT(TCL_BIN_DIR ${TCL_TCLSH} PATH)
+		GET_FILENAME_COMPONENT(TCL_LIB_NAME_DIR ${TCL_LIBRARY} NAME_WE)
+		INSTALL(FILES ${TCL_BIN_DIR}/${TCL_LIB_NAME_DIR}.dll DESTINATION ${${PROJECT_NAME}_INSTALL_BIN_DEBUG_DIR} CONFIGURATIONS Debug )
+		INSTALL(FILES ${TCL_BIN_DIR}/${TCL_LIB_NAME_DIR}.dll DESTINATION ${${PROJECT_NAME}_INSTALL_BIN_DIR} CONFIGURATIONS Release RelWithDebInfo MinSizeRel )
+	ENDIF(${PROJECT_NAME}_DRAW)	
+
+ENDIF(${PROJECT_NAME}_BUNDLE_AUTOINSTALL)
+
+
Index: oce/DrawDefault.cmake
===================================================================
--- /dev/null
+++ oce/DrawDefault.cmake
@@ -0,0 +1,37 @@
+set tcl_interactive 1
+set tcl_precision 17
+
+if [info exists library] {
+  source [file join $library init.tcl]
+}
+set dir ""
+if { [info exists env(DRAWHOME) ] } { 
+  set dir $env(DRAWHOME)  
+} else {
+    if { [info exists env(CASROOT) ] } {
+  set dir [file join $env(CASROOT) src DrawResources]
+    } else {
+  set dir [file join "@OCE_ABSPATH_DATA_DIR@" src DrawResources]
+    }
+}
+
+# san - 02/08/2002 - In Tcl8.3 it is no longer necessary to load Tix explicitly on WNT
+#if { [info exists env(STATION)] } {
+#  if { $env(STATION) == "wnt" } {
+#    load tix8183.dll Tix
+#  }
+#}
+
+if { [file exist  $dir] } { 
+   source [file join $dir StandardCommands.tcl]
+   source [file join $dir StandardViews.tcl]
+   source [file join $dir Geometry.tcl]
+   if [info exists tk_version] {source [file join $dir DrawTK.tcl]}
+   if [file readable DrawAppliInit] {
+  source DrawAppliInit
+   }
+   set stationname $tcl_platform(platform)
+   if { ${stationname} == "windows" } {
+      wm iconbitmap . -default [file join $dir lamp.ico]
+   }
+} 
Index: oce/INSTALL.MSVC.txt
===================================================================
--- /dev/null
+++ oce/INSTALL.MSVC.txt
@@ -0,0 +1,32 @@
+****** STUB *******
+
+If you want to build OCE from sources with MSVC, read BUILD.MSVC.txt
+
+If you have downloaded the PRECOMPILED package, just make sure that you are using the 
+exactly matching compiler version, including service pack level.
+
+To be able to use OCE from MSVC, you have to set various "Project Options"
+
+- C++ Compiler \ Additional include directories 
+  Set these pointing to <oce-install-dir>\inc
+
+- Linker \ Additional Directories 
+  Set these point to <oce-install-dir>\Win32\lib
+  Eventually change Win32 with Win64 when required
+
+- Linker "Input Libraries"
+  For each toolkit you use, you must add the corresponding .lib files
+  Debug libraries have a "d" suffix.
+  For example, you will have to add TKernel.lib in RELEASE and TKerneld.lib in DEBUG
+  to use the Kernel module.
+  If you get linker errors, you likely forgot to add a .lib file to that list.
+
+- Binary search path
+  When you run the program, the system must be able to find the OCE libraries somewhere. You can add
+  <oce-install-dir>\Win32\bin to your PATH environment variable or add it locally to your project
+  (preferred way). Also you can copy all the DLLs to your project binary folder.
+
+  Be careful when adding multiple OCE version in your search PATH, you will likely end up with loader errors.
+
+
+  
\ No newline at end of file
Index: oce/INSTALL.Unix
===================================================================
--- /dev/null
+++ oce/INSTALL.Unix
@@ -0,0 +1,118 @@
+This file describes how to build OCE from sources on Linux or MacOSX.
+
+Since the OCE release 0.3, the dev team definitely dropped the autotools
+support and adopted the CMake build system. First ensure you have installed
+CMake 2.6 or higher (http://www.cmake.org) before going further in the
+compilation process.
+
+The installation procedure detailed below is:
+ 1. Download/extract the OCE-xxxxx.tar.gz archive to any directory
+ 2. Configure
+ 3. make/make install
+ 4. Test installation
+
+1. Content extraction
+=====================
+
+Unpack OCE-xxxx.tar.gz to some folder - ${DISTRIBUTIVE_DIR}.
+For example DISTRIBUTIVE_DIR=/tmp/OCE-0.3
+ tar -zxvf OCE-xxxx.tar.gz
+then
+ cd  ${DISTRIBUTIVE_DIR}
+
+2. Configure step
+=================
+It is a good practice to build in a separate directory:
+ mkdir build
+ cd build
+
+CMake can be configured either by a user interface (Qt and ncurses interfaces
+are available) or directly by running
+ cmake ..
+and editing the generated CMakeCache.txt file.
+
+In the former case, the most common options can be defined from the
+main window, and expert options can be modified in selecting "Advanced"
+mode.
+In the latter case, it is also possible to define options on the
+command line.  If you edit CMakeCache.txt by hand, do not forget to
+rerun cmake after modifying this file.
+
+2.1 Defining flags
+==================
+
+Here are default flags on Unix
+ OCE_BUILD_SHARED_LIB        ON
+ OCE_BUILD_TYPE              Release
+ OCE_DATAEXCHANGE            ON
+ OCE_DRAW                    OFF
+ OCE_INSTALL_PREFIX          /usr/local
+ OCE_MODEL                   ON
+ OCE_MULTITHREAD_LIBRARY     NONE
+ OCE_OCAF                    ON
+ OCE_VISUALISATION           ON
+ OCE_WITH_FREEIMAGE          OFF
+ OCE_WITH_GL2PS              OFF
+
+In order to modify installation path and build DRAWEXE, one
+can run these commands:
+
+ flags=""
+ flags="$flags -DOCE_INSTALL_PREFIX:PATH=$HOME/oce"
+ flags="$flags -DOCE_DRAW:BOOL=ON"
+ cmake $flags ..
+
+2.2 Expert options
+==================
+More expert options can be defined in the "Advanced mode".
+
+2.2.1 FTGL note:
+==============
+OCE supports either ftgl-2.1.2 or the latest ftgl-2.1.3-rc5. If you wish to
+build OCE over ftgl-2.1.2, define the FTGL_V212_INCLUDE_DIR variable instead
+of FTGL_INCLUDE_DIR.  For instance,
+ flags="$flags -DFTGL_V212_INCLUDE_DIR:PATH=/opt/ftgl-2.1.2/include"
+
+2.2.2 Additional flags:
+=====================
+OCE can be compiled with TBB or OpenMP in order to support parallel meshing.
+By default, this support is disabled.  Enable it with
+ flags="$flags -DOCE_MULTITHREAD_LIBRARY:STRING=TBB"
+or
+ flags="$flags -DOCE_MULTITHREAD_LIBRARY:STRING=OPENMP"
+
+There are many more options, see CMakeCache.txt for a full list.
+
+3. Make step
+============
+If configure exits successfully, you can then build the whole OCE
+by running the following commands:
+
+ make
+ make install/strip
+
+If you have more than one (for instance 2) cores on your machine, you can use
+ make -j2
+to enable multiprocessed compilation and speedup the whole compilation
+process.
+
+If you enabled tests when configuring by passing -DOCE_TESTING:BOOL=ON
+flag to CMake, you can now run our battery of tests:
+
+ make test
+
+All tests should pass except BRepMeshTestSuite.testMeshTorus, this test
+exhibits a bug which has not been fixed yet.
+
+4. Test installation: OCE Draw Test Harness
+===========================================
+You can launch Draw Test Harness in order to experiment with OCE.
+With OCE you normally do not have to set any environment variable.
+
+Launch $INSTALL_DIR/bin/DRAWEXE executable; on prompt, type
+ > pload ALL
+In order to load DRAW commands, you can then run demos
+ > source $INSTALL_DIR/src/DrawResources/ModelingDemo.tcl
+ > source $INSTALL_DIR/src/DrawResources/VisualizationDemo.tcl
+
+Installation is succesful. Enjoy!
Index: oce/NEWS
===================================================================
--- /dev/null
+++ oce/NEWS
@@ -0,0 +1,158 @@
+Version 0.3.0 - June 2011
+
+  * Make CMake work with MSVC.  This generator is special,
+    it generates both Debug and Release configurations.
+    [QbProg]
+
+  * Add an option to enable maximum warning levels
+    [QbProg]
+
+  * Improve handling of CMake options
+    [Hugh Sorby]
+
+  * Fix build failures with g++ 4.6
+    [Denis Barbier]
+
+  * Clean up CMakeLists.txt, remove unused macros.
+    [Mark Pictor]
+
+  * Create two config files, one is used during compilation,
+    another one is used when linking against OCE.  The latter
+    contains fewer macros, and they are prefixed by OCE_ to
+    prevent name clashes.
+    [Mark Pictor]
+
+  * Start fixing compiler warnings.
+    [QbProg, Thomas Paviot]
+
+  * Create a bundle for MSVC
+    [QbProg]
+
+  * Fix cross compilation with Mingw.  We were not able to
+    build visualization stuff previously.
+    [Muellni]
+
+  * Install an OCEConfig.cmake file so that programs can use
+    FIND_PACKAGE(OCE) to set variables to link against OCE.
+    [Muellni]
+
+  * Undefine Convex before it is used by OCE as a method or
+    function, this may be a macro defined by X11.h
+    [Thomas Paviot]
+
+  * Remove -DLIN from compiler flags.  It still works on Linux,
+    and this causes crashes on Mac OSX.
+    [Thomas Paviot]
+
+  * Delete inc/TopOpeBRep_tools.hxx, this file is unused, and it
+    includes TopOpeBRepDS_tools.hxx which does not exist.
+    [Denis Barbier]
+
+  * Remove Autotools files for Unix and MSVC, CMake build system
+    works fine on these platforms.  We keep Borland project
+    files for now, this IDE is not supported by CMake.
+    [Thomas Paviot]
+
+Version 0.2.0 - May 2011
+
+  * Add CMake build files, based on the opencascade-cmake project
+      http://code.google.com/p/opencascade-cmake/
+    Works fine on Linux, needs more testing on Mac OSX and Windows.
+    [Hugh Sorby, Thomas Paviot, Mark Pictor, Denis Barbier, QbProg]
+
+  * Let CMake generate env.sh and env.csh scripts with
+    accurate variables.
+    [Denis Barbier]
+
+  * Fix lines in Visual3d_Layer class.
+    [Fotis Sioutis]
+
+  * Changes required to build OCE on some non-x86 architectures
+    on Unix.
+    [Denis Barbier]
+
+  * Add OpenMP support, users can choose between OpenMP and TBB.
+    [Denis Barbier]
+
+  * When building with CMake, paths are set at compile time so that
+    everything works without having to set environment variables.
+    [Denis Barbier]
+
+Version 0.1.0 - April 2011
+
+  * Import OCC 6.5.0
+    [Thomas Paviot]
+
+  * Add instructions for cloning/pulling with git and for
+    building from sources.
+    [Thomas Paviot]
+
+  * Replace Abs(foo < bar) by Abs(foo) < bar.
+    These bugs have been reported on the opencascade forum:
+      http://www.opencascade.org/org/forum/thread_20187/
+      BugID=OCC22324
+    [Fotis Sioutis]
+
+  * Rename guards for MSVC specific pragmas from WNT to _MSC_VER.
+    These are mainly #pragma warnings or MSVCRT specific things.
+    [QbProg]
+
+  * Fix build failures with Borland compiler.
+    [Fotis Sioutis]
+
+  * Add project files for Borland Developer Studio 10.
+    [Fotis Sioutis]
+
+  * Fix build failures with Mingw.
+    [Jérôme Robert]
+
+  * Add new Automake conditionals: HAVE_X11 and IS_WINDOWS.
+    When X11 is not found, do not compile sources from Xw and
+    ImageUtility. On Windows, compile files from ros/src/WNT.
+    [Denis Barbier]
+
+  * Improve Autools usage.
+    [Denis Barbier]
+
+  * Assume /usr when --with-gl2ps/--with-freeimage configure
+    options are specified without arguments.
+    Submitted upstream:
+      http://www.opencascade.org/org/forum/thread_20231/
+      BugID=OCC22335
+    [Mark Pictor]
+
+  * New --with-ftgl212 to declare FTGL 2.1.2 location.
+    Fix sources to also work with newer FTGL versions.
+    Submitted upstream:
+      http://www.opencascade.org/org/forum/thread_20128/
+      BugID = OCC22328
+    [Denis Barbier]
+
+  * Add missing clock_gettime implementation in MacOSX.
+    [Thomas Paviot]
+
+  * Remove duplicate header files.
+    [Fotis Sioutis]
+
+  * Fix build failure with tcl 8.6.
+    Submitted upstream:
+      http://www.opencascade.org/org/forum/thread_20125/
+      BugID = OCC22327
+    [Denis Barbier]
+
+  * Bug fix: text doesn't get displayed in 6.5.
+    Submitted upstream:
+      http://www.opencascade.org/org/forum/thread_20101/
+    [Venugopal Gudimetla]
+
+  * Fix building with FreeImage on Unix.
+    Submitted upstream:
+      http://www.opencascade.org/org/forum/thread_20043/
+    [Denis Barbier]
+
+  * Add -version-info 0:0:0 libtool flag on Unix.
+    [Denis Barbier]
+
+  * Rename config.h into oce-config.h.
+    [Denis Barbier]
+
Index: oce/ProjectConfig.cmake.in
===================================================================
--- /dev/null
+++ oce/ProjectConfig.cmake.in
@@ -0,0 +1,37 @@
+# - Config file for the ${PROJECT_NAME} package
+# It defines the following variables
+#  ${PROJECT_NAME}_INCLUDE_DIRS - include directory for ${PROJECT_NAME}
+#  ${PROJECT_NAME}_LIBRARIES    - all libraries to link against (warning, may be slower than just specify the used libs)
+#  ${PROJECT_NAME}_ALL_FOUND    - set to TRUE if all requested COMPONENTS are specified (see below), false otherwise
+#  ${PROJECT_NAME}_MISSING_TOOLKITS - when ${PROJECT_NAME}_ALL_FOUND is FALSE, contains a list of missing toolkits
+#
+# If COMPONENTS is specified in the find_package() commands, it contains
+# a list of toolkit modules which are requested.  For each component,
+# ${PROJECT_NAME}_<toolkit>_FOUND is set to TRUE or FALSE.
+# Warning: <toolkit> is case-sensitive, for instance TKernel.
+# For convenience, ${PROJECT_NAME}_ALL_FOUND is set to TRUE if all
+# toolkits are found, otherwise FALSE.  In the latter case,
+# ${PROJECT_NAME}_MISSING_TOOLKITS contains the list of missing toolkits.
+ 
+# Tell the user project where to find our headers and libraries
+GET_FILENAME_COMPONENT(SELF_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
+
+SET(@PROJECT_NAME@_INCLUDE_DIRS "${SELF_DIR}/@OCE_CMAKE_DATA_TO_INCLUDE_RELATIVE_DIR@")
+SET(@PROJECT_NAME@_LIBRARIES "@OCE_LIBRARIES@")
+INCLUDE("${SELF_DIR}/@PROJECT_NAME@-libraries.cmake")
+
+SET(@PROJECT_NAME@_ALL_FOUND true)
+IF(@PROJECT_NAME@_FIND_COMPONENTS)
+	FOREACH(toolkit ${@PROJECT_NAME@_FIND_COMPONENTS})
+		IF(TARGET ${toolkit})
+			SET(@PROJECT_NAME@_${toolkit}_FOUND true)
+		ELSE(TARGET ${toolkit})
+			SET(@PROJECT_NAME@_ALL_FOUND false)
+			SET(@PROJECT_NAME@_${toolkit}_FOUND false)
+			SET(@PROJECT_NAME@_MISSING_TOOLKITS ${@PROJECT_NAME@_MISSING_TOOLKITS} ${toolkit})
+			IF(@PROJECT_NAME@_FIND_REQUIRED)
+				MESSAGE(FATAL_ERROR "@PROJECT_NAME@ ${toolkit} not available.")
+			ENDIF(@PROJECT_NAME@_FIND_REQUIRED)
+		ENDIF(TARGET ${toolkit})
+	ENDFOREACH(toolkit ${@PROJECT_NAME@_FIND_COMPONENTS})
+ENDIF(@PROJECT_NAME@_FIND_COMPONENTS)
Index: oce/ProjectConfigVersion.cmake.in
===================================================================
--- /dev/null
+++ oce/ProjectConfigVersion.cmake.in
@@ -0,0 +1,12 @@
+SET(PACKAGE_VERSION "@OCE_VERSION@")
+
+# Check whether the requested PACKAGE_FIND_VERSION is compatible
+IF("${PACKAGE_VERSION}" VERSION_LESS "${PACKAGE_FIND_VERSION}")
+	SET(PACKAGE_VERSION_COMPATIBLE FALSE)
+ELSE("${PACKAGE_VERSION}" VERSION_LESS "${PACKAGE_FIND_VERSION}")
+	SET(PACKAGE_VERSION_COMPATIBLE TRUE)
+	IF ("${PACKAGE_VERSION}" VERSION_EQUAL "${PACKAGE_FIND_VERSION}")
+		SET(PACKAGE_VERSION_EXACT TRUE)
+	ENDIF ("${PACKAGE_VERSION}" VERSION_EQUAL "${PACKAGE_FIND_VERSION}")
+ENDIF("${PACKAGE_VERSION}" VERSION_LESS "${PACKAGE_FIND_VERSION}")
+
Index: oce/README
===================================================================
--- /dev/null
+++ oce/README
@@ -0,0 +1,27 @@
+oce stands for *o*pencascade *c*ommunity *e*dition.
+
+This project aims at gathering patches/changes/improvements from the OCC community over the latest release
+(currently OCCT 6.5.0).
+
+We use the following online resources:
+  * Sources
+       https://github.com/tpaviot/oce
+  * Bug tracker
+       https://github.com/tpaviot/oce/issues
+  * Mailing list
+       http://groups.google.com/group/oce-dev/about
+
+Just email tpaviot@gmail.com for a request regarding write access to the repository.
+
+How to create a local copy of the repository?
+=============================================
+ git clone git://github.com/tpaviot/oce.git
+
+How to stay up to date with latest developements?
+=================================================
+ cd oce
+ git pull
+
+How to compile on Unix?
+=======================
+Read INSTALL file for instructions on compiling.
Index: oce/Version.rc.cmake
===================================================================
--- /dev/null
+++ oce/Version.rc.cmake
@@ -0,0 +1,46 @@
+#include <winresrc.h>
+
+VS_VERSION_INFO VERSIONINFO
+  FILEVERSION @OCE_VERSION_MAJOR@,@OCE_VERSION_MINOR@,@OCE_VERSION_PATCH@,0
+  PRODUCTVERSION @OCE_VERSION_MAJOR@,@OCE_VERSION_MINOR@,@OCE_VERSION_PATCH@,0
+  FILEFLAGSMASK VS_FFI_FILEFLAGSMASK
+#ifndef DEBUG
+  FILEFLAGS 0
+#else
+  FILEFLAGS VER_DEBUG
+#endif
+  FILEOS VOS_NT_WINDOWS32
+
+#cmakedefine OCE_BUILD_SHARED_LIB
+
+#ifdef OCE_VERSION_INFO_IS_EXE
+#ifdef OCE_BUILD_SHARED_LIB
+  FILETYPE VFT_DLL
+#else
+  FILETYPE VFT_STATIC_LIB
+#endif
+#else
+  FILETYPE VFT_APP
+#endif
+
+  FILESUBTYPE VFT2_UNKNOWN
+  BEGIN
+    BLOCK "StringFileInfo"
+    BEGIN
+      BLOCK "04090000"
+      BEGIN
+        VALUE "FileDescription", "OpenCascade Community Edition"
+        VALUE "FileVersion", "@OCE_VERSION_MAJOR@.@OCE_VERSION_MINOR@.@OCE_VERSION_PATCH@"
+        VALUE "InternalName", "@PROJECT_NAME@"
+        VALUE "LegalCopyright", ""
+        VALUE "OriginalFilename", ""
+        VALUE "ProductName", "@PROJECT_NAME@"
+        VALUE "ProductVersion", "@OCE_VERSION_MAJOR@.@OCE_VERSION_MINOR@.@OCE_VERSION_PATCH@"
+      END
+    END
+    BLOCK "VarFileInfo"
+    BEGIN
+      VALUE "Translation", 0x409, 1200
+    END
+  END
+  
\ No newline at end of file
Index: oce/adm/cmake/BuildToolkit.cmake
===================================================================
--- /dev/null
+++ oce/adm/cmake/BuildToolkit.cmake
@@ -0,0 +1,134 @@
+
+MESSAGE(STATUS "Processing ToolKit: ${TOOLKIT} (${TOOLKIT_MODULES})")
+SET(TOOLKIT_SOURCE_FILES)
+IF(DEFINED TOOLKIT_INCLUDE_DIRECTORIES)
+	INCLUDE_DIRECTORIES(${TOOLKIT_INCLUDE_DIRECTORIES})
+ENDIF(DEFINED TOOLKIT_INCLUDE_DIRECTORIES)
+FOREACH(MODULE ${TOOLKIT_MODULES})
+	
+	# add all .cxx/*.c files or each module
+	FILE(GLOB source_files
+		${${PROJECT_NAME}_SOURCE_DIR}/src/${MODULE}/*.cxx
+		${${PROJECT_NAME}_SOURCE_DIR}/src/${MODULE}/*.c
+		${${PROJECT_NAME}_SOURCE_DIR}/drv/${MODULE}/*.cxx
+		${${PROJECT_NAME}_SOURCE_DIR}/drv/${MODULE}/*.c)
+	SET (header_files "")
+	
+	IF(${PROJECT_NAME}_ADD_HEADERS)
+		FILE(GLOB header_files  ${${PROJECT_NAME}_SOURCE_DIR}/inc/${MODULE}_*.hxx)
+		LIST(APPEND source_files ${header_files})
+	ENDIF(${PROJECT_NAME}_ADD_HEADERS)
+
+	IF (WIN32)
+		# For compilers under Windows a define must be set per file to correctly set the export macro
+		SET_SOURCE_FILES_PROPERTIES(${source_files} PROPERTIES COMPILE_FLAGS "-D__${MODULE}_DLL")
+	ENDIF(WIN32)
+
+	SOURCE_GROUP (${MODULE} FILES ${source_files})
+
+	# append these source files to the list of source files of the toolkit
+	SET(TOOLKIT_SOURCE_FILES ${TOOLKIT_SOURCE_FILES} ${source_files})
+	# required include paths
+	INCLUDE_DIRECTORIES(${${PROJECT_NAME}_SOURCE_DIR}/src/${MODULE} ${${PROJECT_NAME}_SOURCE_DIR}/drv/${MODULE})
+ENDFOREACH(MODULE ${TOOLKIT_MODULES})
+
+# Version info
+IF(MSVC)
+	SET(TOOLKIT_RESOURCES ${CMAKE_BINARY_DIR}/Version.rc)
+ENDIF(MSVC)
+
+ADD_LIBRARY(${TOOLKIT} ${${PROJECT_NAME}_LIBRARY_TYPE} ${TOOLKIT_SOURCE_FILES} ${TOOLKIT_RESOURCES} )
+
+# TODO Add current toolkit header files into a source group?
+# Add target specific locations of *.lxx and *.ixx files
+SET_TARGET_PROPERTIES(${TOOLKIT} PROPERTIES
+	SOVERSION ${${PROJECT_NAME}_ABI_SOVERSION}
+	VERSION ${${PROJECT_NAME}_ABI_VERSION}
+)
+IF(DEFINED X11_FONT_PATH)
+	SET_SOURCE_FILES_PROPERTIES("${${PROJECT_NAME}_SOURCE_DIR}/src/OSD/OSD_FontMgr.cxx" PROPERTIES COMPILE_FLAGS "-DX11_FONT_PATH=\"${X11_FONT_PATH}\"")
+ENDIF(DEFINED X11_FONT_PATH)
+
+# Workaround for Cmake bug #0011240 (see http://public.kitware.com/Bug/view.php?id=11240)
+# Win64+MSVC+static libs = linker error
+IF(MSVC AND (NOT ${PROJECT_NAME}_BUILD_SHARED_LIB) AND (BIT EQUAL 64))
+  set_target_properties(${TOOLKIT} PROPERTIES STATIC_LIBRARY_FLAGS "/machine:x64")
+ENDIF()
+
+# Set dependencies for thit ToolKit
+IF ( NOT "${TOOLKIT}" STREQUAL "TKernel" )
+	LIST(REMOVE_DUPLICATES TOOLKIT_DEPENDS)
+ENDIF ( NOT "${TOOLKIT}" STREQUAL "TKernel" )
+TARGET_LINK_LIBRARIES(${TOOLKIT} ${TOOLKIT_DEPENDS} ${TOOLKIT_LIBS} ${WIN32_LIBS})
+
+IF(TOOLKIT_LIBS_OPTIMIZED)
+	FOREACH(lib ${TOOLKIT_LIBS_OPTIMIZED})
+		TARGET_LINK_LIBRARIES(${TOOLKIT} optimized ${lib})
+	ENDFOREACH(lib ${TOOLKIT_LIBS_OPTIMIZED})
+ENDIF(TOOLKIT_LIBS_OPTIMIZED)
+
+IF(TOOLKIT_LIBS_DEBUG)
+	FOREACH(lib ${TOOLKIT_LIBS_DEBUG})
+		TARGET_LINK_LIBRARIES(${TOOLKIT} debug ${lib})
+	ENDFOREACH(lib ${TOOLKIT_LIBS_DEBUG})
+ENDIF(TOOLKIT_LIBS_DEBUG)
+
+IF(TOOLKIT_DEPENDS)
+	ADD_DEPENDENCIES(${TOOLKIT} ${TOOLKIT_DEPENDS})
+ENDIF(TOOLKIT_DEPENDS)
+
+###########
+# INSTALL #
+###########
+SET(TOOLKIT_INSTALL_BIN_DIR ${${PROJECT_NAME}_INSTALL_BIN_DIR})
+
+IF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
+	SET(TOOLKIT_INSTALL_BIN_DEBUG_DIR ${${PROJECT_NAME}_INSTALL_BIN_DEBUG_DIR})
+ENDIF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
+
+IF(TOOLKIT_IS_PRIVATE)
+	SET(TOOLKIT_INSTALL_LIB_DIR ${${PROJECT_NAME}_INSTALL_PACKAGE_LIB_DIR})
+	IF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
+		SET(TOOLKIT_INSTALL_LIB_DEBUG_DIR ${${PROJECT_NAME}_INSTALL_PACKAGE_LIB_DEBUG_DIR})
+	ENDIF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
+ELSE(TOOLKIT_IS_PRIVATE)
+	SET(TOOLKIT_INSTALL_LIB_DIR ${${PROJECT_NAME}_INSTALL_LIB_DIR})
+	IF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
+		SET(TOOLKIT_INSTALL_LIB_DEBUG_DIR ${${PROJECT_NAME}_INSTALL_PACKAGE_LIB_DEBUG_DIR})
+	ENDIF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
+	SET_TARGET_PROPERTIES(${TOOLKIT} PROPERTIES INSTALL_RPATH "${${PROJECT_NAME}_INSTALL_PREFIX}/${${PROJECT_NAME}_INSTALL_LIB_DIR}")
+ENDIF(TOOLKIT_IS_PRIVATE)
+
+IF(WIN32 AND (CMAKE_CONFIGURATION_TYPES OR NMAKE))
+	# In win32 put the .dll in the bin folder
+	INSTALL(TARGETS ${TOOLKIT}
+		RUNTIME DESTINATION ${TOOLKIT_INSTALL_BIN_DIR} CONFIGURATIONS Release RelWithDebInfo MinSizeRel COMPONENT RuntimeLibraries
+		LIBRARY DESTINATION ${TOOLKIT_INSTALL_LIB_DIR} CONFIGURATIONS Release RelWithDebInfo MinSizeRel COMPONENT RuntimeLibraries
+		ARCHIVE DESTINATION ${TOOLKIT_INSTALL_LIB_DIR} CONFIGURATIONS Release RelWithDebInfo MinSizeRel COMPONENT Development
+		)
+	INSTALL(TARGETS ${TOOLKIT}
+		RUNTIME DESTINATION ${TOOLKIT_INSTALL_BIN_DEBUG_DIR} CONFIGURATIONS "Debug" COMPONENT RuntimeLibraries
+		LIBRARY DESTINATION ${TOOLKIT_INSTALL_LIB_DEBUG_DIR} CONFIGURATIONS "Debug" COMPONENT RuntimeLibraries
+		ARCHIVE DESTINATION ${TOOLKIT_INSTALL_LIB_DEBUG_DIR} CONFIGURATIONS "Debug" COMPONENT Development
+		)
+
+	IF(MSVC AND ${PROJECT_NAME}_INSTALL_PDB_FILES )
+		IF (CMAKE_CONFIGURATION_TYPES)
+			INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/RelWithDebInfo/${TOOLKIT}.pdb DESTINATION ${TOOLKIT_INSTALL_LIB_DIR} CONFIGURATIONS RelWithDebInfo)
+			INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/${TOOLKIT}${CMAKE_DEBUG_POSTFIX}.pdb DESTINATION ${TOOLKIT_INSTALL_LIB_DEBUG_DIR} CONFIGURATIONS Debug)
+		ELSE(CMAKE_CONFIGURATION_TYPES)
+			INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/${TOOLKIT}.pdb DESTINATION ${TOOLKIT_INSTALL_LIB_DIR} CONFIGURATIONS RelWithDebInfo)
+			INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/${TOOLKIT}${CMAKE_DEBUG_POSTFIX}.pdb DESTINATION ${TOOLKIT_INSTALL_LIB_DEBUG_DIR} CONFIGURATIONS Debug)
+		ENDIF (CMAKE_CONFIGURATION_TYPES)
+
+
+	ENDIF(MSVC AND ${PROJECT_NAME}_INSTALL_PDB_FILES )
+ELSE(WIN32 AND (CMAKE_CONFIGURATION_TYPES OR NMAKE))
+	INSTALL(TARGETS ${TOOLKIT}
+		EXPORT ${PROJECT_NAME}-libraries
+		RUNTIME DESTINATION ${TOOLKIT_INSTALL_BIN_DIR} COMPONENT RuntimeLibraries
+		LIBRARY DESTINATION ${TOOLKIT_INSTALL_LIB_DIR} COMPONENT RuntimeLibraries
+		ARCHIVE DESTINATION ${TOOLKIT_INSTALL_LIB_DIR} COMPONENT Development
+		)
+ENDIF(WIN32 AND (CMAKE_CONFIGURATION_TYPES OR NMAKE))
+
Index: oce/adm/cmake/DRAWEXE/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/DRAWEXE/CMakeLists.txt
@@ -0,0 +1,81 @@
+SET(TOOLKIT_APP DRAWEXE)
+
+SET(TOOLKIT_APP_MODULES
+	DRAWEXE
+)
+SET(TOOLKIT_APP_LIBS
+	TKDraw
+	TKMesh
+	TKGeomAlgo
+	TKTopAlgo
+	TKHLR
+	TKGeomBase
+	TKG2d
+	TKBRep
+	TKMath
+	TKG3d
+	TKernel
+	TKService
+)
+
+MESSAGE(STATUS "Processing application: ${TOOLKIT_APP} (${TOOLKIT_APP_MODULES})")
+SET(TOOLKIT_APP_SOURCE_FILES)
+FOREACH(MODULE ${TOOLKIT_APP_MODULES})
+	# add all .cxx/*.c files or each module
+	FILE(GLOB source_files
+		${${PROJECT_NAME}_SOURCE_DIR}/src/${MODULE}/*.cxx
+		${${PROJECT_NAME}_SOURCE_DIR}/src/${MODULE}/*.c
+		${${PROJECT_NAME}_SOURCE_DIR}/drv/${MODULE}/*.cxx
+		${${PROJECT_NAME}_SOURCE_DIR}/drv/${MODULE}/*.c)
+	#MESSAGE(STATUS "${source_files}")
+	FOREACH(module_source_file ${source_files})
+		IF (WIN32)
+			# For compilers under Windows a define must be set per file to correctly set the export macro
+			SET_SOURCE_FILES_PROPERTIES(${module_source_file} PROPERTIES COMPILE_FLAGS "-D__${MODULE}_DLL")
+		ENDIF(WIN32)
+	ENDFOREACH(module_source_file ${source_files})
+
+	# append these source files to the list of source files of the toolkit
+	SET(TOOLKIT_APP_SOURCE_FILES ${TOOLKIT_APP_SOURCE_FILES} ${source_files})
+	# required include paths
+	INCLUDE_DIRECTORIES(${${PROJECT_NAME}_SOURCE_DIR}/src/${MODULE} ${${PROJECT_NAME}_SOURCE_DIR}/drv/${MODULE})
+ENDFOREACH(MODULE ${TOOLKIT_APP_MODULES})
+
+# Version info
+IF(MSVC)
+	SET(TOOLKIT_RESOURCES ${CMAKE_BINARY_DIR}/Version.rc)
+	ADD_DEFINITIONS("-D${PROJECT_NAME}_VERSION_INFO_IS_EXE")
+ENDIF(MSVC)
+
+ADD_EXECUTABLE(${TOOLKIT_APP} ${TOOLKIT_APP_SOURCE_FILES} ${TOOLKIT_RESOURCES} )
+
+SET_TARGET_PROPERTIES(${TOOLKIT_APP} PROPERTIES
+	INSTALL_RPATH "${${PROJECT_NAME}_INSTALL_PREFIX}/${${PROJECT_NAME}_INSTALL_LIB_DIR};${${PROJECT_NAME}_INSTALL_PREFIX}/${${PROJECT_NAME}_INSTALL_PACKAGE_LIB_DIR}"
+)
+# Set dependencies for thit ToolKit
+LIST(REMOVE_DUPLICATES TOOLKIT_APP_LIBS)
+TARGET_LINK_LIBRARIES(${TOOLKIT_APP} ${TOOLKIT_APP_LIBS} ${WIN32_LIBS})
+
+IF(WIN32 AND (CMAKE_CONFIGURATION_TYPES OR NMAKE))
+	#  Those are private libraries
+	INSTALL(TARGETS ${TOOLKIT_APP}
+		RUNTIME DESTINATION ${${PROJECT_NAME}_INSTALL_BIN_DIR}         CONFIGURATIONS Release RelWithDebInfo MinSizeRel COMPONENT RuntimeLibraries
+		LIBRARY DESTINATION ${${PROJECT_NAME}_INSTALL_PACKAGE_LIB_DIR} CONFIGURATIONS Release RelWithDebInfo MinSizeRel COMPONENT RuntimeLibraries
+		ARCHIVE DESTINATION ${${PROJECT_NAME}_INSTALL_PACKAGE_LIB_DIR} CONFIGURATIONS Release RelWithDebInfo MinSizeRel COMPONENT Development
+	)
+
+	INSTALL(TARGETS ${TOOLKIT_APP}
+		RUNTIME DESTINATION ${${PROJECT_NAME}_INSTALL_BIN_DEBUG_DIR}         CONFIGURATIONS "Debug" COMPONENT RuntimeLibraries
+		LIBRARY DESTINATION ${${PROJECT_NAME}_INSTALL_PACKAGE_LIB_DEBUG_DIR} CONFIGURATIONS "Debug" COMPONENT RuntimeLibraries
+		ARCHIVE DESTINATION ${${PROJECT_NAME}_INSTALL_PACKAGE_LIB_DEBUG_DIR} CONFIGURATIONS "Debug" COMPONENT Development
+	)
+ELSE(WIN32 AND (CMAKE_CONFIGURATION_TYPES OR NMAKE))
+
+#  Those are private libraries
+INSTALL(TARGETS ${TOOLKIT_APP}
+	RUNTIME DESTINATION ${${PROJECT_NAME}_INSTALL_BIN_DIR}         COMPONENT RuntimeLibraries
+	LIBRARY DESTINATION ${${PROJECT_NAME}_INSTALL_PACKAGE_LIB_DIR} COMPONENT RuntimeLibraries
+	ARCHIVE DESTINATION ${${PROJECT_NAME}_INSTALL_PACKAGE_LIB_DIR} COMPONENT Development
+)
+
+ENDIF(WIN32 AND (CMAKE_CONFIGURATION_TYPES OR NMAKE))
Index: oce/adm/cmake/FWOSPlugin/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/FWOSPlugin/CMakeLists.txt
@@ -0,0 +1,12 @@
+SET(TOOLKIT FWOSPlugin)
+
+SET(TOOLKIT_MODULES
+	FWOSDriver
+)
+SET(TOOLKIT_DEPENDS
+	TKCDF
+	TKernel
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/PTKernel/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/PTKernel/CMakeLists.txt
@@ -0,0 +1,18 @@
+SET(TOOLKIT PTKernel)
+
+SET(TOOLKIT_MODULES
+	DBC
+	PCollection
+	PColStd
+	PMMgt
+	PShort
+	PStandard
+	PTColStd
+	ObjMgt
+)
+SET(TOOLKIT_DEPENDS
+	TKernel
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKAdvTools/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKAdvTools/CMakeLists.txt
@@ -0,0 +1,16 @@
+SET(TOOLKIT TKAdvTools)
+
+SET(TOOLKIT_MODULES
+	Dynamic
+	Materials
+	Expr
+	ExprIntrp
+	GraphDS
+	GraphTools
+)
+SET(TOOLKIT_DEPENDS
+	TKernel
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKBO/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKBO/CMakeLists.txt
@@ -0,0 +1,23 @@
+SET(TOOLKIT TKBO)
+
+SET(TOOLKIT_MODULES
+	BOPTColStd
+	BOPTools
+	BOP
+	BooleanOperations
+	IntTools
+	BRepAlgoAPI
+)
+SET(TOOLKIT_DEPENDS
+	TKernel
+	TKGeomBase
+	TKG3d
+	TKTopAlgo
+	TKMath
+	TKBRep
+	TKG2d
+	TKGeomAlgo
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKBRep/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKBRep/CMakeLists.txt
@@ -0,0 +1,21 @@
+SET(TOOLKIT TKBRep)
+
+SET(TOOLKIT_MODULES
+	TopoDS
+	TopExp
+	TopTools
+	BRep
+	BRepLProp
+	BRepAdaptor
+	BRepTools
+)
+SET(TOOLKIT_DEPENDS
+	TKernel
+	TKGeomBase
+	TKMath
+	TKG2d
+	TKG3d
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKBin/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKBin/CMakeLists.txt
@@ -0,0 +1,24 @@
+SET(TOOLKIT TKBin)
+
+SET(TOOLKIT_MODULES
+	BinDrivers
+	BinMDataXtd
+	BinMPrsStd
+	BinMNaming
+	BinTools
+)
+SET(TOOLKIT_DEPENDS
+	TKMath
+	TKernel
+	TKBinL
+	TKLCAF
+	TKG2d
+	TKCAF
+	TKV3d
+	TKBRep
+	TKG3d
+	TKCDF
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKBinL/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKBinL/CMakeLists.txt
@@ -0,0 +1,18 @@
+SET(TOOLKIT TKBinL)
+
+SET(TOOLKIT_MODULES
+	BinMDF
+	BinMDataStd
+	BinMFunction
+	BinMDocStd
+	BinObjMgt
+	BinLDrivers
+)
+SET(TOOLKIT_DEPENDS
+	TKLCAF
+	TKCDF
+	TKernel
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKBinTObj/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKBinTObj/CMakeLists.txt
@@ -0,0 +1,16 @@
+SET(TOOLKIT TKBinTObj)
+
+SET(TOOLKIT_MODULES
+	BinTObjDrivers
+)
+SET(TOOLKIT_DEPENDS
+	TKernel
+	TKTObj
+	TKMath
+	TKLCAF
+	TKBinL
+	TKCDF
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKBinXCAF/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKBinXCAF/CMakeLists.txt
@@ -0,0 +1,22 @@
+SET(TOOLKIT TKBinXCAF)
+
+SET(TOOLKIT_MODULES
+	BinXCAFDrivers
+	BinMXCAFDoc
+)
+SET(TOOLKIT_DEPENDS
+	TKernel
+	TKMath
+	TKLCAF
+	TKG2d
+	TKBinL
+	TKBRep
+	TKBin
+	TKG3d
+	TKXCAF
+	TKCAF
+	TKCDF
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKBool/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKBool/CMakeLists.txt
@@ -0,0 +1,27 @@
+SET(TOOLKIT TKBool)
+
+SET(TOOLKIT_MODULES
+	TopOpeBRep
+	TopOpeBRepDS
+	TopOpeBRepBuild
+	TopOpeBRepTool
+	BRepAlgo
+	BRepFill
+	BRepProj
+)
+SET(TOOLKIT_DEPENDS
+	TKernel
+	TKGeomAlgo
+	TKG3d
+	TKGeomBase
+	TKTopAlgo
+	TKMath
+	TKBO
+	TKG2d
+	TKShHealing
+	TKBRep
+	TKPrim
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKCAF/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKCAF/CMakeLists.txt
@@ -0,0 +1,25 @@
+SET(TOOLKIT TKCAF)
+
+SET(TOOLKIT_MODULES
+	TDataXtd
+	TNaming
+	TPrsStd
+	AppStd
+)
+SET(TOOLKIT_DEPENDS
+	TKernel
+	TKLCAF
+	TKG3d
+	TKGeomBase
+	TKV3d
+	TKService
+	TKMath
+	TKCDF
+	TKBRep
+	TKG2d
+	TKTopAlgo
+	TKV2d
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKCDF/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKCDF/CMakeLists.txt
@@ -0,0 +1,15 @@
+SET(TOOLKIT TKCDF)
+
+SET(TOOLKIT_MODULES
+	CDM
+	PCDM
+	CDF
+	UTL
+	LDOM
+)
+SET(TOOLKIT_DEPENDS
+	TKernel
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKDCAF/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKDCAF/CMakeLists.txt
@@ -0,0 +1,38 @@
+SET(TOOLKIT TKDCAF)
+
+SET(TOOLKIT_MODULES
+	DDF
+	DDocStd
+	DNaming
+	DDataStd
+	DPrsStd
+	DrawDim
+)
+SET(TOOLKIT_DEPENDS TKCAF
+	TKernel
+	TKBool
+	TKLCAF
+	TKCAF
+	TKViewerTest
+	TKBO
+	TKG3d
+	TKTopAlgo
+	TKGeomBase
+	TKV3d
+	TKService
+	TKMath
+	TKCDF
+	TKBRep
+	TKGeomAlgo
+	TKFillet
+	TKG2d
+	TKDraw
+	TKPrim
+	TKNIS
+	TKV2d
+)
+
+SET(TOOLKIT_IS_PRIVATE TRUE)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKDraw/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKDraw/CMakeLists.txt
@@ -0,0 +1,33 @@
+SET(TOOLKIT TKDraw)
+
+SET(TOOLKIT_MODULES
+	Draw
+	DBRep
+	DrawTrSurf
+)
+SET(TOOLKIT_DEPENDS
+	TKernel
+	TKG3d
+	TKMath
+	TKBRep
+	TKMesh
+	TKTopAlgo
+	TKG2d
+	TKHLR
+	TKGeomBase
+	TKGeomAlgo
+	TKService
+)
+
+SET(TOOLKIT_INCLUDE_DIRECTORIES ${TCL_INCLUDE_PATH})
+SET(TOOLKIT_LIBS ${TCL_LIBRARY} ${CSF_gdi32_LIB} ${CSF_advapi32_LIB} ${CSF_user32_LIB})
+
+IF(NOT WIN32)
+	SET(TOOLKIT_INCLUDE_DIRECTORIES ${TOOLKIT_INCLUDE_DIRECTORIES} ${X11_X11_INCLUDE_PATH} ${TK_INCLUDE_PATH})
+	SET(TOOLKIT_LIBS ${TOOLKIT_LIBS} ${TK_LIBRARY} ${X11_X11_LIB})
+ENDIF(NOT WIN32)
+
+SET(TOOLKIT_IS_PRIVATE TRUE)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKFeat/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKFeat/CMakeLists.txt
@@ -0,0 +1,22 @@
+SET(TOOLKIT TKFeat)
+
+SET(TOOLKIT_MODULES
+	LocOpe
+	BRepFeat
+)
+SET(TOOLKIT_DEPENDS
+	TKGeomAlgo
+	TKernel
+	TKBool
+	TKG3d
+	TKMath
+	TKBO
+	TKG2d
+	TKTopAlgo
+	TKGeomBase
+	TKBRep
+	TKPrim
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKFillet/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKFillet/CMakeLists.txt
@@ -0,0 +1,27 @@
+SET(TOOLKIT TKFillet)
+
+SET(TOOLKIT_MODULES
+	ChFiDS
+	ChFi2d
+	ChFi3d
+	ChFiKPart
+	Blend
+	BRepBlend
+	BlendFunc
+	BRepFilletAPI
+	FilletSurf
+)
+SET(TOOLKIT_DEPENDS
+	TKernel
+	TKGeomAlgo
+	TKBool
+	TKG3d
+	TKGeomBase
+	TKMath
+	TKG2d
+	TKTopAlgo
+	TKBRep
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKG2d/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKG2d/CMakeLists.txt
@@ -0,0 +1,19 @@
+SET(TOOLKIT TKG2d)
+
+SET(TOOLKIT_MODULES
+	Geom2d
+	LProp
+	TColGeom2d
+	Adaptor2d
+	Geom2dLProp
+	Geom2dAdaptor
+	TopAbs
+	GProp
+)
+SET(TOOLKIT_DEPENDS
+	TKernel
+	TKMath
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKG3d/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKG3d/CMakeLists.txt
@@ -0,0 +1,19 @@
+SET(TOOLKIT TKG3d)
+
+SET(TOOLKIT_MODULES
+	Geom
+	TColGeom
+	GeomAdaptor
+	AdvApprox
+	GeomLProp
+	Adaptor3d
+	LProp3d
+)
+SET(TOOLKIT_DEPENDS
+	TKMath
+	TKernel
+	TKG2d
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKGeomAlgo/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKGeomAlgo/CMakeLists.txt
@@ -0,0 +1,50 @@
+SET(TOOLKIT TKGeomAlgo)
+
+SET(TOOLKIT_MODULES
+	Hatch
+	GeomInt
+	IntStart
+	IntWalk
+	IntImp
+	IntCurveSurface
+	IntSurf
+	IntPatch
+	Geom2dInt
+	IntImpParGen
+	IntRes2d
+	IntCurve
+	TopTrans
+	Intf
+	ApproxInt
+	GccAna
+	GccEnt
+	GccInt
+	GccIter
+	GccGeo
+	HatchGen
+	Geom2dHatch
+	Law
+	AppBlend
+	Plate
+	GeomPlate
+	LocalAnalysis
+	GeomAPI
+	GeomFill
+	Geom2dAPI
+	Geom2dGcc
+	FairCurve
+	NLPlate
+	IntPolyh
+	TopClass
+)
+SET(TOOLKIT_DEPENDS
+	TKernel
+	TKG3d
+	TKGeomBase
+	TKMath
+	TKG2d
+	TKBRep
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKGeomBase/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKGeomBase/CMakeLists.txt
@@ -0,0 +1,35 @@
+SET(TOOLKIT TKGeomBase)
+
+SET(TOOLKIT_MODULES
+	ProjLib
+	GeomProjLib
+	GCPnts
+	CPnts
+	Approx
+	AppParCurves
+	FEmTool
+	AppCont
+	Extrema
+	IntAna
+	IntAna2d
+	GeomConvert
+	AdvApp2Var
+	GeomLib
+	Geom2dConvert
+	Hermit
+	BndLib
+	AppDef
+	GeomTools
+	GC
+	GCE2d
+	gce
+)
+SET(TOOLKIT_DEPENDS
+	TKernel
+	TKG3d
+	TKMath
+	TKG2d
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKHLR/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKHLR/CMakeLists.txt
@@ -0,0 +1,24 @@
+SET(TOOLKIT TKHLR)
+
+SET(TOOLKIT_MODULES
+	HLRTopoBRep
+	HLRBRep
+	HLRAlgo
+	Intrv
+	TopBas
+	TopCnx
+	Contap
+)
+SET(TOOLKIT_DEPENDS
+	TKernel
+	TKGeomBase
+	TKG3d
+	TKTopAlgo
+	TKMath
+	TKGeomAlgo
+	TKBRep
+	TKG2d
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKIGES/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKIGES/CMakeLists.txt
@@ -0,0 +1,40 @@
+SET(TOOLKIT TKIGES)
+
+SET(TOOLKIT_MODULES
+	IGESData
+	IGESFile
+	IGESBasic
+	IGESGraph
+	IGESGeom
+	IGESDimen
+	IGESDraw
+	IGESSolid
+	IGESDefs
+	IGESAppli
+	IGESConvGeom
+	IGESSelect
+	IGESToBRep
+	GeomToIGES
+	Geom2dToIGES
+	BRepToIGES
+	BRepToIGESBRep
+	IGESControl
+)
+SET(TOOLKIT_DEPENDS
+	TKernel
+	TKXSBase
+	TKG3d
+	TKMath
+	TKOffset
+	TKG2d
+	TKGeomBase
+	TKShHealing
+	TKTopAlgo
+	TKBRep
+	TKGeomAlgo
+	TKBool
+	TKPrim
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKLCAF/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKLCAF/CMakeLists.txt
@@ -0,0 +1,16 @@
+SET(TOOLKIT TKLCAF)
+
+SET(TOOLKIT_MODULES
+	TDF
+	TDataStd
+	TFunction
+	TDocStd
+	AppStdL
+)
+SET(TOOLKIT_DEPENDS
+	TKCDF
+	TKernel
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKMath/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKMath/CMakeLists.txt
@@ -0,0 +1,23 @@
+SET(TOOLKIT TKMath)
+
+SET(TOOLKIT_MODULES
+	math
+	ElCLib
+	ElSLib
+	BSplCLib
+	BSplSLib
+	PLib
+	Precision
+	GeomAbs
+	Poly
+	CSLib
+	Convert
+	Bnd
+	gp
+	TColgp
+	TopLoc
+)
+SET(TOOLKIT_DEPENDS TKernel)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKMesh/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKMesh/CMakeLists.txt
@@ -0,0 +1,30 @@
+SET(TOOLKIT TKMesh)
+
+SET(TOOLKIT_MODULES
+	MeshDS
+	BRepMesh
+	MeshAlgo
+	IntPoly
+)
+SET(TOOLKIT_DEPENDS
+	TKMath
+	TKernel
+	TKG2d
+	TKGeomBase
+	TKBRep
+	TKG3d
+	TKGeomAlgo
+	TKTopAlgo
+)
+IF(${PROJECT_NAME}_MULTITHREAD_LIBRARY STREQUAL "TBB" AND TBB_INCLUDE_DIR AND TBB_LIBRARY)
+	ADD_DEFINITIONS(-DHAVE_TBB)
+	SET(TOOLKIT_INCLUDE_DIRECTORIES ${TBB_INCLUDE_DIR})
+	SET(TOOLKIT_LIBS_OPTIMIZED ${TBB_LIBRARY})
+	SET(TOOLKIT_LIBS_DEBUG ${TBB_LIBRARY_DEBUG})
+ENDIF(${PROJECT_NAME}_MULTITHREAD_LIBRARY STREQUAL "TBB" AND TBB_INCLUDE_DIR AND TBB_LIBRARY)
+IF(${PROJECT_NAME}_MULTITHREAD_LIBRARY STREQUAL "OPENMP" AND OPENMP_FOUND)
+	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
+ENDIF(${PROJECT_NAME}_MULTITHREAD_LIBRARY STREQUAL "OPENMP" AND OPENMP_FOUND)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKMeshVS/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKMeshVS/CMakeLists.txt
@@ -0,0 +1,17 @@
+SET(TOOLKIT TKMeshVS)
+
+SET(TOOLKIT_MODULES
+	MeshVS
+)
+SET(TOOLKIT_DEPENDS
+	TKService
+	TKMath
+	TKernel
+	TKV3d
+	TKV2d
+	TKG2d
+	TKG3d
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKNIS/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKNIS/CMakeLists.txt
@@ -0,0 +1,19 @@
+SET(TOOLKIT TKNIS)
+
+SET(TOOLKIT_MODULES
+	NIS
+)
+SET(TOOLKIT_DEPENDS
+	TKService
+	TKMath
+	TKernel
+	TKG2d
+	TKBRep
+	TKG3d
+	TKV3d
+)
+SET(TOOLKIT_LIBS ${OPENGL_LIBRARIES})
+SET(TOOLKIT_INCLUDE_DIRECTORIES ${OPENGL_INCLUDE_DIR})
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKOffset/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKOffset/CMakeLists.txt
@@ -0,0 +1,26 @@
+SET(TOOLKIT TKOffset)
+
+SET(TOOLKIT_MODULES
+	BRepOffsetAPI
+	Draft
+	BRepOffset
+	BiTgte
+)
+SET(TOOLKIT_DEPENDS
+	TKBool
+	TKGeomAlgo
+	TKernel
+	TKGeomBase
+	TKTopAlgo
+	TKMath
+	TKBO
+	TKG2d
+	TKG3d
+	TKBRep
+	TKShHealing
+	TKFillet
+	TKPrim
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKOpenGl/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKOpenGl/CMakeLists.txt
@@ -0,0 +1,36 @@
+SET(TOOLKIT TKOpenGl)
+
+SET(TOOLKIT_MODULES
+	OpenGl
+)
+SET(TOOLKIT_DEPENDS
+	TKService
+	TKernel
+	TKV3d
+)
+
+IF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
+	SET(TOOLKIT_LIBS ${OPENGL_LIBRARIES})
+	SET(TOOLKIT_LIBS_DEBUG ${FTGL_LIBRARY_DEBUG} ${FREETYPE_LIBRARY_DEBUG})
+	SET(TOOLKIT_LIBS_OPTIMIZED ${FTGL_LIBRARY} ${FREETYPE_LIBRARIES})
+ELSE(CMAKE_CONFIGURATION_TYPES OR NMAKE)
+	SET(TOOLKIT_LIBS ${OPENGL_LIBRARIES} ${FREETYPE_LIBRARIES} ${FTGL_LIBRARY})
+ENDIF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
+
+SET(TOOLKIT_INCLUDE_DIRECTORIES ${OPENGL_INCLUDE_DIR} ${FREETYPE_INCLUDE_DIRS} ${FTGL_INCLUDE_DIR})
+
+IF(GL2PS_LIBRARY AND ${PROJECT_NAME}_WITH_GL2PS)
+	ADD_DEFINITIONS(-DHAVE_GL2PS)
+
+	IF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
+		SET(TOOLKIT_LIBS_DEBUG ${TOOLKIT_LIBS_DEBUG} ${GL2PS_LIBRARY_DEBUG})
+		SET(TOOLKIT_LIBS_OPTIMIZED ${TOOLKIT_LIBS_OPTIMIZED} ${GL2PS_LIBRARY})
+	ELSE (CMAKE_CONFIGURATION_TYPES OR NMAKE)
+		SET(TOOLKIT_LIBS ${TOOLKIT_LIBS} ${GL2PS_LIBRARY})
+	ENDIF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
+
+	SET(TOOLKIT_INCLUDE_DIRECTORIES ${TOOLKIT_INCLUDE_DIRECTORIES} ${GL2PS_INCLUDE_DIR})
+ENDIF(GL2PS_LIBRARY AND ${PROJECT_NAME}_WITH_GL2PS)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKPCAF/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKPCAF/CMakeLists.txt
@@ -0,0 +1,29 @@
+SET(TOOLKIT TKPCAF)
+
+SET(TOOLKIT_MODULES
+	PDataXtd
+	PNaming
+	PPrsStd
+	MDataXtd
+	MPrsStd
+	MNaming
+)
+SET(TOOLKIT_DEPENDS
+	TKernel
+	TKCAF
+	TKLCAF
+	TKPLCAF
+	TKG3d
+	TKV3d
+	TKService
+	PTKernel
+	TKMath
+	TKG2d
+	TKPShape
+	TKCDF
+	TKV2d
+	TKBRep
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKPLCAF/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKPLCAF/CMakeLists.txt
@@ -0,0 +1,21 @@
+SET(TOOLKIT TKPLCAF)
+
+SET(TOOLKIT_MODULES
+	PDF
+	PDataStd
+	PFunction
+	PDocStd
+	MDF
+	MDataStd
+	MFunction
+	MDocStd
+)
+SET(TOOLKIT_DEPENDS
+	TKernel
+	TKLCAF
+	TKCDF
+	PTKernel
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKPShape/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKPShape/CMakeLists.txt
@@ -0,0 +1,30 @@
+SET(TOOLKIT TKPShape)
+
+SET(TOOLKIT_MODULES
+	PBRep
+	PTopoDS
+	PGeom
+	PGeom2d
+	PPoly
+	PColgp
+	PTopLoc
+	PColPGeom
+	PColPGeom2d
+	MgtBRep
+	MgtGeom
+	MgtGeom2d
+	MgtPoly
+	MgtTopLoc
+	MgtTopoDS
+)
+SET(TOOLKIT_DEPENDS
+	TKMath
+	TKG2d
+	TKernel
+	PTKernel
+	TKBRep
+	TKG3d
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKPrim/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKPrim/CMakeLists.txt
@@ -0,0 +1,21 @@
+SET(TOOLKIT TKPrim)
+
+SET(TOOLKIT_MODULES
+	BRepPrim
+	Primitives
+	BRepSweep
+	Sweep
+	BRepPrimAPI
+)
+SET(TOOLKIT_DEPENDS
+	TKMath
+	TKernel
+	TKG2d
+	TKBRep
+	TKGeomBase
+	TKG3d
+	TKTopAlgo
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKSTEP/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKSTEP/CMakeLists.txt
@@ -0,0 +1,36 @@
+SET(TOOLKIT TKSTEP)
+
+SET(TOOLKIT_MODULES
+	StepAP214
+	RWStepAP214
+	StepAP203
+	RWStepAP203
+	STEPConstruct
+	STEPEdit
+	GeomToStep
+	StepToGeom
+	StepToTopoDS
+	TopoDSToStep
+	STEPControl
+	STEPSelections
+	StepAP209
+)
+SET(TOOLKIT_DEPENDS
+	TKernel
+	TKXSBase
+	TKSTEPBase
+	TKSTEPAttr
+	TKMath
+	TKG3d
+	TKG2d
+	TKShHealing
+	TKSTEP209
+	TKGeomBase
+	TKBRep
+	TKTopAlgo
+	TKGeomAlgo
+)
+SET(TOOLKIT_LIBS ${CSF_wsock32_LIB})
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKSTEP209/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKSTEP209/CMakeLists.txt
@@ -0,0 +1,16 @@
+SET(TOOLKIT TKSTEP209)
+
+SET(TOOLKIT_MODULES
+	StepElement
+	StepFEA
+	RWStepElement
+	RWStepFEA
+)
+SET(TOOLKIT_DEPENDS
+	TKSTEPBase
+	TKernel
+	TKXSBase
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKSTEPAttr/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKSTEPAttr/CMakeLists.txt
@@ -0,0 +1,16 @@
+SET(TOOLKIT TKSTEPAttr)
+
+SET(TOOLKIT_MODULES
+	StepVisual
+	RWStepVisual
+	StepDimTol
+	RWStepDimTol
+)
+SET(TOOLKIT_DEPENDS
+	TKSTEPBase
+	TKernel
+	TKXSBase
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKSTEPBase/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKSTEPBase/CMakeLists.txt
@@ -0,0 +1,20 @@
+SET(TOOLKIT TKSTEPBase)
+
+SET(TOOLKIT_MODULES
+	StepBasic
+	RWStepBasic
+	StepRepr
+	RWStepRepr
+	StepGeom
+	RWStepGeom
+	StepShape
+	RWStepShape
+)
+SET(TOOLKIT_DEPENDS
+	TKernel
+	TKXSBase
+	TKMath
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKSTL/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKSTL/CMakeLists.txt
@@ -0,0 +1,20 @@
+SET(TOOLKIT TKSTL)
+
+SET(TOOLKIT_MODULES
+	StlMesh
+	StlAPI
+	StlTransfer
+	RWStl
+)
+SET(TOOLKIT_DEPENDS
+	TKMath
+	TKernel
+	TKG2d
+	TKMesh
+	TKBRep
+	TKG3d
+	TKTopAlgo
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKService/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKService/CMakeLists.txt
@@ -0,0 +1,43 @@
+SET(TOOLKIT TKService)
+
+SET(TOOLKIT_MODULES
+	AlienImage
+	Aspect
+	CGM
+	Image
+	MFT
+	PS
+	PlotMgt
+	SelectBasics
+	TColQuantity
+	Viewer
+)
+IF (WIN32)
+	SET(TOOLKIT_MODULES ${TOOLKIT_MODULES}
+		InterfaceGraphic
+		WNT
+	)
+ELSE(WIN32)
+	SET(TOOLKIT_MODULES ${TOOLKIT_MODULES}
+		ImageUtility
+		Xw
+	)
+	SET(TOOLKIT_LIBS ${X11_Xmu_LIB} ${X11_LIBRARIES})
+ENDIF(WIN32)
+SET(TOOLKIT_DEPENDS TKMath TKernel)
+
+IF(FREEIMAGE_LIBRARY AND ${PROJECT_NAME}_WITH_FREEIMAGE)
+	ADD_DEFINITIONS(-DHAVE_FREEIMAGE)
+
+	IF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
+		SET(TOOLKIT_LIBS_DEBUG ${TOOLKIT_LIBS_DEBUG} ${FREEIMAGE_LIBRARY_DEBUG})
+		SET(TOOLKIT_LIBS_OPTIMIZED ${TOOLKIT_LIBS_OPTIMIZED} ${FREEIMAGE_LIBRARY})
+	ELSE (CMAKE_CONFIGURATION_TYPES OR NMAKE)
+		SET(TOOLKIT_LIBS ${TOOLKIT_LIBS} ${FREEIMAGE_LIBRARY})
+	ENDIF(CMAKE_CONFIGURATION_TYPES OR NMAKE)
+
+	SET(TOOLKIT_INCLUDE_DIRECTORIES ${TOOLKIT_INCLUDE_DIRECTORIES} ${FREEIMAGE_INCLUDE_DIR})
+ENDIF(FREEIMAGE_LIBRARY AND ${PROJECT_NAME}_WITH_FREEIMAGE)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKShHealing/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKShHealing/CMakeLists.txt
@@ -0,0 +1,28 @@
+SET(TOOLKIT TKShHealing)
+
+SET(TOOLKIT_MODULES
+	ShapeBuild
+	ShapeExtend
+	ShapeConstruct
+	ShapeCustom
+	ShapeAnalysis
+	ShapeFix
+	ShapeUpgrade
+	ShapeAlgo
+	ShapeProcess
+	ShapeProcessAPI
+)
+SET(TOOLKIT_DEPENDS
+	TKernel
+	TKGeomBase
+	TKMath
+	TKG2d
+	TKG3d
+	TKTopAlgo
+	TKBRep
+	TKGeomAlgo
+)
+SET(TOOLKIT_LIBS ${CSF_wsock32_LIB})
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKShapeSchema/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKShapeSchema/CMakeLists.txt
@@ -0,0 +1,17 @@
+SET(TOOLKIT TKShapeSchema)
+
+SET(TOOLKIT_MODULES
+	ShapeSchema
+	PCDMShape
+)
+SET(TOOLKIT_DEPENDS
+	TKMath
+	TKPShape
+	TKernel
+	PTKernel
+	TKG2d
+	TKCDF
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKStdLSchema/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKStdLSchema/CMakeLists.txt
@@ -0,0 +1,17 @@
+SET(TOOLKIT TKStdLSchema)
+
+SET(TOOLKIT_MODULES
+	StdLSchema
+	StdLDrivers
+)
+SET(TOOLKIT_DEPENDS
+	TKernel
+	TKPLCAF
+	TKLCAF
+	PTKernel
+	TKCDF
+	TKShapeSchema
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKStdSchema/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKStdSchema/CMakeLists.txt
@@ -0,0 +1,24 @@
+SET(TOOLKIT TKStdSchema)
+
+SET(TOOLKIT_MODULES
+	StdSchema
+	StdDrivers
+)
+SET(TOOLKIT_DEPENDS
+	TKMath
+	TKPCAF
+	TKernel
+	TKLCAF
+	TKCAF
+	TKPLCAF
+	TKPShape
+	PTKernel
+	TKG2d
+	TKG3d
+	TKCDF
+	TKShapeSchema
+	TKStdLSchema
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKTObj/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKTObj/CMakeLists.txt
@@ -0,0 +1,14 @@
+SET(TOOLKIT TKTObj)
+
+SET(TOOLKIT_MODULES
+	TObj
+)
+SET(TOOLKIT_DEPENDS
+	TKMath
+	TKernel
+	TKLCAF
+	TKCDF
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKTObjDRAW/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKTObjDRAW/CMakeLists.txt
@@ -0,0 +1,19 @@
+SET(TOOLKIT TKTObjDRAW)
+
+SET(TOOLKIT_MODULES
+	TObjDRAW
+)
+SET(TOOLKIT_DEPENDS
+	TKTObj
+	TKMath
+	TKDCAF
+	TKLCAF
+	TKCDF
+	TKernel
+	TKDraw
+)
+
+SET(TOOLKIT_IS_PRIVATE TRUE)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKTopAlgo/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKTopAlgo/CMakeLists.txt
@@ -0,0 +1,32 @@
+SET(TOOLKIT TKTopAlgo)
+
+SET(TOOLKIT_MODULES
+	IntCurvesFace
+	MAT
+	MAT2d
+	Bisector
+	BRepMAT2d
+	BRepCheck
+	BRepBndLib
+	BRepExtrema
+	BRepClass
+	BRepClass3d
+	BRepLib
+	BRepGProp
+	BRepIntCurveSurface
+	BRepTopAdaptor
+	BRepBuilderAPI
+	BRepApprox
+)
+SET(TOOLKIT_DEPENDS
+	TKernel
+	TKGeomBase
+	TKMath
+	TKGeomAlgo
+	TKG2d
+	TKG3d
+	TKBRep
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKTopTest/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKTopTest/CMakeLists.txt
@@ -0,0 +1,41 @@
+SET(TOOLKIT TKTopTest)
+
+SET(TOOLKIT_MODULES
+	TestTopOpeDraw
+	TestTopOpeTools
+	TestTopOpe
+	BRepTest
+	GeometryTest
+	HLRTest
+	MeshTest
+	GeomliteTest
+	DrawFairCurve
+	BOPTest
+)
+SET(TOOLKIT_DEPENDS
+	TKernel
+	TKBool
+	TKGeomAlgo
+	TKMesh
+	TKG3d
+	TKGeomBase
+	TKFeat
+	TKTopAlgo
+	TKBO
+	TKMath
+	TKG2d
+	TKOffset
+	TKService
+	TKV3d
+	TKHLR
+	TKBRep
+	TKFillet
+	TKDraw
+	TKPrim
+	TKV2d
+)
+
+SET(TOOLKIT_IS_PRIVATE TRUE)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKV2d/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKV2d/CMakeLists.txt
@@ -0,0 +1,25 @@
+SET(TOOLKIT TKV2d)
+
+SET(TOOLKIT_MODULES
+	V2d
+	Graphic2d
+	Select2D
+	Prs2d
+	AIS2D
+	GGraphic2d
+)
+SET(TOOLKIT_DEPENDS
+	TKernel
+	TKService
+	TKG2d
+	TKG3d
+	TKTopAlgo
+	TKMath
+	TKBRep
+	TKGeomBase
+	TKHLR
+	TKGeomAlgo
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKV3d/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKV3d/CMakeLists.txt
@@ -0,0 +1,33 @@
+SET(TOOLKIT TKV3d)
+
+SET(TOOLKIT_MODULES
+	V3d
+	Graphic3d
+	Visual3d
+	Select3D
+	Prs3d
+	StdPrs
+	SelectMgr
+	PrsMgr
+	AIS
+	DsgPrs
+	StdSelect
+)
+SET(TOOLKIT_DEPENDS
+	TKernel
+	TKG3d
+	TKTopAlgo
+	TKGeomBase
+	TKService
+	TKMath
+	TKMesh
+	TKGeomAlgo
+	TKHLR
+	TKBRep
+	TKG2d
+	TKV2d
+)
+SET(TOOLKIT_LIBS ${CSF_user32_LIB} ${CSF_gdi32_LIB})
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKVRML/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKVRML/CMakeLists.txt
@@ -0,0 +1,26 @@
+SET(TOOLKIT TKVRML)
+
+SET(TOOLKIT_MODULES
+	VrmlConverter
+	VrmlAPI
+	Vrml
+	VrmlData
+)
+SET(TOOLKIT_DEPENDS
+	TKernel
+	TKG3d
+	TKTopAlgo
+	TKMath
+	TKBRep
+	TKMesh
+	TKG2d
+	TKHLR
+	TKGeomBase
+	TKPrim
+	TKGeomAlgo
+	TKService
+	TKV3d
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKViewerTest/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKViewerTest/CMakeLists.txt
@@ -0,0 +1,42 @@
+SET(TOOLKIT TKViewerTest)
+
+SET(TOOLKIT_MODULES
+	Viewer2dTest
+	ViewerTest
+)
+SET(TOOLKIT_DEPENDS
+	TKernel
+	TKBool
+	TKG2d
+	TKOffset
+	TKG3d
+	TKGeomBase
+	TKTopAlgo
+	TKV2d
+	TKV3d
+	TKDraw
+	TKOpenGl
+	TKService
+	TKMath
+	TKBRep
+	TKMesh
+	TKGeomAlgo
+	TKFillet
+	TKTopTest
+	TKHLR
+	TKVoxel
+	TKNIS
+	TKPrim
+)
+
+IF(WIN32)
+	SET(TOOLKIT_LIBS ${CSF_user32_LIB} ${CSF_gdi32_LIB})
+ELSE(WIN32)
+	SET(TOOLKIT_INCLUDE_DIRECTORIES ${X11_X11_INCLUDE_PATH} ${TK_INCLUDE_PATH})
+	SET(TOOLKIT_LIBS ${TK_LIBRARY} ${X11_X11_LIB})
+ENDIF(WIN32)
+
+SET(TOOLKIT_IS_PRIVATE TRUE)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKVoxel/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKVoxel/CMakeLists.txt
@@ -0,0 +1,24 @@
+SET(TOOLKIT TKVoxel)
+
+SET(TOOLKIT_MODULES
+	Voxel
+)
+SET(TOOLKIT_DEPENDS
+	TKMath
+	TKernel
+	TKService
+	TKMesh
+	TKV3d
+	TKG2d
+	TKV2d
+	TKBRep
+	TKGeomBase
+	TKG3d
+	TKTopAlgo
+)
+
+SET(TOOLKIT_LIBS ${OPENGL_LIBRARIES})
+SET(TOOLKIT_INCLUDE_DIRECTORIES ${OPENGL_INCLUDE_DIR})
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKXCAF/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKXCAF/CMakeLists.txt
@@ -0,0 +1,24 @@
+SET(TOOLKIT TKXCAF)
+
+SET(TOOLKIT_MODULES
+	XCAFApp
+	XCAFDoc
+	XCAFPrs
+)
+SET(TOOLKIT_DEPENDS
+	TKernel
+	TKMath
+	TKService
+	TKV3d
+	TKLCAF
+	TKG2d
+	TKCDF
+	TKCAF
+	TKBRep
+	TKV2d
+	TKG3d
+	TKTopAlgo
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKXCAFSchema/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKXCAFSchema/CMakeLists.txt
@@ -0,0 +1,24 @@
+SET(TOOLKIT TKXCAFSchema)
+
+SET(TOOLKIT_MODULES
+	MXCAFDoc
+	PXCAFDoc
+	XCAFDrivers
+	XCAFSchema
+)
+SET(TOOLKIT_DEPENDS
+	TKMath
+	TKernel
+	TKLCAF
+	TKStdSchema
+	TKPLCAF
+	TKPShape
+	PTKernel
+	TKXCAF
+	TKCDF
+	TKShapeSchema
+	TKStdLSchema
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKXDEDRAW/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKXDEDRAW/CMakeLists.txt
@@ -0,0 +1,36 @@
+SET(TOOLKIT TKXDEDRAW)
+
+SET(TOOLKIT_MODULES
+	XDEDRAW
+)
+SET(TOOLKIT_DEPENDS
+	TKernel
+	TKLCAF
+	TKXSBase
+	TKXCAF
+	TKViewerTest
+	TKXSDRAW
+	TKG3d
+	TKCAF
+	TKV3d
+	TKService
+	TKMath
+	TKCDF
+	TKBRep
+	TKDCAF
+	TKMesh
+	TKTopAlgo
+	TKG2d
+	TKDraw
+	TKSTEPBase
+	TKIGES
+	TKXDESTEP
+	TKNIS
+	TKSTEP
+	TKXDEIGES
+)
+
+SET(TOOLKIT_IS_PRIVATE TRUE)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKXDEIGES/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKXDEIGES/CMakeLists.txt
@@ -0,0 +1,19 @@
+SET(TOOLKIT TKXDEIGES)
+
+SET(TOOLKIT_MODULES
+	IGESCAFControl
+)
+SET(TOOLKIT_DEPENDS
+	TKernel
+	TKXCAF
+	TKLCAF
+	TKXSBase
+	TKBRep
+	TKIGES
+	TKG2d
+	TKMath
+	TKCDF
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKXDESTEP/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKXDESTEP/CMakeLists.txt
@@ -0,0 +1,23 @@
+SET(TOOLKIT TKXDESTEP)
+
+SET(TOOLKIT_MODULES
+	STEPCAFControl
+)
+SET(TOOLKIT_DEPENDS
+	TKMath
+	TKernel
+	TKXCAF
+	TKLCAF
+	TKXSBase
+	TKSTEPBase
+	TKG2d
+	TKSTEP
+	TKBRep
+	TKG3d
+	TKCAF
+	TKSTEPAttr
+	TKCDF
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKXMesh/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKXMesh/CMakeLists.txt
@@ -0,0 +1,15 @@
+SET(TOOLKIT TKXMesh)
+
+SET(TOOLKIT_MODULES
+	XBRepMesh
+)
+SET(TOOLKIT_DEPENDS
+	TKMesh
+	TKG2d
+	TKernel
+	TKMath
+	TKBRep
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKXSBase/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKXSBase/CMakeLists.txt
@@ -0,0 +1,33 @@
+SET(TOOLKIT TKXSBase)
+
+SET(TOOLKIT_MODULES
+	Interface
+	Transfer
+	IFGraph
+	IFSelect
+	TransferBRep
+	XSControl
+	StepData
+	StepFile
+	HeaderSection
+	RWHeaderSection
+	APIHeaderSection
+	StepSelect
+	UnitsMethods
+	XSAlgo
+	LibCtl
+	MoniTool
+)
+SET(TOOLKIT_DEPENDS
+	TKernel
+	TKMath
+	TKG2d
+	TKG3d
+	TKShHealing
+	TKBRep
+	TKGeomBase
+	TKTopAlgo
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKXSDRAW/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKXSDRAW/CMakeLists.txt
@@ -0,0 +1,39 @@
+SET(TOOLKIT TKXSDRAW)
+
+SET(TOOLKIT_MODULES
+	SWDRAW
+	XSDRAW
+	XSDRAWIGES
+	XSDRAWSTEP
+	XSDRAWSTLVRML
+)
+SET(TOOLKIT_DEPENDS
+	TKernel
+	TKXSBase
+	TKIGES
+	TKVRML
+	TKViewerTest
+	TKG2d
+	TKG3d
+	TKTopAlgo
+	TKShHealing
+	TKService
+	TKSTL
+	TKV3d
+	TKMesh
+	TKMath
+	TKBRep
+	TKGeomBase
+	TKDraw
+	TKSTEPBase
+	TKGeomAlgo
+	TKSTEP
+	TKMeshVS
+	TKNIS
+	TKV2d
+)
+
+SET(TOOLKIT_IS_PRIVATE TRUE)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKXml/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKXml/CMakeLists.txt
@@ -0,0 +1,24 @@
+SET(TOOLKIT TKXml)
+
+SET(TOOLKIT_MODULES
+	XmlDrivers
+	XmlMDataXtd
+	XmlMNaming
+	XmlMPrsStd
+)
+SET(TOOLKIT_DEPENDS
+	TKMath
+	TKernel
+	TKLCAF
+	TKG2d
+	TKCAF
+	TKV3d
+	TKBRep
+	TKXmlL
+	TKG3d
+	TKCDF
+	TKGeomBase
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKXmlL/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKXmlL/CMakeLists.txt
@@ -0,0 +1,19 @@
+SET(TOOLKIT TKXmlL)
+
+SET(TOOLKIT_MODULES
+	XmlLDrivers
+	XmlMDF
+	XmlMDataStd
+	XmlMDocStd
+	XmlMFunction
+	XmlObjMgt
+)
+SET(TOOLKIT_DEPENDS
+	TKernel
+	TKMath
+	TKLCAF
+	TKCDF
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKXmlTObj/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKXmlTObj/CMakeLists.txt
@@ -0,0 +1,16 @@
+SET(TOOLKIT TKXmlTObj)
+
+SET(TOOLKIT_MODULES
+	XmlTObjDrivers
+)
+SET(TOOLKIT_DEPENDS
+	TKernel
+	TKTObj
+	TKMath
+	TKLCAF
+	TKXmlL
+	TKCDF
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKXmlXCAF/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKXmlXCAF/CMakeLists.txt
@@ -0,0 +1,23 @@
+SET(TOOLKIT TKXmlXCAF)
+
+SET(TOOLKIT_MODULES
+	XmlXCAFDrivers
+	XmlMXCAFDoc
+)
+SET(TOOLKIT_DEPENDS
+	TKernel
+	TKMath
+	TKLCAF
+	TKG2d
+	TKXmlL
+	TKBRep
+	TKG3d
+	TKXCAF
+	TKCAF
+	TKCDF
+	TKGeomBase
+	TKXml
+)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/adm/cmake/TKernel/CMakeLists.txt
===================================================================
--- /dev/null
+++ oce/adm/cmake/TKernel/CMakeLists.txt
@@ -0,0 +1,55 @@
+SET(TOOLKIT TKernel)
+
+SET(TOOLKIT_MODULES
+	FSD
+	MMgt
+	OSD
+	Plugin
+	Quantity
+	Resource
+	SortTools
+	Standard
+	StdFail
+	Storage
+	TColStd
+	TCollection
+	TShort
+	Units
+	UnitsAPI
+	IncludeLibrary
+	Dico
+	NCollection
+	Message
+)
+IF(CMAKE_THREAD_LIBS_INIT)
+	SET(TOOLKIT_LIBS ${CMAKE_THREAD_LIBS_INIT})
+ENDIF(CMAKE_THREAD_LIBS_INIT)
+SET(TOOLKIT_LIBS ${TOOLKIT_LIBS} ${CMAKE_DL_LIBS} ${LM})
+IF(WIN32)
+	SET(TOOLKIT_LIBS ${TOOLKIT_LIBS} ${CSF_SOCKETLibs_LIB} ${CSF_advapi32_LIB} ${CSF_gdi32_LIB} ${CSF_user32_LIB} ${CSF_kernel32_LIB})
+ELSE(WIN32)
+	#  An implementation for Mac OS X has been added in src/OSD/gettime_osx.h
+	IF(NOT APPLE)
+		INCLUDE( CheckFunctionExists )
+		CHECK_FUNCTION_EXISTS( clock_gettime CLOCK_GETTIME_IN_LIBC )
+		IF(NOT CLOCK_GETTIME_IN_LIBC)
+			INCLUDE( CheckLibraryExists )
+			CHECK_LIBRARY_EXISTS(rt clock_gettime "" CLOCK_GETTIME_IN_LIBRT)
+			IF(NOT CLOCK_GETTIME_IN_LIBRT)
+				MESSAGE(FATAL_ERROR "Could not find clock_gettime.")
+			ENDIF(NOT CLOCK_GETTIME_IN_LIBRT)
+			SET(TOOLKIT_LIBS ${TOOLKIT_LIBS} rt)
+		ENDIF(NOT CLOCK_GETTIME_IN_LIBC)
+	ENDIF(NOT APPLE)
+ENDIF(WIN32)
+
+# Adde-DHAVE_TBB in TKernel in order to benefit from Standard_MMgrTBBalloc
+IF(${PROJECT_NAME}_TBB_MALLOC_SUPPORT AND TBB_INCLUDE_DIR AND TBB_MALLOC_LIBRARY)
+	ADD_DEFINITIONS(-DHAVE_TBB)
+	SET(TOOLKIT_INCLUDE_DIRECTORIES ${TBB_INCLUDE_DIR})
+	SET(TOOLKIT_LIBS_OPTIMIZED ${TBB_MALLOC_LIBRARY})
+	SET(TOOLKIT_LIBS_DEBUG ${TBB_MALLOC_LIBRARY_DEBUG})
+ENDIF(${PROJECT_NAME}_TBB_MALLOC_SUPPORT AND TBB_INCLUDE_DIR AND TBB_MALLOC_LIBRARY)
+
+INCLUDE(../BuildToolkit.cmake)
+
Index: oce/env.csh
===================================================================
--- oce.orig/env.csh
+++ /dev/null
@@ -1,69 +0,0 @@
-#!/bin/csh -f
-
-setenv CASROOT "Open CASCADE location/ros"
-
-setenv OS_NAME `uname`
-
-setenv OCCT3RDPARTY "3rdparty products for building and launching Open CASCADE Technology and samples"
-
-#Please define carefully listed below environment variables
-if (! $?TCLHOME ) then 
-    setenv TCLHOME $OCCT3RDPARTY/tcltk 
-endif
-if (! $?QTDIR ) then 
-    setenv QTDIR $OCCT3RDPARTY/qt 
-endif
-if (! $?FTGLDIR ) then 
-    setenv FTGLDIR $OCCT3RDPARTY/ftgl 
-endif
-if (! $?GL2PSDIR ) then 
-    setenv GL2PSDIR $OCCT3RDPARTY/gl2ps 
-endif
-if (! $?FREEIMAGEDIR ) then 
-    setenv FREEIMAGEDIR $OCCT3RDPARTY/freeimage
-endif
-if (! $?TBBBIN ) then 
-    setenv TBBBIN $OCCT3RDPARTY/tbb/bin 
-endif
-if (! $?TBBLIB ) then 
-    setenv TBBLIB $OCCT3RDPARTY/tbb/lib 
-endif
-
-if ( $?PATH ) then
-      setenv PATH "$TCLHOME/bin:$QTDIR/bin:$FTGLDIR/bin:$GL2PSDIR/bin:$FREEIMAGEDIR/bin:$TBBBIN:$CASROOT/$OS_NAME/bin:$PATH"
-else 
-      setenv PATH "$TCLHOME/bin:$QTDIR/bin:$FTGLDIR/bin:$GL2PSDIR/bin:$FREEIMAGEDIR/bin:$TBBBIN:$CASROOT/$OS_NAME/bin"
-endif
-
-if ( $?LD_LIBRARY_PATH ) then
-      setenv LD_LIBRARY_PATH "$TCLHOME/lib:$QTDIR/lib:$FTGLDIR/lib:$GL2PSDIR/lib:$FREEIMAGEDIR/lib:$TBBLIB:$CASROOT/$OS_NAME/lib:$LD_LIBRARY_PATH"
-else
-      setenv LD_LIBRARY_PATH "$TCLHOME/lib:$QTDIR/lib:$FTGLDIR/lib:$GL2PSDIR/lib:$FREEIMAGEDIR/lib:$TBBLIB:$CASROOT/$OS_NAME/lib"
-endif
-
-setenv CSF_MDTVFontDirectory $CASROOT/src/FontMFT
-setenv CSF_LANGUAGE us
-setenv MMGT_CLEAR 1
-setenv CSF_EXCEPTION_PROMPT 1
-setenv CSF_SHMessage $CASROOT/src/SHMessage
-setenv CSF_MDTVTexturesDirectory $CASROOT/src/Textures
-setenv CSF_XSMessage $CASROOT/src/XSMessage
-setenv CSF_StandardDefaults $CASROOT/src/StdResource
-setenv CSF_PluginDefaults $CASROOT/src/StdResource
-setenv CSF_XCAFDefaults $CASROOT/src/StdResource
-setenv CSF_StandardLiteDefaults $CASROOT/src/StdResource
-setenv CSF_GraphicShr $CASROOT/$OS_NAME/lib/libTKOpenGl.so
-setenv CSF_UnitsLexicon $CASROOT/src/UnitsAPI/Lexi_Expr.dat
-setenv CSF_UnitsDefinition $CASROOT/src/UnitsAPI/Units.dat
-setenv CSF_IGESDefaults $CASROOT/src/XSTEPResource
-setenv CSF_STEPDefaults $CASROOT/src/XSTEPResource
-setenv CSF_XmlOcafResource $CASROOT/src/XmlOcafResource
-setenv CSF_MIGRATION_TYPES $CASROOT/src/StdResource/MigrationSheet.txt
-
-setenv TCLLIBPATH $TCLHOME/lib
-
-setenv TCLLIBPATH $TCLHOME/lib
-setenv TCL_LIBRARY $TCLLIBPATH/tcl8.5
-setenv TK_LIBRARY $TCLLIBPATH/tk8.5
-setenv TCLX_LIBRARY $TCLLIBPATH/tclx8.4
-setenv TCLLIBPATH "$TCLHOME/bin $TCLHOME/lib $TCL_LIBRARY $TK_LIBRARY $TCLX_LIBRARY"
Index: oce/env.csh.cmake
===================================================================
--- /dev/null
+++ oce/env.csh.cmake
@@ -0,0 +1,23 @@
+#!/bin/csh
+
+setenv CASROOT @OCE_ABSPATH_DATA_DIR@
+
+setenv CSF_MDTVFontDirectory $CASROOT/src/FontMFT
+setenv CSF_LANGUAGE us
+setenv MMGT_CLEAR 1
+setenv CSF_EXCEPTION_PROMPT 1
+setenv CSF_SHMessage $CASROOT/src/SHMessage
+setenv CSF_MDTVTexturesDirectory $CASROOT/src/Textures
+setenv CSF_XSMessage $CASROOT/src/XSMessage
+setenv CSF_StandardDefaults $CASROOT/src/StdResource
+setenv CSF_PluginDefaults $CASROOT/src/StdResource
+setenv CSF_XCAFDefaults $CASROOT/src/StdResource
+setenv CSF_StandardLiteDefaults $CASROOT/src/StdResource
+setenv CSF_GraphicShr @OCE_DEFAULT_CSF_GraphicShr@
+setenv CSF_UnitsLexicon $CASROOT/src/UnitsAPI/Lexi_Expr.dat
+setenv CSF_UnitsDefinition $CASROOT/src/UnitsAPI/Units.dat
+setenv CSF_IGESDefaults $CASROOT/src/XSTEPResource
+setenv CSF_STEPDefaults $CASROOT/src/XSTEPResource
+setenv CSF_XmlOcafResource $CASROOT/src/XmlOcafResource
+setenv CSF_MIGRATION_TYPES $CASROOT/src/StdResource/MigrationSheet.txt
+
Index: oce/env.sh
===================================================================
--- oce.orig/env.sh
+++ /dev/null
@@ -1,53 +0,0 @@
-#!/bin/sh -f
-
-export CASROOT="Open CASCADE location/ros"
-
-OS_NAME=`uname`
-
-export OCCT3RDPARTY="3rdparty products for building and launching Open CASCADE Technology and samples"
-
-#Please define carefully listed below environment variables
-if [ ! -n $TCLHOME ]; then export TCLHOME=$OCCT3RDPARTY/tcltk ; fi
-if [ ! -n $QTDIR ]; then export QTDIR=$OCCT3RDPARTY/qt ; fi
-if [ ! -n $FTGLDIR ]; then export FTGLDIR=$OCCT3RDPARTY/ftgl ; fi
-if [ ! -n $GL2PSDIR ]; then export GL2PSDIR=$OCCT3RDPARTY/gl2ps ; fi
-if [ ! -n $FREEIMAGEDIR ]; then export FREEIMAGEDIR=$OCCT3RDPARTY/freeimage ; fi
-if [ ! -n $TBBBIN ]; then export TBBBIN=$OCCT3RDPARTY/tbb/bin ; fi
-if [ ! -n $TBBLIB ]; then export TBBLIB=$OCCT3RDPARTY/tbb/lib ; fi
-
-if [ -z "PATH" ];
-then export PATH=$TCLHOME/bin:$QTDIR/bin:$FTGLDIR/bin:$GL2PSDIR/bin:$FREEIMAGEDIR/bin:$TBBBIN:$CASROOT/$OS_NAME/bin;
-else export PATH=$TCLHOME/bin:$QTDIR/bin:$FTGLDIR/bin:$GL2PSDIR/bin:$FREEIMAGEDIR/bin:$TBBBIN:$CASROOT/$OS_NAME/bin:$PATH;
-fi
-
-if [ -z "LD_LIBRARY_PATH" ];
-then export LD_LIBRARY_PATH=$TCLHOME/lib:$QTDIR/lib:$FTGLDIR/lib:$FREEIMAGEDIR/lib:$GL2PSDIR/lib:$TBBLIB:$CASROOT/$OS_NAME/lib;
-else export LD_LIBRARY_PATH=$TCLHOME/lib:$QTDIR/lib:$FTGLDIR/lib:$FREEIMAGEDIR/lib:$GL2PSDIR/lib:$TBBLIB:$CASROOT/$OS_NAME/lib:$LD_LIBRARY_PATH;
-fi
-
-export CSF_MDTVFontDirectory=$CASROOT/src/FontMFT
-export CSF_LANGUAGE=us
-export MMGT_CLEAR=1
-export CSF_EXCEPTION_PROMPT=1
-export CSF_SHMessage=$CASROOT/src/SHMessage
-export CSF_MDTVTexturesDirectory=$CASROOT/src/Textures
-export CSF_XSMessage=$CASROOT/src/XSMessage
-export CSF_StandardDefaults=$CASROOT/src/StdResource
-export CSF_PluginDefaults=$CASROOT/src/StdResource
-export CSF_XCAFDefaults=$CASROOT/src/StdResource
-export CSF_StandardLiteDefaults=$CASROOT/src/StdResource
-export CSF_GraphicShr=$CASROOT/$OS_NAME/lib/libTKOpenGl.so
-export CSF_UnitsLexicon=$CASROOT/src/UnitsAPI/Lexi_Expr.dat
-export CSF_UnitsDefinition=$CASROOT/src/UnitsAPI/Units.dat
-export CSF_IGESDefaults=$CASROOT/src/XSTEPResource
-export CSF_STEPDefaults=$CASROOT/src/XSTEPResource
-export CSF_XmlOcafResource=$CASROOT/src/XmlOcafResource
-export CSF_MIGRATION_TYPES=$CASROOT/src/StdResource/MigrationSheet.txt
-
-export TCLLIBPATH=$TCLHOME/lib
-
-export TCLLIBPATH=$TCLHOME/lib
-export TCL_LIBRARY=$TCLLIBPATH/tcl8.5
-export TK_LIBRARY=$TCLLIBPATH/tk8.5
-export TCLX_LIBRARY=$TCLLIBPATH/tclx8.4
-export TCLLIBPATH="$TCLHOME/bin $TCLHOME/lib $TCL_LIBRARY $TK_LIBRARY $TCLX_LIBRARY"
Index: oce/env.sh.cmake
===================================================================
--- /dev/null
+++ oce/env.sh.cmake
@@ -0,0 +1,23 @@
+#!/bin/sh
+
+export CASROOT=@OCE_ABSPATH_DATA_DIR@
+
+export CSF_MDTVFontDirectory=$CASROOT/src/FontMFT
+export CSF_LANGUAGE=us
+export MMGT_CLEAR=1
+export CSF_EXCEPTION_PROMPT=1
+export CSF_SHMessage=$CASROOT/src/SHMessage
+export CSF_MDTVTexturesDirectory=$CASROOT/src/Textures
+export CSF_XSMessage=$CASROOT/src/XSMessage
+export CSF_StandardDefaults=$CASROOT/src/StdResource
+export CSF_PluginDefaults=$CASROOT/src/StdResource
+export CSF_XCAFDefaults=$CASROOT/src/StdResource
+export CSF_StandardLiteDefaults=$CASROOT/src/StdResource
+export CSF_GraphicShr=@OCE_DEFAULT_CSF_GraphicShr@
+export CSF_UnitsLexicon=$CASROOT/src/UnitsAPI/Lexi_Expr.dat
+export CSF_UnitsDefinition=$CASROOT/src/UnitsAPI/Units.dat
+export CSF_IGESDefaults=$CASROOT/src/XSTEPResource
+export CSF_STEPDefaults=$CASROOT/src/XSTEPResource
+export CSF_XmlOcafResource=$CASROOT/src/XmlOcafResource
+export CSF_MIGRATION_TYPES=$CASROOT/src/StdResource/MigrationSheet.txt
+
Index: oce/oce_build_config.h.cmake
===================================================================
--- /dev/null
+++ oce/oce_build_config.h.cmake
@@ -0,0 +1,272 @@
+/****************************************************************
+**
+**  File: oce_build_config.h.cmake, build-inc/oce-config.h
+**
+**  This configuration header is used to build OCE. It is
+**  installed along other header files in order to know which
+**  macros had been defined when compiling OCE, but it must
+**  NOT be included when compiling 3rd party programs.
+**
+****************************************************************/
+
+
+/* Define to 1 if using `alloca.c'. */
+#cmakedefine C_ALLOCA 1
+
+/* define if the compiler allows redefinition of stream input and output */
+#cmakedefine DEF_IOS_OK 
+
+#cmakedefine OCE_HAVE_FSTREAM 1
+
+#cmakedefine OCE_HAVE_IOSTREAM 1
+
+#cmakedefine OCE_HAVE_IOMANIP 1
+
+#cmakedefine OCE_HAVE_LIMITS 1
+#cmakedefine OCE_HAVE_CLIMITS 1
+
+/* Define to 1 if you have the <dirent.h> header file. */
+#cmakedefine HAVE_DIRENT_H 1
+
+/* Define to 1 if you have the <dlfcn.h> header file. */
+#cmakedefine HAVE_DLFCN_H 1
+
+/* Define if you have the <dl.h> header file. */
+#cmakedefine HAVE_DL_H 1
+
+/* Define if we have the Adobe postscript library -ldps. */
+#cmakedefine HAVE_DPS
+
+/* Define to 1 if you have the <DPS/dpsXclient.h> header file. */
+#cmakedefine HAVE_DPS_DPSXCLIENT_H 1
+
+/* Define if we have a function called "finite" in -lm. */
+#cmakedefine HAVE_FINITE 
+
+/* Define to 1 if you have the <floatingpoint.h> header file. */
+#cmakedefine HAVE_FLOATINGPOINT_H 1
+
+/* Define to 1 if you have the <ieeefp.h> header file. */
+#cmakedefine HAVE_IEEEFP_H 1
+
+/* Define to 1 if you have the <iomanip.h> header file. */
+#cmakedefine OCE_HAVE_IOMANIP_H 1
+
+/* Define to 1 if you have the <ios> header file. */
+#cmakedefine HAVE_IOS 1
+
+/* Define to 1 if you have the <fstream.h> header file. */
+#cmakedefine OCE_HAVE_FSTREAM_H 1
+
+/* Define to 1 if you have the <ios.h> header file. */
+#cmakedefine HAVE_IOS_H 1
+
+/* Define to 1 if you have the <iostream.h> header file. */
+#cmakedefine OCE_HAVE_IOSTREAM_H 1
+
+/* Define to 1 if you have the <libc.h> header file. */
+#cmakedefine HAVE_LIBC_H 1
+
+/* Define to 1 if you have the `e' library (-le). */
+#cmakedefine HAVE_LIBE 1
+
+/* Define to 1 if you have the `inks' library (-links). */
+#cmakedefine HAVE_LIBINKS 1
+
+/* Define to 1 if you have the <limits> header file. */
+#cmakedefine OCE_HAVE_LIMITS_H 1
+
+/* Define to 1 if you have the <malloc.h> header file. */
+#cmakedefine HAVE_MALLOC_H 1
+
+/* Define to 1 if you have the <ndir.h> header file. */
+#cmakedefine HAVE_NDIR_H 1
+
+/* Define to 1 if you have the <netdb.h> header file. */
+#cmakedefine HAVE_NETDB_H 1
+
+/* Define to 1 if you have the <net/if.h> header file. */
+#cmakedefine HAVE_NET_IF_H 1
+
+/* Define to 1 if you have the <osfcn.h> header file. */
+#cmakedefine HAVE_OSFCN_H 1
+
+/* Define to 1 if you have the <pwd.h> header file. */
+#cmakedefine HAVE_PWD_H 1
+
+/* Define to 1 if you have the <sigfpe.h> header file. */
+#cmakedefine HAVE_SIGFPE_H 1
+
+/* Define to 1 if you have the <signal.h> header file. */
+#cmakedefine HAVE_SIGNAL_H 1
+
+/* Define to 1 if you have the `statfs' function. */
+#cmakedefine HAVE_STATFS 1
+
+/* Define to 1 if you have the `statvfs' function. */
+#cmakedefine HAVE_STATVFS 1
+
+/* Define to 1 if you have the <stdlib.h> header file. */
+#cmakedefine HAVE_STDLIB_H 1
+
+/* Define to 1 if you have the <strings.h> header file. */
+#cmakedefine HAVE_STRINGS_H 1
+
+/* Define to 1 if you have the <string.h> header file. */
+#cmakedefine HAVE_STRING_H 1
+
+/* Define if we have a function called "ieee_handler" in -lsunmath. */
+#cmakedefine HAVE_SUNMATH
+
+/* Define to 1 if you have the <sysent.h> header file. */
+#cmakedefine HAVE_SYSENT_H 1
+
+/* Define to 1 if you have the <sys/dir.h> header file. */
+#cmakedefine HAVE_SYS_DIR_H 1
+
+/* Define to 1 if you have the <sys/filio.h> header file. */
+#cmakedefine HAVE_SYS_FILIO_H 1
+
+/* Define to 1 if you have the <sys/ioctl.h> header file. */
+#cmakedefine HAVE_SYS_IOCTL_H 1
+
+/* Define to 1 if you have the <sys/ipc.h> header file. */
+#cmakedefine HAVE_SYS_IPC_H 1
+
+/* Define to 1 if you have the <sys/machsig.h> header file. */
+#cmakedefine HAVE_SYS_MACHSIG_H 1
+
+/* Define to 1 if you have the <sys/mman.h> header file. */
+#cmakedefine HAVE_SYS_MMAN_H 1
+
+/* Define to 1 if you have the <sys/ndir.h> header file. */
+#cmakedefine HAVE_SYS_NDIR_H 1
+
+/* Define to 1 if you have the <sys/param.h> header file. */
+#cmakedefine HAVE_SYS_PARAM_H 1
+
+/* Define to 1 if you have the <sys/select.h> header file. */
+#cmakedefine HAVE_SYS_SELECT_H 1
+
+/* Define to 1 if you have the <sys/sem.h> header file. */
+#cmakedefine HAVE_SYS_SEM_H 1
+
+/* Define to 1 if you have the <sys/siginfo.h> header file. */
+#cmakedefine HAVE_SYS_SIGINFO_H 1
+
+/* Define to 1 if you have the <sys/signal.h> header file. */
+#cmakedefine HAVE_SYS_SIGNAL_H 1
+
+/* Define to 1 if you have the <sys/socket.h> header file. */
+#cmakedefine HAVE_SYS_SOCKET_H 1
+
+/* Define to 1 if you have the <sys/statvfs.h> header file. */
+#cmakedefine HAVE_SYS_STATVFS_H 1
+
+/* Define to 1 if you have the <sys/stat.h> header file. */
+#cmakedefine HAVE_SYS_STAT_H 1
+
+/* Define to 1 if you have the <sys/systeminfo.h> header file. */
+#cmakedefine HAVE_SYS_SYSTEMINFO_H 1
+
+/* Define to 1 if you have the <sys/times.h> header file. */
+#cmakedefine HAVE_SYS_TIMES_H 1
+
+/* Define to 1 if you have the <sys/time.h> header file. */
+#cmakedefine HAVE_SYS_TIME_H 1
+
+/* Define to 1 if you have the <sys/types.h> header file. */
+#cmakedefine HAVE_SYS_TYPES_H 1
+
+/* Define to 1 if you have the <sys/unistd.h> header file. */
+#cmakedefine HAVE_SYS_UNISTD_H 1
+
+/* Define to 1 if you have the <sys/utsname.h> header file. */
+#cmakedefine HAVE_SYS_UTSNAME_H 1
+
+/* Define to 1 if you have the <sys/vfs.h> header file. */
+#cmakedefine HAVE_SYS_VFS_H 1
+
+/* Define to 1 if you have the <time.h> header file. */
+#cmakedefine HAVE_TIME_H 1
+
+/* Define to 1 if you have the <unistd.h> header file. */
+#cmakedefine HAVE_UNISTD_H 1
+
+/* Define to 1 if you have the <values.h> header file. */
+#cmakedefine HAVE_VALUES_H 1
+
+/* Define to 1 if you have the <X11/extensions/multibuf.h> header file. */
+#cmakedefine HAVE_X11_EXTENSIONS_MULTIBUF_H 1
+
+/* Define to 1 if you have the <X11/extensions/readdisplay.h> header file. */
+#cmakedefine HAVE_X11_EXTENSIONS_READDISPLAY_H 1
+
+/* Define if your C compiler doesn't accept -c and -o together. */
+#cmakedefine NO_MINUS_C_MINUS_O
+
+/* define if the class ostream has member function form */
+#cmakedefine OSTREAM_FORM_OK 
+
+/* Define if compiler has function prototypes */
+#cmakedefine PROTOTYPES
+
+/* define if the function semctl takes a value */
+#cmakedefine SEMCTL_NO_REFERENCE
+
+/* define if the function semop takes a value */
+#cmakedefine SEMOP_NO_REFERENCE
+
+/* define if semun has member __buf */
+#cmakedefine SEMUN_BUF_DEFINED
+
+/* define if the union semun is in sys/sem.h */
+#cmakedefine SEMUN_DEFINED
+
+/* If using the C implementation of alloca, define if you know the
+   direction of stack growth for your system; otherwise it will be
+   automatically deduced at run-time.
+        STACK_DIRECTION > 0 => grows toward higher addresses
+        STACK_DIRECTION < 0 => grows toward lower addresses
+        STACK_DIRECTION = 0 => direction of growth unknown */
+#define STACK_DIRECTION @STACK_DIRECTION@
+
+/* Define if you have the ANSI C header files. */
+#ifndef STDC_HEADERS
+#cmakedefine STDC_HEADERS
+#endif
+
+/* Define if your <sys/time.h> declares `struct tm'. */
+#cmakedefine TM_IN_SYS_TIME
+
+/* Define if your processor stores words with the most significant byte first
+   (like Motorola and SPARC, unlike Intel and VAX). */
+#cmakedefine WORDS_BIGENDIAN
+
+/* Define if on AIX 3.
+   System headers sometimes define this.
+   We just want to avoid a redefinition error message.  */
+#ifndef _ALL_SOURCE
+/* # undef _ALL_SOURCE */
+#endif
+
+/* Define if you need to in order for stat and other things to work. */
+#cmakedefine _POSIX_SOURCE
+
+/* Location where resource files will be installed. */
+#cmakedefine OCE_INSTALL_DATA_DIR "@OCE_ABSPATH_DATA_DIR@"
+
+/* Debug postfix for DLLs */
+#if defined(_MSC_VER) && defined(_DEBUG)
+#define OCE_DEBUG_POSTFIX "@CMAKE_DEBUG_POSTFIX@"
+#else
+#define OCE_DEBUG_POSTFIX ""
+#endif
+
+/* Location where TKOpenGl shared library will be installed. */
+#ifdef _MSC_VER
+#define OCE_DEFAULT_CSF_GraphicShr "@OCE_DEFAULT_CSF_GraphicShr@" OCE_DEBUG_POSTFIX ".dll"
+#else
+#cmakedefine OCE_DEFAULT_CSF_GraphicShr "@OCE_DEFAULT_CSF_GraphicShr@"
+#endif
+
Index: oce/oce_install_config.h.cmake
===================================================================
--- /dev/null
+++ oce/oce_install_config.h.cmake
@@ -0,0 +1,25 @@
+/****************************************************************
+**
+**  File: oce_install_config.h.cmake, oce-config.h
+**
+**  This configuration header is installed with OCE headers.
+**  It should NOT be used while building OCE.  It defines
+**  a subset of the macros configured by CMake. This subset is
+**  used by the installed OCE headers.
+**
+****************************************************************/
+
+
+
+#cmakedefine OCE_HAVE_IOMANIP 1
+#cmakedefine OCE_HAVE_IOMANIP_H 1
+
+#cmakedefine OCE_HAVE_FSTREAM 1
+#cmakedefine OCE_HAVE_FSTREAM_H 1
+
+#cmakedefine OCE_HAVE_IOSTREAM 1
+#cmakedefine OCE_HAVE_IOSTREAM_H 1
+
+#cmakedefine OCE_HAVE_LIMITS 1
+#cmakedefine OCE_HAVE_CLIMITS 1
+#cmakedefine OCE_HAVE_LIMITS_H 1
Index: oce/src/OSD/OSD_Chronometer.cxx
===================================================================
--- oce.orig/src/OSD/OSD_Chronometer.cxx
+++ oce/src/OSD/OSD_Chronometer.cxx
@@ -54,6 +54,10 @@
 # include <limits.h>
 #endif
 
+#if defined(__APPLE__) && defined(__MACH__)
+#include "gettime_osx.h"
+#endif
+
 //=======================================================================
 //function : GetProcessCPU
 //purpose  : 
Index: oce/src/OSD/gettime_osx.h
===================================================================
--- /dev/null
+++ oce/src/OSD/gettime_osx.h
@@ -0,0 +1,143 @@
+/*
+* Copyright (c), MM Weiss
+* All rights reserved.
+*
+* Redistribution and use in source and binary forms, with or without modification,
+* are permitted provided that the following conditions are met:
+*
+* 1. Redistributions of source code must retain the above copyright notice,
+* this list of conditions and the following disclaimer.
+*
+* 2. Redistributions in binary form must reproduce the above copyright notice,
+* this list of conditions and the following disclaimer in the documentation
+* and/or other materials provided with the distribution.
+*
+* 3. Neither the name of the MM Weiss nor the names of its contributors
+* may be used to endorse or promote products derived from this software without
+* specific prior written permission.
+*
+* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
+* EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
+* SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
+* OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
+* TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
+* EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+*/
+
+/*
+* clock_gettime_stub.c
+* gcc -Wall -c clock_gettime_stub.c
+* posix realtime functions; MacOS user space glue
+*/
+
+/* @comment
+* other possible implementation using intel builtin rdtsc
+* rdtsc-workaround: http://www.mcs.anl.gov/~kazutomo/rdtsc.html
+*
+* we could get the ticks by doing this
+*
+* __asm __volatile("mov %%ebx, %%esi\n\t"
+* "cpuid\n\t"
+* "xchg %%esi, %%ebx\n\t"
+* "rdtsc"
+* : "=a" (a),
+* "=d" (d)
+* );
+
+* we could even replace our tricky sched_yield call by assembly code to get a better accurency,
+* anyway the following C stub will satisfy 99% of apps using posix clock_gettime call,
+* moreover, the setter version (clock_settime) could be easly written using mach primitives:
+* http://www.opensource.apple.com/source/xnu/xnu-${VERSION}/osfmk/man/ (clock_[set|get]_time)
+*
+* hackers don't be crackers, don't you use a flush toilet?
+*
+*
+* @see draft: ./posix-realtime-stub/posix-realtime-stub.c
+*
+*/
+
+extern "C" {
+
+#ifndef _GETTIME_H
+#define _GETTIME_H
+
+#ifdef __APPLE__
+
+#pragma weak clock_gettime
+
+#include <sys/time.h>
+#include <sys/resource.h>
+#include <mach/mach.h>
+#include <mach/clock.h>
+#include <mach/mach_time.h>
+#include <errno.h>
+#include <unistd.h>
+#include <sched.h>
+
+typedef enum {
+    CLOCK_REALTIME,
+    CLOCK_MONOTONIC,
+    CLOCK_PROCESS_CPUTIME_ID,
+    CLOCK_THREAD_CPUTIME_ID
+} clockid_t;
+
+static mach_timebase_info_data_t __clock_gettime_inf;
+
+int clock_gettime(clockid_t clk_id, struct timespec *tp) {
+    kern_return_t ret;
+    clock_serv_t clk;
+    clock_id_t clk_serv_id;
+    mach_timespec_t tm;
+
+    uint64_t start, end, delta, nano;
+
+  	
+    int retval = -1;
+	switch (clk_id) {
+	    case CLOCK_REALTIME:
+	    case CLOCK_MONOTONIC:
+	        clk_serv_id = clk_id == CLOCK_REALTIME ? CALENDAR_CLOCK : SYSTEM_CLOCK;
+	        if (KERN_SUCCESS == (ret = host_get_clock_service(mach_host_self(), clk_serv_id, &clk))) {
+	            if (KERN_SUCCESS == (ret = clock_get_time(clk, &tm))) {
+	                tp->tv_sec = tm.tv_sec;
+	                tp->tv_nsec = tm.tv_nsec;
+	                retval = 0;
+	             }
+	         }
+	         if (KERN_SUCCESS != ret) {
+	             errno = EINVAL;
+	             retval = -1;
+	         }
+	    break;
+	    case CLOCK_PROCESS_CPUTIME_ID:
+	    case CLOCK_THREAD_CPUTIME_ID:
+	        start = mach_absolute_time();
+	        if (clk_id == CLOCK_PROCESS_CPUTIME_ID) {
+	            getpid();
+	        } else {
+	            sched_yield();
+	        }
+	    end = mach_absolute_time();
+	    delta = end - start;
+	    if (0 == __clock_gettime_inf.denom) {
+	        mach_timebase_info(&__clock_gettime_inf);
+	    }
+	    nano = delta * __clock_gettime_inf.numer / __clock_gettime_inf.denom;
+	    tp->tv_sec = nano * 1e-9;
+	    tp->tv_nsec = nano - (tp->tv_sec * 1e9);
+	    retval = 0;
+	break;
+	default:
+	    errno = EINVAL;
+	    retval = -1;
+	}
+	return retval;
+}
+	
+#endif // __APPLE__
+#endif // _GETTIME_H
+	
+}
