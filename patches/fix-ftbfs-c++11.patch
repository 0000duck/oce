commit 511136b4379faecd74fdcf01adab9a683b45a8f5
Author: David Sankel <david@stellarscience.com>
Date:   Tue Mar 26 16:13:01 2013 -0600

    Fixes that allow for compilation in -std=c++11 mode of gcc 4.7.2.
    
    In every case the problem was two double-quotes toget '""' in string literals which
    is no longer valid in C++ 2011.

Index: oce/src/Interface/Interface_Version.hxx
===================================================================
--- oce.orig/src/Interface/Interface_Version.hxx
+++ oce/src/Interface/Interface_Version.hxx
@@ -16,8 +16,8 @@
 // and conditions governing the rights and limitations under the License.
 
 #include <Standard_Version.hxx>
-#define XSTEP_PROCESSOR_VERSION "Open CASCADE %s processor "OCC_VERSION_STRING
-#define XSTEP_SYSTEM_VERSION    "Open CASCADE "OCC_VERSION_STRING
+#define XSTEP_PROCESSOR_VERSION "Open CASCADE %s processor " OCC_VERSION_STRING
+#define XSTEP_SYSTEM_VERSION    "Open CASCADE " OCC_VERSION_STRING
 #define XSTEP_Config            OCC_VERSION_STRING
 #define XSTEP_ULNames           OCC_VERSION_STRING
 
Index: oce/src/NCollection/NCollection_BaseAllocator.cxx
===================================================================
--- oce.orig/src/NCollection/NCollection_BaseAllocator.cxx
+++ oce/src/NCollection/NCollection_BaseAllocator.cxx
@@ -281,20 +281,20 @@ void NCollection_BaseAllocator::PrintMem
     Standard_Integer nbLeft = aInfo.nbAlloc - aInfo.nbFree;
     Standard_Size aSizeAlloc = aInfo.nbAlloc * aInfo.roundSize;
     Standard_Size aSizeLeft = nbLeft * aInfo.roundSize;
-    fprintf(ff, "%12"FMT_SZ_Q"u %12d %12d %12"FMT_SZ_Q"u %12"FMT_SZ_Q"u\n", aInfo.roundSize,
+    fprintf(ff, "%12" FMT_SZ_Q "u %12d %12d %12" FMT_SZ_Q "u %12" FMT_SZ_Q "u\n", aInfo.roundSize,
             aInfo.nbAlloc, nbLeft, aSizeAlloc, aSizeLeft);
     aTotAlloc += aSizeAlloc;
     aTotLeft += aSizeLeft;
   }
-  fprintf(ff, "%12s %12s %12s %12"FMT_SZ_Q"u %12"FMT_SZ_Q"u\n", "Total:", "", "",
+  fprintf(ff, "%12s %12s %12s %12" FMT_SZ_Q "u %12" FMT_SZ_Q "u\n", "Total:", "", "",
           aTotAlloc, aTotLeft);
 
   if (!StorageIDSet().IsEmpty())
   {
-    fprintf(ff, "Alive allocation numbers of size=%"FMT_SZ_Q"u\n", StandardCallBack_CatchSize());
+    fprintf(ff, "Alive allocation numbers of size=%" FMT_SZ_Q "u\n", StandardCallBack_CatchSize());
     NCollection_Map<Standard_Size>::Iterator itMap1(StorageIDSet());
     for (; itMap1.More(); itMap1.Next())
-      fprintf(ff, "%"FMT_SZ_Q"u\n", itMap1.Key());
+      fprintf(ff, "%" FMT_SZ_Q "u\n", itMap1.Key());
   }
   fclose(ff);
 }
Index: oce/src/NCollection/NCollection_HeapAllocator.cxx
===================================================================
--- oce.orig/src/NCollection/NCollection_HeapAllocator.cxx
+++ oce/src/NCollection/NCollection_HeapAllocator.cxx
@@ -50,7 +50,7 @@ void * NCollection_HeapAllocator::Alloca
   void * pResult = malloc(aRoundSize);
   if (!pResult) {
     char buf[128];
-    sprintf (buf, "Failed to allocate %"FMT_SZ_Q"u bytes in global dynamic heap",theSize);
+    sprintf (buf, "Failed to allocate %" FMT_SZ_Q "u bytes in global dynamic heap",theSize);
     Standard_OutOfMemory::Raise(&buf[0]);
   }
   return pResult;
Index: oce/src/NCollection/NCollection_IncAllocator.cxx
===================================================================
--- oce.orig/src/NCollection/NCollection_IncAllocator.cxx
+++ oce/src/NCollection/NCollection_IncAllocator.cxx
@@ -170,7 +170,7 @@ Standard_EXPORT void IncAllocator_PrintA
         Standard_Size aSize = anAlloc->GetMemSize();
         aTotSize += aSize;
         nbAlloc++;
-        fprintf(ff, "%-8"FMT_SZ_Q"u %8.1f\n", anID, double(aSize)/1024);
+        fprintf(ff, "%-8" FMT_SZ_Q "u %8.1f\n", anID, double(aSize)/1024);
       }
       fprintf(ff, "Total:\n%-8d %8.1f\n", nbAlloc, double(aTotSize)/1024);
       fclose(ff);
Index: oce/src/OSD/OSD_MAllocHook.cxx
===================================================================
--- oce.orig/src/OSD/OSD_MAllocHook.cxx
+++ oce/src/OSD/OSD_MAllocHook.cxx
@@ -375,7 +375,7 @@ Standard_Boolean OSD_MAllocHook::LogFile
     Standard_Size aSizeAlloc = aInfo.nbAlloc * aInfo.size;
     Standard_Size aSizeLeft = nbLeft * aInfo.size;
     Standard_Size aSizePeak = aInfo.nbLeftPeak * aInfo.size;
-    fprintf(aRepFile, "%10"FMT_SZ_Q"u %10d %10d %10d %10"FMT_SZ_Q"u %10"FMT_SZ_Q"u %10"FMT_SZ_Q"u\n", aInfo.size,
+    fprintf(aRepFile, "%10" FMT_SZ_Q "u %10d %10d %10d %10" FMT_SZ_Q "u %10" FMT_SZ_Q "u %10" FMT_SZ_Q "u\n", aInfo.size,
             aInfo.nbAlloc, nbLeft, aInfo.nbLeftPeak,
             aSizeAlloc, aSizeLeft, aSizePeak);
     if (aTotAlloc + aSizeAlloc < aTotAlloc) // overflow ?
@@ -389,7 +389,7 @@ Standard_Boolean OSD_MAllocHook::LogFile
         fprintf(aRepFile, "%10lu\n", *it1);
     }
   }
-  fprintf(aRepFile, "%10s %10s %10s %10s%c %10"FMT_SZ_Q"u %10"FMT_SZ_Q"u %10"FMT_SZ_Q"u\n", "Total:",
+  fprintf(aRepFile, "%10s %10s %10s %10s%c %10" FMT_SZ_Q "u %10" FMT_SZ_Q "u %10" FMT_SZ_Q "u\n", "Total:",
           "", "", "", (aTotAlloc == SIZE_MAX ? '>' : ' '), aTotAlloc,
           aTotalLeftSize, aTotalPeakSize);
   fclose(aRepFile);
@@ -513,7 +513,7 @@ Standard_Boolean OSD_MAllocHook::Collect
       Standard_Size aSizeAlloc = myArray[i].nbAlloc * aSize;
       ptrdiff_t     aSizeLeft = nbLeft * aSize;
       Standard_Size aSizePeak = myArray[i].nbLeftPeak * aSize;
-      fprintf(aRepFile, "%10d %10d %10d %10d %10"FMT_SZ_Q"u %10"FMT_SZ_Q"d %10"FMT_SZ_Q"u\n", aSize,
+      fprintf(aRepFile, "%10d %10d %10d %10d %10" FMT_SZ_Q "u %10" FMT_SZ_Q "d %10" FMT_SZ_Q "u\n", aSize,
               myArray[i].nbAlloc, nbLeft, myArray[i].nbLeftPeak,
               aSizeAlloc, aSizeLeft, aSizePeak);
       if (aTotAlloc + aSizeAlloc < aTotAlloc) // overflow ?
@@ -522,7 +522,7 @@ Standard_Boolean OSD_MAllocHook::Collect
         aTotAlloc += aSizeAlloc;
     }
   }
-  fprintf(aRepFile, "%10s %10s %10s %10s%c%10"FMT_SZ_Q"u %10"FMT_SZ_Q"d %10"FMT_SZ_Q"u\n", "Total:",
+  fprintf(aRepFile, "%10s %10s %10s %10s%c%10" FMT_SZ_Q "u %10" FMT_SZ_Q "d %10" FMT_SZ_Q "u\n", "Total:",
           "", "", "", (aTotAlloc == SIZE_MAX ? '>' : ' '), aTotAlloc,
           myTotalLeftSize, myTotalPeakSize);
   fclose(aRepFile);
Index: oce/src/STEPControl/STEPControl_Controller.cxx
===================================================================
--- oce.orig/src/STEPControl/STEPControl_Controller.cxx
+++ oce/src/STEPControl/STEPControl_Controller.cxx
@@ -68,7 +68,7 @@ STEPControl_Controller::STEPControl_Cont
   if (!init) {
     RWHeaderSection::Init();  RWStepAP214::Init();
 
-    Interface_Static::Init ("step","write.step.product.name",'t',"Open CASCADE STEP translator "OCC_VERSION_STRING);
+    Interface_Static::Init ("step","write.step.product.name",'t',"Open CASCADE STEP translator " OCC_VERSION_STRING);
     Interface_Static::Init ("step","write.step.assembly",'e',"");
     Interface_Static::Init ("step","write.step.assembly",'&',"enum 0");
     Interface_Static::Init ("step","write.step.assembly",'&',"eval Off");
Index: oce/src/VrmlData/VrmlData_Scene.cxx
===================================================================
--- oce.orig/src/VrmlData/VrmlData_Scene.cxx
+++ oce/src/VrmlData/VrmlData_Scene.cxx
@@ -1156,7 +1156,7 @@ void dumpNode (Standard_OStream&
     const Standard_Size nCoord = aNode->Coordinates()->Length();
     const Standard_Size nPoly  = aNode->Polygons (ppDummy);
     char buf[64];
-    Sprintf (buf, "IndexedFaceSet (%"FMT_SZ_Q"u vertices, %"FMT_SZ_Q"u polygons)", nCoord, nPoly);
+    Sprintf (buf, "IndexedFaceSet (%" FMT_SZ_Q "u vertices, %" FMT_SZ_Q "u polygons)", nCoord, nPoly);
     dumpNodeHeader (theStream, theIndent, buf, theNode->Name());
   } else if (theNode->IsKind(STANDARD_TYPE(VrmlData_IndexedLineSet))) {
     const Handle(VrmlData_IndexedLineSet) aNode =
@@ -1165,7 +1165,7 @@ void dumpNode (Standard_OStream&
     const Standard_Size nCoord = aNode->Coordinates()->Length();
     const Standard_Size nPoly  = aNode->Polygons (ppDummy);
     char buf[64];
-    Sprintf (buf, "IndexedLineSet (%"FMT_SZ_Q"u vertices, %"FMT_SZ_Q"u polygons)", nCoord, nPoly);
+    Sprintf (buf, "IndexedLineSet (%" FMT_SZ_Q "u vertices, %" FMT_SZ_Q "u polygons)", nCoord, nPoly);
     dumpNodeHeader (theStream, theIndent, buf, theNode->Name());
   } else if (theNode->IsKind(STANDARD_TYPE(VrmlData_Material))) {
 //     const Handle(VrmlData_Material) aMaterial = 
