From de7199d801f88f30e4f0dc706ee8e1a4c79dee06 Mon Sep 17 00:00:00 2001
From: Denis Barbier <bouzim@gmail.com>
Date: Thu, 6 Oct 2011 21:28:12 +0200
Subject: [PATCH] Allow changing default values of MMGT_* variables

The following macros can be set when compiling to override
default settings:
  MMGT_OPT_DEFAULT
  MMGT_CLEAR_DEFAULT
  MMGT_MMAP_DEFAULT
  MMGT_CELLSIZE_DEFAULT
  MMGT_NBPAGES_DEFAULT
  MMGT_THRESHOLD_DEFAULT
  MMGT_REENTRANT_DEFAULT
---
 src/Standard/Standard.cxx |   36 +++++++++++++++++++++++++++++-------
 1 files changed, 29 insertions(+), 7 deletions(-)

Index: oce/src/Standard/Standard.cxx
===================================================================
--- oce.orig/src/Standard/Standard.cxx
+++ oce/src/Standard/Standard.cxx
@@ -33,6 +33,28 @@
 #include <malloc.h>
 #endif
 
+#ifndef MMGT_OPT_DEFAULT
+# define MMGT_OPT_DEFAULT           0
+#endif
+#ifndef MMGT_CLEAR_DEFAULT
+# define MMGT_CLEAR_DEFAULT         1
+#endif
+#ifndef MMGT_MMAP_DEFAULT
+# define MMGT_MMAP_DEFAULT          1
+#endif
+#ifndef MMGT_CELLSIZE_DEFAULT
+# define MMGT_CELLSIZE_DEFAULT    200
+#endif
+#ifndef MMGT_NBPAGES_DEFAULT
+# define MMGT_NBPAGES_DEFAULT    1000
+#endif
+#ifndef MMGT_THRESHOLD_DEFAULT
+# define MMGT_THRESHOLD_DEFAULT 40000
+#endif
+#ifndef MMGT_REENTRANT_DEFAULT
+# define MMGT_REENTRANT_DEFAULT     0
+#endif
+
 // Global reentrant flag
 static Standard_Boolean Standard_IsReentrant = Standard_True;
 
@@ -60,8 +82,8 @@ Standard_MMgrFactory::Standard_MMgrFacto
 : myFMMgr (NULL)
 {
   char* aVar;
-  Standard_Integer anAllocId   = (aVar = getenv ("MMGT_OPT"      )) ?  atoi (aVar)       : 0;
-  Standard_Boolean toClear     = (aVar = getenv ("MMGT_CLEAR"    )) ? (atoi (aVar) != 0) : Standard_True;
+  Standard_Integer anAllocId   = (aVar = getenv ("MMGT_OPT"      )) ?  atoi (aVar)       : MMGT_OPT_DEFAULT;
+  Standard_Boolean toClear     = (aVar = getenv ("MMGT_CLEAR"    )) ? (atoi (aVar) != 0) : (MMGT_CLEAR_DEFAULT != 0);
 
 
   // on Windows (actual for XP and 2000) activate low fragmentation heap
@@ -80,15 +102,17 @@ Standard_MMgrFactory::Standard_MMgrFacto
   aVar = getenv ("MMGT_REENTRANT");
   if ( aVar != NULL ) 
     Standard_IsReentrant = (atoi (aVar) != 0);
+  else
+    Standard_IsReentrant = (MMGT_THRESHOLD_DEFAULT != 0);
 
   switch (anAllocId)
   {
     case 1:  // OCCT optimized memory allocator
     {
-      Standard_Boolean bMMap       = (aVar = getenv ("MMGT_MMAP"     )) ? (atoi (aVar) != 0) : Standard_True;
-      Standard_Integer aCellSize   = (aVar = getenv ("MMGT_CELLSIZE" )) ?  atoi (aVar) : 200;
-      Standard_Integer aNbPages    = (aVar = getenv ("MMGT_NBPAGES"  )) ?  atoi (aVar) : 1000;
-      Standard_Integer aThreshold  = (aVar = getenv ("MMGT_THRESHOLD")) ?  atoi (aVar) : 40000;
+      Standard_Boolean bMMap       = (aVar = getenv ("MMGT_MMAP"     )) ? (atoi (aVar) != 0) : (MMGT_MMAP_DEFAULT != 0);
+      Standard_Integer aCellSize   = (aVar = getenv ("MMGT_CELLSIZE" )) ?  atoi (aVar) : MMGT_CELLSIZE_DEFAULT;
+      Standard_Integer aNbPages    = (aVar = getenv ("MMGT_NBPAGES"  )) ?  atoi (aVar) : MMGT_NBPAGES_DEFAULT;
+      Standard_Integer aThreshold  = (aVar = getenv ("MMGT_THRESHOLD")) ?  atoi (aVar) : MMGT_THRESHOLD_DEFAULT;
       myFMMgr = new Standard_MMgrOpt (toClear, bMMap, aCellSize, aNbPages, aThreshold, Standard_IsReentrant);
       break;
     }
