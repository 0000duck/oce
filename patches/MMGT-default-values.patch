From de7199d801f88f30e4f0dc706ee8e1a4c79dee06 Mon Sep 17 00:00:00 2001
From: Denis Barbier <bouzim@gmail.com>
Date: Thu, 6 Oct 2011 21:28:12 +0200
Subject: [PATCH] Allow changing default values of MMGT_* variables

The following macros can be set when compiling to override
default settings:
  MMGT_OPT_DEFAULT
  MMGT_CLEAR_DEFAULT
  MMGT_MMAP_DEFAULT
  MMGT_CELLSIZE_DEFAULT
  MMGT_NBPAGES_DEFAULT
  MMGT_THRESHOLD_DEFAULT
  MMGT_REENTRANT_DEFAULT
---
 src/Standard/Standard.cxx |   36 +++++++++++++++++++++++++++++-------
 1 files changed, 29 insertions(+), 7 deletions(-)

Index: oce/src/Standard/Standard.cxx
===================================================================
--- oce.orig/src/Standard/Standard.cxx
+++ oce/src/Standard/Standard.cxx
@@ -32,6 +32,28 @@
 #define OCCT_MMGT_OPT_DEFAULT 0
 #endif
 
+#ifndef MMGT_OPT_DEFAULT
+# define MMGT_OPT_DEFAULT           0
+#endif
+#ifndef MMGT_CLEAR_DEFAULT
+# define MMGT_CLEAR_DEFAULT         1
+#endif
+#ifndef MMGT_MMAP_DEFAULT
+# define MMGT_MMAP_DEFAULT          1
+#endif
+#ifndef MMGT_CELLSIZE_DEFAULT
+# define MMGT_CELLSIZE_DEFAULT    200
+#endif
+#ifndef MMGT_NBPAGES_DEFAULT
+# define MMGT_NBPAGES_DEFAULT    1000
+#endif
+#ifndef MMGT_THRESHOLD_DEFAULT
+# define MMGT_THRESHOLD_DEFAULT 40000
+#endif
+#ifndef MMGT_REENTRANT_DEFAULT
+# define MMGT_REENTRANT_DEFAULT     0
+#endif
+
 //=======================================================================
 //class    : Standard_MMgrFactory 
 //purpose  : Container for pointer to memory manager;
@@ -69,7 +91,7 @@ Standard_MMgrFactory::Standard_MMgrFacto
 
   char* aVar;
   aVar = getenv ("MMGT_OPT");
-  Standard_Integer anAllocId   = (aVar ?  atoi (aVar): OCCT_MMGT_OPT_DEFAULT);
+  Standard_Integer anAllocId   = (aVar != NULL ?  atoi (aVar): MMGT_OPT_DEFAULT);
 
 #if defined(_WIN32) && !defined(_WIN64)
   static const DWORD _SSE2_FEATURE_BIT(0x04000000);
@@ -69,7 +91,7 @@ Standard_MMgrFactory::Standard_MMgrFacto
 #endif
 
   aVar = getenv ("MMGT_CLEAR");
-  Standard_Boolean toClear     = (aVar ? (atoi (aVar) != 0) : Standard_True);
+  Standard_Boolean toClear     = (aVar != NULL ? (atoi (aVar) != 0) : Standard_True);
 
   // on Windows (actual for XP and 2000) activate low fragmentation heap
   // for CRT heap in order to get best performance.
@@ -91,13 +113,13 @@ Standard_MMgrFactory::Standard_MMgrFacto
     case 1:  // OCCT optimized memory allocator
     {
       aVar = getenv ("MMGT_MMAP");
-      Standard_Boolean bMMap       = (aVar ? (atoi (aVar) != 0) : Standard_True);
+      Standard_Boolean bMMap       = (aVar != NULL ? (atoi (aVar) != 0) : (MMGT_MMAP_DEFAULT != 0));
       aVar = getenv ("MMGT_CELLSIZE");
-      Standard_Integer aCellSize   = (aVar ?  atoi (aVar) : 200);
+      Standard_Integer aCellSize   = (aVar != NULL ?  atoi (aVar) : MMGT_CELLSIZE_DEFAULT);
       aVar = getenv ("MMGT_NBPAGES");
-      Standard_Integer aNbPages    = (aVar ?  atoi (aVar) : 1000);
+      Standard_Integer aNbPages    = (aVar != NULL ?  atoi (aVar) : MMGT_NBPAGES_DEFAULT);
       aVar = getenv ("MMGT_THRESHOLD");
-      Standard_Integer aThreshold  = (aVar ?  atoi (aVar) : 40000);
+      Standard_Integer aThreshold  = (aVar != NULL ?  atoi (aVar) : MMGT_THRESHOLD_DEFAULT);
       myFMMgr = new Standard_MMgrOpt (toClear, bMMap, aCellSize, aNbPages, aThreshold);
       break;
     }
