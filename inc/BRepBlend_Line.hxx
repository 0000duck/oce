// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _BRepBlend_Line_HeaderFile
#define _BRepBlend_Line_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_BRepBlend_Line_HeaderFile
#include <Handle_BRepBlend_Line.hxx>
#endif

#ifndef _Blend_SequenceOfPoint_HeaderFile
#include <Blend_SequenceOfPoint.hxx>
#endif
#ifndef _IntSurf_TypeTrans_HeaderFile
#include <IntSurf_TypeTrans.hxx>
#endif
#ifndef _BRepBlend_Extremity_HeaderFile
#include <BRepBlend_Extremity.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _MMgt_TShared_HeaderFile
#include <MMgt_TShared.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
class Standard_OutOfRange;
class Blend_Point;
class BRepBlend_Extremity;



class BRepBlend_Line : public MMgt_TShared {

public:

  
  Standard_EXPORT   BRepBlend_Line();
  //! Clears the content of the line. <br>
  Standard_EXPORT     void Clear() ;
  //! Adds a point in the line. <br>
        void Append(const Blend_Point& P) ;
  //! Adds a point in the line at the first place. <br>
        void Prepend(const Blend_Point& P) ;
  //! Adds a point in the line at the first place. <br>
        void InsertBefore(const Standard_Integer Index,const Blend_Point& P) ;
  //! Removes  from  <me>    all  the  items  of <br>
//! positions between <FromIndex> and <ToIndex>. <br>
//! Raises an exception if the indices are out of bounds. <br>
        void Remove(const Standard_Integer FromIndex,const Standard_Integer ToIndex) ;
  //! Sets the value of the transition of the line on S1 and <br>
//!          the line on S2. <br>
  Standard_EXPORT     void Set(const IntSurf_TypeTrans TranS1,const IntSurf_TypeTrans TranS2) ;
  //! Sets the value of the transition of the line on a surface <br>
  Standard_EXPORT     void Set(const IntSurf_TypeTrans Trans) ;
  //! Sets the values of the start points for the line. <br>
        void SetStartPoints(const BRepBlend_Extremity& StartPt1,const BRepBlend_Extremity& StartPt2) ;
  //! Sets tne values of the end points for the line. <br>
        void SetEndPoints(const BRepBlend_Extremity& EndPt1,const BRepBlend_Extremity& EndPt2) ;
  //! Returns the number of points in the line. <br>
        Standard_Integer NbPoints() const;
  //! Returns the point of range Index. <br>
       const Blend_Point& Point(const Standard_Integer Index) const;
  //! Returns the type of the transition of the line defined <br>
//!          on the first surface. The transition is "constant" <br>
//!          along the line. <br>
//!          The transition is IN if the line is oriented in such <br>
//!          a way that the system of vectors (N,DRac,T) is <br>
//!          right-handed, where <br>
//!                N is the normal to the first surface at a point P, <br>
//!                DRac is a vector tangent to the blending patch, <br>
//!                oriented towards the valid part of this patch, <br>
//!                T  is the tangent to the line on S1 at P. <br>
//!          The transitioon is OUT when the system of vectors is <br>
//!          left-handed. <br>
        IntSurf_TypeTrans TransitionOnS1() const;
  //! Returns the type of the transition of the line defined <br>
//!          on the second surface. The transition is "constant" <br>
//!          along the line. <br>
        IntSurf_TypeTrans TransitionOnS2() const;
  //! Returns the start point on S1. <br>
       const BRepBlend_Extremity& StartPointOnFirst() const;
  //! Returns the start point on S2 <br>
       const BRepBlend_Extremity& StartPointOnSecond() const;
  //! Returns the end point on S1. <br>
       const BRepBlend_Extremity& EndPointOnFirst() const;
  //! Returns the point on S2. <br>
       const BRepBlend_Extremity& EndPointOnSecond() const;
  //! Returns the type of the transition of the line defined <br>
//!          on the surface. <br>
        IntSurf_TypeTrans TransitionOnS() const;




  DEFINE_STANDARD_RTTI(BRepBlend_Line)

protected:




private: 


Blend_SequenceOfPoint seqpt;
IntSurf_TypeTrans tras1;
IntSurf_TypeTrans tras2;
BRepBlend_Extremity stp1;
BRepBlend_Extremity stp2;
BRepBlend_Extremity endp1;
BRepBlend_Extremity endp2;
Standard_Boolean hass1;
Standard_Boolean hass2;


};


#include <BRepBlend_Line.lxx>



// other Inline functions and methods (like "C++: function call" methods)


#endif
