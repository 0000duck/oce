// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Extrema_LocateExtCC2d_HeaderFile
#define _Extrema_LocateExtCC2d_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _Extrema_POnCurv2d_HeaderFile
#include <Extrema_POnCurv2d.hxx>
#endif
class Standard_DomainError;
class StdFail_NotDone;
class Adaptor2d_Curve2d;
class Extrema_POnCurv2d;


//! It calculates the distance between two curves with <br>
//!          a close point; these distances can be maximum or <br>
//!          minimum. <br>
class Extrema_LocateExtCC2d  {
public:

  DEFINE_STANDARD_ALLOC

  //! Calculates the distance with a close point. The <br>
//!          close point is defined by a parameter value on each <br>
//!          curve. <br>
//!          The function F(u,v)=distance(C1(u),C2(v)) has an <br>
//!          extremun when gradient(f)=0. The algorithm searchs <br>
//!          the zero near the close point. <br>
  Standard_EXPORT   Extrema_LocateExtCC2d(const Adaptor2d_Curve2d& C1,const Adaptor2d_Curve2d& C2,const Standard_Real U0,const Standard_Real V0);
  //! Returns True if the distance is found. <br>
  Standard_EXPORT     Standard_Boolean IsDone() const;
  //! Returns the value of the extremum square distance. <br>
  Standard_EXPORT     Standard_Real SquareDistance() const;
  //! Returns the points of the extremum distance. <br>
//!          P1 is on the first curve, P2 on the second one. <br>
  Standard_EXPORT     void Point(Extrema_POnCurv2d& P1,Extrema_POnCurv2d& P2) const;





protected:





private:



Standard_Boolean myDone;
Standard_Real mySqDist;
Extrema_POnCurv2d myPoint1;
Extrema_POnCurv2d myPoint2;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
