// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Aspect_GenId_HeaderFile
#define _Aspect_GenId_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _TColStd_ListOfInteger_HeaderFile
#include <TColStd_ListOfInteger.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
class Aspect_IdentDefinitionError;


//! This class permits the creation and control of integer identifiers. <br>
class Aspect_GenId  {
public:

  DEFINE_STANDARD_ALLOC

  //! Creates an available set of identifiers with the lower bound 0 and the upper bound INT_MAX / 2. <br>
  Standard_EXPORT   Aspect_GenId();
  //! Creates an available set of identifiers with specified range. <br>
//! Raises IdentDefinitionError if theUpper is less than theLow. <br>
  Standard_EXPORT   Aspect_GenId(const Standard_Integer theLow,const Standard_Integer theUpper);
  //! Free all identifiers - make the whole range available again. <br>
  Standard_EXPORT     void Free() ;
  //! Free specified identifier. Warning - method has no protection against double-freeing! <br>
  Standard_EXPORT     void Free(const Standard_Integer theId) ;
  //! Returns true if there are available identifiers in range. <br>
  Standard_EXPORT     Standard_Boolean HasFree() const;
  //! Returns the number of available identifiers. <br>
  Standard_EXPORT     Standard_Integer Available() const;
  //! Returns the lower identifier in range. <br>
  Standard_EXPORT     Standard_Integer Lower() const;
  //! Returns the next available identifier. <br>
//! Warning: Raises IdentDefinitionError if all identifiers are busy. <br>
  Standard_EXPORT     Standard_Integer Next() ;
  //! Returns the upper identifier in range. <br>
  Standard_EXPORT     Standard_Integer Upper() const;





protected:





private:



Standard_Integer myFreeCount;
Standard_Integer myLength;
Standard_Integer myLowerBound;
Standard_Integer myUpperBound;
TColStd_ListOfInteger myFreeIds;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
