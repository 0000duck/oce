// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _BRepPrim_GWedge_HeaderFile
#define _BRepPrim_GWedge_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _BRepPrim_Builder_HeaderFile
#include <BRepPrim_Builder.hxx>
#endif
#ifndef _gp_Ax2_HeaderFile
#include <gp_Ax2.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _TopoDS_Shell_HeaderFile
#include <TopoDS_Shell.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _TopoDS_Vertex_HeaderFile
#include <TopoDS_Vertex.hxx>
#endif
#ifndef _TopoDS_Edge_HeaderFile
#include <TopoDS_Edge.hxx>
#endif
#ifndef _TopoDS_Wire_HeaderFile
#include <TopoDS_Wire.hxx>
#endif
#ifndef _TopoDS_Face_HeaderFile
#include <TopoDS_Face.hxx>
#endif
#ifndef _BRepPrim_Direction_HeaderFile
#include <BRepPrim_Direction.hxx>
#endif
class Standard_DomainError;
class Standard_OutOfRange;
class BRepPrim_Builder;
class gp_Ax2;
class TopoDS_Shell;
class TopoDS_Face;
class gp_Pln;
class TopoDS_Wire;
class TopoDS_Edge;
class gp_Lin;
class TopoDS_Vertex;
class gp_Pnt;


//! A wedge is defined by  : <br>
//! <br>
//!          Axes : an Axis2 (coordinate system) <br>
//! <br>
//!          YMin, YMax the  coordinates of the  ymin and ymax <br>
//!          rectangular faces parallel to the ZX plane (of the <br>
//!          coordinate systems) <br>
//! <br>
//!          ZMin,ZMax,XMin,XMax the rectangular <br>
//!          left (YMin) face parallel to the Z and X axes. <br>
//! <br>
//!          Z2Min,Z2Max,X2Min,X2Max the rectangular <br>
//!          right (YMax) face parallel to the Z and X axes. <br>
//! <br>
//!          For a box Z2Min = ZMin, Z2Max = ZMax, <br>
//!                    X2Min = XMin, X2Max = XMax <br>
//! <br>
//!          The wedge can be open in the corresponding direction <br>
//!          of its Boolean myInfinite <br>
class BRepPrim_GWedge  {
public:

  DEFINE_STANDARD_ALLOC

  //! Creates a  GWedge  algorithm.   <Axes> is  the axis <br>
//!          system for the primitive. <br>
//! <br>
//!          XMin, YMin, ZMin are set to 0 <br>
//!          XMax, YMax, ZMax are set to dx, dy, dz <br>
//!          Z2Min = ZMin <br>
//!          Z2Max = ZMax <br>
//!          X2Min = XMin <br>
//!          X2Max = XMax <br>
//!          The result is a box <br>
//!          dx,dy,dz should be positive <br>
  Standard_EXPORT   BRepPrim_GWedge(const BRepPrim_Builder& B,const gp_Ax2& Axes,const Standard_Real dx,const Standard_Real dy,const Standard_Real dz);
  //! Creates  a GWedge  primitive. <Axes> is   the  axis <br>
//!          system for the primitive. <br>
//! <br>
//!          XMin, YMin, ZMin are set to 0 <br>
//!          XMax, YMax, ZMax are set to dx, dy, dz <br>
//!          Z2Min = ZMin <br>
//!          Z2Max = ZMax <br>
//!          X2Min = ltx <br>
//!          X2Max = ltx <br>
//!          The result is a STEP right angular wedge <br>
//!          dx,dy,dz should be positive <br>
//!          ltx should not be negative <br>
  Standard_EXPORT   BRepPrim_GWedge(const BRepPrim_Builder& B,const gp_Ax2& Axes,const Standard_Real dx,const Standard_Real dy,const Standard_Real dz,const Standard_Real ltx);
  //! Create  a GWedge primitive.   <Axes>  is  the  axis <br>
//!          system for the primitive. <br>
//! <br>
//!          all the fields are set to the corresponding value <br>
//!          XYZMax - XYZMin should be positive <br>
//!          ZX2Max - ZX2Min should not be negative <br>
  Standard_EXPORT   BRepPrim_GWedge(const BRepPrim_Builder& B,const gp_Ax2& Axes,const Standard_Real xmin,const Standard_Real ymin,const Standard_Real zmin,const Standard_Real z2min,const Standard_Real x2min,const Standard_Real xmax,const Standard_Real ymax,const Standard_Real zmax,const Standard_Real z2max,const Standard_Real x2max);
  //! Returns the coordinates system from <me>. <br>
  Standard_EXPORT     gp_Ax2 Axes() const;
  //! Returns Xmin value from <me>. <br>
  Standard_EXPORT     Standard_Real GetXMin() const;
  //! Returns YMin value from <me>. <br>
  Standard_EXPORT     Standard_Real GetYMin() const;
  //! Returns ZMin value from <me>. <br>
  Standard_EXPORT     Standard_Real GetZMin() const;
  //! Returns Z2Min value from <me>. <br>
  Standard_EXPORT     Standard_Real GetZ2Min() const;
  //! Returns X2Min value from <me>. <br>
  Standard_EXPORT     Standard_Real GetX2Min() const;
  //! Returns XMax value from <me>. <br>
  Standard_EXPORT     Standard_Real GetXMax() const;
  //! Returns YMax value from <me>. <br>
  Standard_EXPORT     Standard_Real GetYMax() const;
  //! Returns ZMax value from <me>. <br>
  Standard_EXPORT     Standard_Real GetZMax() const;
  //! Returns Z2Max value from <me>. <br>
  Standard_EXPORT     Standard_Real GetZ2Max() const;
  //! Returns X2Max value from <me>. <br>
  Standard_EXPORT     Standard_Real GetX2Max() const;
  //! Opens <me> in <d1> direction. A face and its edges <br>
//!          or vertices are said nonexistant. <br>
  Standard_EXPORT     void Open(const BRepPrim_Direction d1) ;
  //! Closes   <me>  in <d1>  direction.  A face and its <br>
//!          edges or vertices are said existant. <br>
  Standard_EXPORT     void Close(const BRepPrim_Direction d1) ;
  //! Returns True if <me> is open in <d1> direction. <br>
  Standard_EXPORT     Standard_Boolean IsInfinite(const BRepPrim_Direction d1) const;
  //! Returns the Shell containing the Faces of <me>. <br>
//! <br>
  Standard_EXPORT    const TopoDS_Shell& Shell() ;
  //! Returns True if <me> has a Face in <d1> direction. <br>
  Standard_EXPORT     Standard_Boolean HasFace(const BRepPrim_Direction d1) const;
  //! Returns the Face of <me> located in <d1> direction. <br>
//! <br>
  Standard_EXPORT    const TopoDS_Face& Face(const BRepPrim_Direction d1) ;
  //! Returns the plane  of the Face  of <me> located in <br>
//!          <d1> direction. <br>
  Standard_EXPORT     gp_Pln Plane(const BRepPrim_Direction d1) ;
  //! Returns True if <me> has a Wire in <d1> direction. <br>
  Standard_EXPORT     Standard_Boolean HasWire(const BRepPrim_Direction d1) const;
  //! Returns the Wire of <me> located in <d1> direction. <br>
//! <br>
  Standard_EXPORT    const TopoDS_Wire& Wire(const BRepPrim_Direction d1) ;
  //! Returns True if <me> has an Edge in <d1><d2> direction. <br>
  Standard_EXPORT     Standard_Boolean HasEdge(const BRepPrim_Direction d1,const BRepPrim_Direction d2) const;
  //! Returns the Edge of <me> located in <d1><d2> direction. <br>
//! <br>
  Standard_EXPORT    const TopoDS_Edge& Edge(const BRepPrim_Direction d1,const BRepPrim_Direction d2) ;
  //! Returns the line of  the Edge of <me>  located  in <br>
//!          <d1><d2> direction. <br>
  Standard_EXPORT     gp_Lin Line(const BRepPrim_Direction d1,const BRepPrim_Direction d2) ;
  //! Returns True if <me> has a  Vertex in <d1><d2><d3> <br>
//!          direction. <br>
  Standard_EXPORT     Standard_Boolean HasVertex(const BRepPrim_Direction d1,const BRepPrim_Direction d2,const BRepPrim_Direction d3) const;
  //! Returns the Vertex of <me> located in <d1><d2><d3> <br>
//!          direction. <br>
//! <br>
  Standard_EXPORT    const TopoDS_Vertex& Vertex(const BRepPrim_Direction d1,const BRepPrim_Direction d2,const BRepPrim_Direction d3) ;
  //! Returns the point of the Vertex of <me> located in <br>
//!          <d1><d2><d3> direction. <br>
  Standard_EXPORT     gp_Pnt Point(const BRepPrim_Direction d1,const BRepPrim_Direction d2,const BRepPrim_Direction d3) ;





protected:





private:



BRepPrim_Builder myBuilder;
gp_Ax2 myAxes;
Standard_Real XMin;
Standard_Real XMax;
Standard_Real YMin;
Standard_Real YMax;
Standard_Real ZMin;
Standard_Real ZMax;
Standard_Real Z2Min;
Standard_Real Z2Max;
Standard_Real X2Min;
Standard_Real X2Max;
TopoDS_Shell myShell;
Standard_Boolean ShellBuilt;
TopoDS_Vertex myVertices[8];
Standard_Boolean VerticesBuilt[8];
TopoDS_Edge myEdges[12];
Standard_Boolean EdgesBuilt[12];
TopoDS_Wire myWires[6];
Standard_Boolean WiresBuilt[6];
TopoDS_Face myFaces[6];
Standard_Boolean FacesBuilt[6];
Standard_Boolean myInfinite[6];


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
