// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _BRepGProp_VinertGK_HeaderFile
#define _BRepGProp_VinertGK_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _GProp_GProps_HeaderFile
#include <GProp_GProps.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Standard_Address_HeaderFile
#include <Standard_Address.hxx>
#endif
class BRepGProp_Face;
class gp_Pnt;
class BRepGProp_Domain;
class gp_Pln;


//! Computes the global properties of a geometric solid <br>
//!          (3D closed region of space) delimited with : <br>
//!            -  a point and a surface <br>
//!            -  a plane and a surface <br>
//! <br>
//!          The surface can be : <br>
//!            -  a surface limited with its parametric values U-V, <br>
//!               (naturally restricted) <br>
//!            -  a surface limited in U-V space with its boundary <br>
//!               curves. <br>
//! <br>
//!          The surface's requirements to evaluate the global <br>
//!          properties are defined in the template FaceTool class from <br>
//!          the package GProp. <br>
//! <br>
//!          The adaptive 2D algorithm of Gauss-Kronrod integration of <br>
//!          double integral is used. <br>
//! <br>
//!          The inner integral is computed along U parameter of <br>
//!          surface. The integrand function is encapsulated in the <br>
//!          support class UFunction that is defined below. <br>
//! <br>
//!          The outer integral is computed along T parameter of a <br>
//!          bounding curve. The integrand function is encapsulated in <br>
//!          the support class TFunction that is defined below. <br>
class BRepGProp_VinertGK  : public GProp_GProps {
public:

  DEFINE_STANDARD_ALLOC

  //! Empty constructor. <br>
  Standard_EXPORT   BRepGProp_VinertGK();
  //! Constructor. Computes the global properties of a region of <br>
//!          3D space delimited with the naturally restricted surface <br>
//!          and the point VLocation. <br>
  Standard_EXPORT   BRepGProp_VinertGK(BRepGProp_Face& theSurface,const gp_Pnt& theLocation,const Standard_Real theTolerance = 0.001,const Standard_Boolean theCGFlag = Standard_False,const Standard_Boolean theIFlag = Standard_False);
  //! Constructor. Computes the global properties of a region of <br>
//!          3D space delimited with the naturally restricted surface <br>
//!          and the point VLocation. The inertia is computed with <br>
//!          respect to thePoint. <br>
  Standard_EXPORT   BRepGProp_VinertGK(BRepGProp_Face& theSurface,const gp_Pnt& thePoint,const gp_Pnt& theLocation,const Standard_Real theTolerance = 0.001,const Standard_Boolean theCGFlag = Standard_False,const Standard_Boolean theIFlag = Standard_False);
  //! Constructor. Computes the global properties of a region of <br>
//!          3D space delimited with the surface bounded by the domain <br>
//!          and the point VLocation. <br>
  Standard_EXPORT   BRepGProp_VinertGK(BRepGProp_Face& theSurface,BRepGProp_Domain& theDomain,const gp_Pnt& theLocation,const Standard_Real theTolerance = 0.001,const Standard_Boolean theCGFlag = Standard_False,const Standard_Boolean theIFlag = Standard_False);
  //! Constructor. Computes the global properties of a region of <br>
//!          3D space delimited with the surface bounded by the domain <br>
//!          and the point VLocation. The inertia is computed with <br>
//!          respect to thePoint. <br>
  Standard_EXPORT   BRepGProp_VinertGK(BRepGProp_Face& theSurface,BRepGProp_Domain& theDomain,const gp_Pnt& thePoint,const gp_Pnt& theLocation,const Standard_Real theTolerance = 0.001,const Standard_Boolean theCGFlag = Standard_False,const Standard_Boolean theIFlag = Standard_False);
  //! Constructor. Computes the global properties of a region of <br>
//!          3D space delimited with the naturally restricted surface <br>
//!          and the plane. <br>
  Standard_EXPORT   BRepGProp_VinertGK(BRepGProp_Face& theSurface,const gp_Pln& thePlane,const gp_Pnt& theLocation,const Standard_Real theTolerance = 0.001,const Standard_Boolean theCGFlag = Standard_False,const Standard_Boolean theIFlag = Standard_False);
  //! Constructor. Computes the global properties of a region of <br>
//!          3D space delimited with the surface bounded by the domain <br>
//!          and the plane. <br>
  Standard_EXPORT   BRepGProp_VinertGK(BRepGProp_Face& theSurface,BRepGProp_Domain& theDomain,const gp_Pln& thePlane,const gp_Pnt& theLocation,const Standard_Real theTolerance = 0.001,const Standard_Boolean theCGFlag = Standard_False,const Standard_Boolean theIFlag = Standard_False);
  //!  Sets the vertex that delimit 3D closed region of space. <br>
        void SetLocation(const gp_Pnt& theLocation) ;
  //! Computes the global properties of a region of 3D space <br>
//!          delimited with the naturally restricted surface and the <br>
//!          point VLocation. <br>
  Standard_EXPORT     Standard_Real Perform(BRepGProp_Face& theSurface,const Standard_Real theTolerance = 0.001,const Standard_Boolean theCGFlag = Standard_False,const Standard_Boolean theIFlag = Standard_False) ;
  //! Computes the global properties of a region of 3D space <br>
//!          delimited with the naturally restricted surface and the <br>
//!          point VLocation. The inertia is computed with respect to <br>
//!          thePoint. <br>
  Standard_EXPORT     Standard_Real Perform(BRepGProp_Face& theSurface,const gp_Pnt& thePoint,const Standard_Real theTolerance = 0.001,const Standard_Boolean theCGFlag = Standard_False,const Standard_Boolean theIFlag = Standard_False) ;
  //! Computes the global properties of a region of 3D space <br>
//!          delimited with the surface bounded by the domain and the <br>
//!          point VLocation. <br>
  Standard_EXPORT     Standard_Real Perform(BRepGProp_Face& theSurface,BRepGProp_Domain& theDomain,const Standard_Real theTolerance = 0.001,const Standard_Boolean theCGFlag = Standard_False,const Standard_Boolean theIFlag = Standard_False) ;
  //! Computes the global properties of a region of 3D space <br>
//!          delimited with the surface bounded by the domain and the <br>
//!          point VLocation. The inertia is computed with respect to <br>
//!          thePoint. <br>
  Standard_EXPORT     Standard_Real Perform(BRepGProp_Face& theSurface,BRepGProp_Domain& theDomain,const gp_Pnt& thePoint,const Standard_Real theTolerance = 0.001,const Standard_Boolean theCGFlag = Standard_False,const Standard_Boolean theIFlag = Standard_False) ;
  //! Computes the global properties of a region of 3D space <br>
//!          delimited with the naturally restricted surface and the <br>
//!          plane. <br>
  Standard_EXPORT     Standard_Real Perform(BRepGProp_Face& theSurface,const gp_Pln& thePlane,const Standard_Real theTolerance = 0.001,const Standard_Boolean theCGFlag = Standard_False,const Standard_Boolean theIFlag = Standard_False) ;
  //! Computes the global properties of a region of 3D space <br>
//!          delimited with the surface bounded by the domain and the <br>
//!          plane. <br>
  Standard_EXPORT     Standard_Real Perform(BRepGProp_Face& theSurface,BRepGProp_Domain& theDomain,const gp_Pln& thePlane,const Standard_Real theTolerance = 0.001,const Standard_Boolean theCGFlag = Standard_False,const Standard_Boolean theIFlag = Standard_False) ;
  //! Returns the relative reached computation error. <br>
        Standard_Real GetErrorReached() const;
  //! Returns the absolut reached computation error. <br>
        Standard_Real GetAbsolutError() const;





protected:





private:

  //! Main method for computation of the global properties that <br>
//!          is invoked by each Perform method. <br>
  Standard_EXPORT     Standard_Real PrivatePerform(BRepGProp_Face& theSurface,const Standard_Address thePtrDomain,const Standard_Boolean IsByPoint,const Standard_Address theCoeffs,const Standard_Real theTolerance,const Standard_Boolean theCGFlag,const Standard_Boolean theIFlag) ;


Standard_Real myErrorReached;
Standard_Real myAbsolutError;


};


#include <BRepGProp_VinertGK.lxx>



// other Inline functions and methods (like "C++: function call" methods)


#endif
