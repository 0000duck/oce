// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _BRepBlend_PointOnRst_HeaderFile
#define _BRepBlend_PointOnRst_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Handle_Adaptor2d_HCurve2d_HeaderFile
#include <Handle_Adaptor2d_HCurve2d.hxx>
#endif
#ifndef _IntSurf_Transition_HeaderFile
#include <IntSurf_Transition.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
class Adaptor2d_HCurve2d;
class Standard_DomainError;
class IntSurf_Transition;


//! Definition of an intersection point between a line <br>
//!          and a restriction on a surface. <br>
//!          Such a point is contains geometrical informations (see <br>
//!          the Value method) and logical informations. <br>
class BRepBlend_PointOnRst  {
public:

  DEFINE_STANDARD_ALLOC

  //! Empty constructor. <br>
  Standard_EXPORT   BRepBlend_PointOnRst();
  //! Creates the PointOnRst on the arc A, at parameter Param, <br>
//!          with the transition TLine on the walking line, and <br>
//!          TArc on the arc A. <br>
  Standard_EXPORT   BRepBlend_PointOnRst(const Handle(Adaptor2d_HCurve2d)& A,const Standard_Real Param,const IntSurf_Transition& TLine,const IntSurf_Transition& TArc);
  //! Sets the values of a point which is on the arc <br>
//!          A, at parameter Param. <br>
  Standard_EXPORT     void SetArc(const Handle(Adaptor2d_HCurve2d)& A,const Standard_Real Param,const IntSurf_Transition& TLine,const IntSurf_Transition& TArc) ;
  //! Returns the arc of restriction containing the <br>
//!          vertex. <br>
       const Handle_Adaptor2d_HCurve2d& Arc() const;
  //! Returns the transition of the point on the <br>
//!          line on surface. <br>
       const IntSurf_Transition& TransitionOnLine() const;
  //! Returns the transition of the point on the arc <br>
//!          returned by Arc(). <br>
       const IntSurf_Transition& TransitionOnArc() const;
  //! Returns the parameter of the point on the <br>
//!          arc returned by the method Arc(). <br>
        Standard_Real ParameterOnArc() const;





protected:





private:



Handle_Adaptor2d_HCurve2d arc;
IntSurf_Transition traline;
IntSurf_Transition traarc;
Standard_Real prm;


};


#include <BRepBlend_PointOnRst.lxx>



// other Inline functions and methods (like "C++: function call" methods)


#endif
