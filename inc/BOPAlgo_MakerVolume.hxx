// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _BOPAlgo_MakerVolume_HeaderFile
#define _BOPAlgo_MakerVolume_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Bnd_Box_HeaderFile
#include <Bnd_Box.hxx>
#endif
#ifndef _TopoDS_Solid_HeaderFile
#include <TopoDS_Solid.hxx>
#endif
#ifndef _BOPCol_ListOfShape_HeaderFile
#include <BOPCol_ListOfShape.hxx>
#endif
#ifndef _BOPAlgo_Builder_HeaderFile
#include <BOPAlgo_Builder.hxx>
#endif
#ifndef _BOPCol_BaseAllocator_HeaderFile
#include <BOPCol_BaseAllocator.hxx>
#endif
#ifndef _BOPCol_MapOfShape_HeaderFile
#include <BOPCol_MapOfShape.hxx>
#endif
class TopoDS_Solid;
class BOPAlgo_PaveFiller;



//! The algorithm is to build solids from set of shapes. <br>
//! It uses the BOPAlgo_Builder algorithm to intersect the given shapes <br>
//! and build the images of faces (if needed) and BOPAlgo_BuilderSolid <br>
//! algorithm to build the solids. <br>
//! <br>
//! Steps of the algorithm: <br>
//!  1. Collect all faces: intersect the shapes if necessary and collect <br>
//!     the images of faces, otherwise just collect the faces to the <br>
//!     <myFaces> list; <br>
//!     All faces on this step added twice, with orientation FORWARD <br>
//!     and REVERSED; <br>
//! <br>
//!  2. Create bounding box covering all the faces from <myFaces> and <br>
//!     create solid box from corner points of that bounding box <br>
//!     (myBBox, mySBox). Add faces from that box to <myFaces>; <br>
//! <br>
//!  3. Build solids from <myFaces> using BOPAlgo_BuilderSolid algorithm; <br>
//! <br>
//!  4. Treat the result: Eliminate solid containig faces from <mySBox>; <br>
//! <br>
//!  5. Fill internal shapes: add internal vertices and edges into <br>
//!     created solids; <br>
//! <br>
//!  6. Prepare the history. <br>
//! <br>
//! Fields: <br>
//!  <myIntersect> - boolean flag. It defines whether intersect shapes <br>
//!                  from <myArguments> (if set to TRUE) or not (FALSE). <br>
//!                  The default value is TRUE. By setting it to FALSE <br>
//!                  the user should guarantee that shapes in <myArguments> <br>
//!                  do not interfere with each other, otherwise the result <br>
//!                  is unpredictable. <br>
//! <br>
//!  <myBBox>      - bounding box, covering all faces from <myFaces>. <br>
//! <br>
//!  <mySBox>      - Solid box created from the corner points of <myBBox>. <br>
//! <br>
//!  <myFaces>     - the list is to keep the "final" faces, that will be <br>
//!                  given to the BOPAlgo_BuilderSolid algorithm. <br>
//!                  If the shapes have been interfered it should contain <br>
//!                  the images of the source shapes, otherwise its just <br>
//!                  the original faces. <br>
//!                  It also contains the faces from <mySBox>. <br>
//! <br>
//! <br>
//! Fields inherited from BOPAlgo_Builder: <br>
//! <br>
//!  <myArguments> - list of the source shapes. The source shapes can have <br>
//!                  any type, but each shape must not be self-interfered. <br>
//! <br>
//!  <myShape>     - Result shape: <br>
//!                  - empty compound - if no solids were created; <br>
//!                  - solid - if created only one solid; <br>
//!                  - compound of solids - if created more than one solid. <br>
//! <br>
//! <br>
//! Fields inherited from BOPAlgo_Algo: <br>
//! <br>
//! <myRunParallel> - Defines whether the parallel processing is <br>
//!                   switched on or not. <br>
//! <myErrorStatus> - Error status of the operation: <br>
//!                   0   - operation successful; <br>
//!                   100 - no shapes to process; <br>
//!                   102 - BOPAlgo_PaveFiller algorithm has failed; <br>
//!                   103 - BOPAlgo_BuilderSolid algorithm has failed. <br>
//! <br>
//! Example: <br>
//! <br>
//!  BOPAlgo_MakerVolume aMV; <br>
//!  // <br>
//!  aMV.SetArguments(aLS); //source shapes <br>
//!  aMV.SetRunParallel(bRunParallel); //parallel or single mode <br>
//!  aMV.SetIntersect(bIntersect); //intersect or not the shapes from <aLS> <br>
//!  // <br>
//!  aMV.Perform(); //perform the operation <br>
//!  if (aMV.ErrorStatus()) { //check error status <br>
//!    return; <br>
//!  } <br>
//!  // <br>
//!  const TopoDS_Shape& aResult = aMV.Shape();  //result of the operation <br>
//! <br>
class BOPAlgo_MakerVolume  : public BOPAlgo_Builder {
public:

  DEFINE_STANDARD_ALLOC

  
//! Empty contructor. <br>
      BOPAlgo_MakerVolume();
virtual ~BOPAlgo_MakerVolume();
  
//! Empty contructor. <br>
      BOPAlgo_MakerVolume(const BOPCol_BaseAllocator& theAllocator);
  
//! Clears the data. <br>
      virtual  void Clear() ;
  
//! Sets the flag myIntersect: <br>
//! if <bIntersect> is TRUE the shapes from <myArguments> will be intersected. <br>
//! if <bIntersect> is FALSE no intersection will be done. <br>
        void SetIntersect(const Standard_Boolean bIntersect) ;
  
//! Returns the flag <myIntersect>. <br>
        Standard_Boolean IsIntersect() const;
  
//! Returns the solid box <mySBox>. <br>
       const TopoDS_Solid& Box() const;
  
//! Returns the processed faces <myFaces>. <br>
       const BOPCol_ListOfShape& Faces() const;
  
//! Performs the operation. <br>
  Standard_EXPORT   virtual  void Perform() ;





protected:

  
//! Checks the data. <br>
  Standard_EXPORT   virtual  void CheckData() ;
  
//! Performs the operation. <br>
  Standard_EXPORT   virtual  void PerformInternal1(const BOPAlgo_PaveFiller& thePF) ;
  
//! Collects all faces. <br>
  Standard_EXPORT     void CollectFaces() ;
  
//! Makes solid box. <br>
  Standard_EXPORT     void MakeBox(BOPCol_MapOfShape& theBoxFaces) ;
  
//! Builds solids. <br>
  Standard_EXPORT     void BuildSolids(BOPCol_ListOfShape& theLSR) ;
  
//! Removes the covering box. <br>
  Standard_EXPORT     void RemoveBox(BOPCol_ListOfShape& theLSR,const BOPCol_MapOfShape& theBoxFaces) ;
  
//! Fills the solids with internal shapes. <br>
  Standard_EXPORT     void FillInternalShapes(const BOPCol_ListOfShape& theLSR) ;
  
//! Builds the result. <br>
  Standard_EXPORT     void BuildShape(const BOPCol_ListOfShape& theLSR) ;


Standard_Boolean myIntersect;
Bnd_Box myBBox;
TopoDS_Solid mySBox;
BOPCol_ListOfShape myFaces;


private:





};


#include <BOPAlgo_MakerVolume.lxx>



// other Inline functions and methods (like "C++: function call" methods)


#endif
