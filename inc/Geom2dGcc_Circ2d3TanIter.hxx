// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Geom2dGcc_Circ2d3TanIter_HeaderFile
#define _Geom2dGcc_Circ2d3TanIter_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _gp_Circ2d_HeaderFile
#include <gp_Circ2d.hxx>
#endif
#ifndef _GccEnt_Position_HeaderFile
#include <GccEnt_Position.hxx>
#endif
#ifndef _gp_Pnt2d_HeaderFile
#include <gp_Pnt2d.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
class StdFail_NotDone;
class GccEnt_QualifiedCirc;
class Geom2dGcc_QCurve;
class GccEnt_QualifiedLin;
class gp_Pnt2d;
class gp_Circ2d;


//! This class implements the algorithms used to <br>
//!          create 2d circles tangent to 3 points/lines/circles/ <br>
//!          curves with one curve or more. <br>
//!          The arguments of all construction methods are : <br>
//!             - The three qualifiied elements for the <br>
//!             tangency constrains (QualifiedCirc, QualifiedLine, <br>
//!             Qualifiedcurv, Points). <br>
//!             - A parameter for each QualifiedCurv. <br>
class Geom2dGcc_Circ2d3TanIter  {
public:

  DEFINE_STANDARD_ALLOC

  //! This method implements the algorithms used to <br>
//!          create 2d circles tangent to 2 circles and a curve. <br>
  Standard_EXPORT   Geom2dGcc_Circ2d3TanIter(const GccEnt_QualifiedCirc& Qualified1,const GccEnt_QualifiedCirc& Qualified2,const Geom2dGcc_QCurve& Qualified3,const Standard_Real Param1,const Standard_Real Param2,const Standard_Real Param3,const Standard_Real Tolerance);
  //! This method implements the algorithms used to <br>
//!          create 2d circles tangent to a circle and 2 curves. <br>
  Standard_EXPORT   Geom2dGcc_Circ2d3TanIter(const GccEnt_QualifiedCirc& Qualified1,const Geom2dGcc_QCurve& Qualified2,const Geom2dGcc_QCurve& Qualified3,const Standard_Real Param1,const Standard_Real Param2,const Standard_Real Param3,const Standard_Real Tolerance);
  //! This method implements the algorithms used to <br>
//!          create 2d circles tangent to a circle and a line and <br>
//!          a curve. <br>
  Standard_EXPORT   Geom2dGcc_Circ2d3TanIter(const GccEnt_QualifiedCirc& Qualified1,const GccEnt_QualifiedLin& Qualified2,const Geom2dGcc_QCurve& Qualified3,const Standard_Real Param1,const Standard_Real Param2,const Standard_Real Param3,const Standard_Real Tolerance);
  //! This method implements the algorithms used to <br>
//!          create 2d circles tangent to a circle and a point and <br>
//!          a curve. <br>
  Standard_EXPORT   Geom2dGcc_Circ2d3TanIter(const GccEnt_QualifiedCirc& Qualified1,const Geom2dGcc_QCurve& Qualified2,const gp_Pnt2d& Point3,const Standard_Real Param1,const Standard_Real Param2,const Standard_Real Tolerance);
  //! This method implements the algorithms used to <br>
//!          create 2d circles tangent to 2 lines and a curve. <br>
  Standard_EXPORT   Geom2dGcc_Circ2d3TanIter(const GccEnt_QualifiedLin& Qualified1,const GccEnt_QualifiedLin& Qualified2,const Geom2dGcc_QCurve& Qualified3,const Standard_Real Param1,const Standard_Real Param2,const Standard_Real Param3,const Standard_Real Tolerance);
  //! This method implements the algorithms used to <br>
//!          create 2d circles tangent to a line and 2 curves. <br>
  Standard_EXPORT   Geom2dGcc_Circ2d3TanIter(const GccEnt_QualifiedLin& Qualified1,const Geom2dGcc_QCurve& Qualified2,const Geom2dGcc_QCurve& Qualified3,const Standard_Real Param1,const Standard_Real Param2,const Standard_Real Param3,const Standard_Real Tolerance);
  //! This method implements the algorithms used to <br>
//!          create 2d circles tangent to a line and a curve <br>
//!          and a point. <br>
  Standard_EXPORT   Geom2dGcc_Circ2d3TanIter(const GccEnt_QualifiedLin& Qualified1,const Geom2dGcc_QCurve& Qualified2,const gp_Pnt2d& Point3,const Standard_Real Param1,const Standard_Real Param2,const Standard_Real Tolerance);
  //! This method implements the algorithms used to <br>
//!          create 2d circles tangent to a curve and 2 points. <br>
  Standard_EXPORT   Geom2dGcc_Circ2d3TanIter(const Geom2dGcc_QCurve& Qualified1,const gp_Pnt2d& Point1,const gp_Pnt2d& Point2,const Standard_Real Param1,const Standard_Real Tolerance);
  //! This method implements the algorithms used to <br>
//!          create 2d circles tangent to 2 curves and a point. <br>
  Standard_EXPORT   Geom2dGcc_Circ2d3TanIter(const Geom2dGcc_QCurve& Qualified1,const Geom2dGcc_QCurve& Qualified2,const gp_Pnt2d& Point2,const Standard_Real Param1,const Standard_Real Param2,const Standard_Real Tolerance);
  //! This method implements the algorithms used to <br>
//!          create 2d circles tangent to 3 curves. <br>
  Standard_EXPORT   Geom2dGcc_Circ2d3TanIter(const Geom2dGcc_QCurve& Qualified1,const Geom2dGcc_QCurve& Qualified2,const Geom2dGcc_QCurve& Qualified3,const Standard_Real Param1,const Standard_Real Param2,const Standard_Real Param3,const Standard_Real Tolerance);
  //! This method returns True if the construction <br>
//!          algorithm succeeded. <br>
  Standard_EXPORT     Standard_Boolean IsDone() const;
  //! Returns the solution. <br>//! It raises NotDone if the construction algorithm <br>
//!          didn't succeed. <br>
  Standard_EXPORT     gp_Circ2d ThisSolution() const;
  
  Standard_EXPORT     void WhichQualifier(GccEnt_Position& Qualif1,GccEnt_Position& Qualif2,GccEnt_Position& Qualif3) const;
  //! Returns informations about the tangency point between <br>
//!          the result and the first argument. <br>
//!          ParSol is the intrinsic parameter of the point PntSol <br>
//!          on the solution curv. <br>
//!          ParArg is the intrinsic parameter of the point PntSol <br>
//!          on the argument curv. <br>//! It raises NotDone if the construction algorithm <br>
//!          didn't succeed. <br>
  Standard_EXPORT     void Tangency1(Standard_Real& ParSol,Standard_Real& ParArg,gp_Pnt2d& PntSol) const;
  //! Returns informations about the tangency point between <br>
//!          the result and the second argument. <br>
//!          ParSol is the intrinsic parameter of the point PntSol <br>
//!          on the solution curv. <br>
//!          ParArg is the intrinsic parameter of the point PntSol <br>
//!          on the argument curv. <br>//! It raises NotDone if the construction algorithm <br>
//!          didn't succeed. <br>
  Standard_EXPORT     void Tangency2(Standard_Real& ParSol,Standard_Real& ParArg,gp_Pnt2d& PntSol) const;
  //! Returns informations about the tangency point between <br>
//!          the result and the third argument. <br>
//!          ParSol is the intrinsic parameter of the point PntSol <br>
//!          on the solution curv. <br>
//!          ParArg is the intrinsic parameter of the point PntSol <br>
//!          on the argument curv. <br>//! It raises NotDone if the construction algorithm <br>
//!          didn't succeed. <br>
  Standard_EXPORT     void Tangency3(Standard_Real& ParSol,Standard_Real& ParArg,gp_Pnt2d& PntSol) const;
  //! It raises NotDone if the construction algorithm <br>
//!          didn't succeed. <br>
  Standard_EXPORT     Standard_Boolean IsTheSame1() const;
  //! It raises NotDone if the construction algorithm <br>
//!          didn't succeed. <br>
  Standard_EXPORT     Standard_Boolean IsTheSame2() const;
  //! It raises NotDone if the construction algorithm <br>
//!          didn't succeed. <br>
  Standard_EXPORT     Standard_Boolean IsTheSame3() const;





protected:





private:



Standard_Boolean WellDone;
gp_Circ2d cirsol;
GccEnt_Position qualifier1;
GccEnt_Position qualifier2;
GccEnt_Position qualifier3;
Standard_Boolean TheSame1;
Standard_Boolean TheSame2;
Standard_Boolean TheSame3;
gp_Pnt2d pnttg1sol;
gp_Pnt2d pnttg2sol;
gp_Pnt2d pnttg3sol;
Standard_Real par1sol;
Standard_Real par2sol;
Standard_Real par3sol;
Standard_Real pararg1;
Standard_Real pararg2;
Standard_Real pararg3;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
