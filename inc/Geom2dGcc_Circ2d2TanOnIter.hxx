// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Geom2dGcc_Circ2d2TanOnIter_HeaderFile
#define _Geom2dGcc_Circ2d2TanOnIter_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _gp_Circ2d_HeaderFile
#include <gp_Circ2d.hxx>
#endif
#ifndef _GccEnt_Position_HeaderFile
#include <GccEnt_Position.hxx>
#endif
#ifndef _gp_Pnt2d_HeaderFile
#include <gp_Pnt2d.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
class StdFail_NotDone;
class GccEnt_QualifiedCirc;
class Geom2dGcc_QCurve;
class gp_Lin2d;
class GccEnt_QualifiedLin;
class gp_Pnt2d;
class gp_Circ2d;
class Geom2dAdaptor_Curve;


//! This class implements the algorithms used to <br>
//!          create 2d circles TANgent to 2 entities and <br>
//!          having the center ON a curv. <br>
//!          The order of the tangency argument is always <br>
//!          QualifiedCirc, QualifiedLin, QualifiedCurv, Pnt2d. <br>
//!          the arguments are : <br>
//!            - The two tangency arguments. <br>
//!            - The center line. <br>
//!            - The parameter for each tangency argument which <br>
//!            is a curve. <br>
//!            - The tolerance. <br>
class Geom2dGcc_Circ2d2TanOnIter  {
public:

  DEFINE_STANDARD_ALLOC

  //! This method implements the algorithms used to <br>
//!          create 2d circles TANgent to a 2d circle and a curve and <br>
//!          having the center ON a 2d line. <br>
//!          Param2 is the initial guess on the curve QualifiedCurv. <br>
//!          Tolerance is used for the limit cases. <br>
  Standard_EXPORT   Geom2dGcc_Circ2d2TanOnIter(const GccEnt_QualifiedCirc& Qualified1,const Geom2dGcc_QCurve& Qualified2,const gp_Lin2d& OnLine,const Standard_Real Param1,const Standard_Real Param2,const Standard_Real Param3,const Standard_Real Tolerance);
  //! This method implements the algorithms used to <br>
//!          create 2d circles TANgent to a 2d line and a curve and <br>
//!          having the center ON a 2d line. <br>
//!          Param2 is the initial guess on the curve QualifiedCurv. <br>
//!          Tolerance is used for the limit cases. <br>
  Standard_EXPORT   Geom2dGcc_Circ2d2TanOnIter(const GccEnt_QualifiedLin& Qualified1,const Geom2dGcc_QCurve& Qualified2,const gp_Lin2d& OnLine,const Standard_Real Param1,const Standard_Real Param2,const Standard_Real Param3,const Standard_Real Tolerance);
  //! This method implements the algorithms used to <br>
//!          create 2d circles TANgent to two curves and <br>
//!          having the center ON a 2d line. <br>
//!          Param1 is the initial guess on the first QualifiedCurv. <br>
//!          Param2 is the initial guess on the first QualifiedCurv. <br>
//!          Tolerance is used for the limit cases. <br>
  Standard_EXPORT   Geom2dGcc_Circ2d2TanOnIter(const Geom2dGcc_QCurve& Qualified1,const Geom2dGcc_QCurve& Qualified2,const gp_Lin2d& OnLine,const Standard_Real Param1,const Standard_Real Param2,const Standard_Real Param3,const Standard_Real Tolerance);
  //! This method implements the algorithms used to <br>
//!          create 2d circles TANgent to a 2d point and a curve and <br>
//!          having the center ON a 2d line. <br>
//!          Param2 is the initial guess on the curve QualifiedCurv. <br>
//!          Tolerance is used for the limit cases. <br>
  Standard_EXPORT   Geom2dGcc_Circ2d2TanOnIter(const Geom2dGcc_QCurve& Qualified1,const gp_Pnt2d& Point2,const gp_Lin2d& OnLine,const Standard_Real Param1,const Standard_Real Param2,const Standard_Real Tolerance);
  //! This method implements the algorithms used to <br>
//!          create 2d circles TANgent to a 2d circle and a curve and <br>
//!          having the center ON a 2d circle. <br>
//!          Param2 is the initial guess on the curve QualifiedCurv. <br>
//!          Tolerance is used for the limit cases. <br>
  Standard_EXPORT   Geom2dGcc_Circ2d2TanOnIter(const GccEnt_QualifiedCirc& Qualified1,const Geom2dGcc_QCurve& Qualified2,const gp_Circ2d& OnCirc,const Standard_Real Param1,const Standard_Real Param2,const Standard_Real Param3,const Standard_Real Tolerance);
  //! This method implements the algorithms used to <br>
//!          create 2d circles TANgent to a 2d line and a curve and <br>
//!          having the center ON a 2d circle. <br>
//!          Param2 is the initial guess on the curve QualifiedCurv. <br>
//!          Tolerance is used for the limit cases. <br>
  Standard_EXPORT   Geom2dGcc_Circ2d2TanOnIter(const GccEnt_QualifiedLin& Qualified1,const Geom2dGcc_QCurve& Qualified2,const gp_Circ2d& OnCirc,const Standard_Real Param1,const Standard_Real Param2,const Standard_Real Param3,const Standard_Real Tolerance);
  //! This method implements the algorithms used to <br>
//!          create 2d circles TANgent to two curves and <br>
//!          having the center ON a 2d circle. <br>
//!          Param1 is the initial guess on the first QualifiedCurv. <br>
//!          Param2 is the initial guess on the first QualifiedCurv. <br>
//!          Tolerance is used for the limit cases. <br>
  Standard_EXPORT   Geom2dGcc_Circ2d2TanOnIter(const Geom2dGcc_QCurve& Qualified1,const Geom2dGcc_QCurve& Qualified2,const gp_Circ2d& OnCirc,const Standard_Real Param1,const Standard_Real Param2,const Standard_Real Param3,const Standard_Real Tolerance);
  //! This method implements the algorithms used to <br>
//!          create 2d circles TANgent to a 2d point and a curve and <br>
//!          having the center ON a 2d circle. <br>
//!          Param2 is the initial guess on the curve QualifiedCurv. <br>
//!          Tolerance is used for the limit cases. <br>
  Standard_EXPORT   Geom2dGcc_Circ2d2TanOnIter(const Geom2dGcc_QCurve& Qualified1,const gp_Pnt2d& Point2,const gp_Circ2d& OnCirc,const Standard_Real Param1,const Standard_Real Param2,const Standard_Real Tolerance);
  //! This method implements the algorithms used to <br>
//!          create 2d circles TANgent to a 2d circle and a curve and <br>
//!          having the center ON a 2d curve. <br>
//!          Param2 is the initial guess on the curve QualifiedCurv. <br>
//!          ParamOn is the initial guess on the center curve OnCurv. <br>
//!          Tolerance is used for the limit cases. <br>
  Standard_EXPORT   Geom2dGcc_Circ2d2TanOnIter(const GccEnt_QualifiedCirc& Qualified1,const Geom2dGcc_QCurve& Qualified2,const Geom2dAdaptor_Curve& OnCurv,const Standard_Real Param1,const Standard_Real Param2,const Standard_Real ParamOn,const Standard_Real Tolerance);
  //! This method implements the algorithms used to <br>
//!          create 2d circles TANgent to a 2d line and a curve and <br>
//!          having the center ON a 2d curve. <br>
//!          Param2 is the initial guess on the curve QualifiedCurv. <br>
//!          ParamOn is the initial guess on the center curve OnCurv. <br>
//!          Tolerance is used for the limit cases. <br>
  Standard_EXPORT   Geom2dGcc_Circ2d2TanOnIter(const GccEnt_QualifiedLin& Qualified1,const Geom2dGcc_QCurve& Qualified2,const Geom2dAdaptor_Curve& OnCurve,const Standard_Real Param1,const Standard_Real Param2,const Standard_Real ParamOn,const Standard_Real Tolerance);
  //! This method implements the algorithms used to <br>
//!          create 2d circles TANgent to a 2d Point and a curve and <br>
//!          having the center ON a 2d curve. <br>
//!          Param1 is the initial guess on the curve QualifiedCurv. <br>
//!          ParamOn is the initial guess on the center curve OnCurv. <br>
//!          Tolerance is used for the limit cases. <br>
  Standard_EXPORT   Geom2dGcc_Circ2d2TanOnIter(const Geom2dGcc_QCurve& Qualified1,const gp_Pnt2d& Point2,const Geom2dAdaptor_Curve& OnCurve,const Standard_Real Param1,const Standard_Real ParamOn,const Standard_Real Tolerance);
  //! This method implements the algorithms used to <br>
//!          create 2d circles TANgent to two curves and <br>
//!          having the center ON a 2d curve. <br>
//!          Param1 is the initial guess on the first curve QualifiedCurv. <br>
//!          Param1 is the initial guess on the second curve QualifiedCurv. <br>
//!          ParamOn is the initial guess on the center curve OnCurv. <br>
//!          Tolerance is used for the limit cases. <br>
  Standard_EXPORT   Geom2dGcc_Circ2d2TanOnIter(const Geom2dGcc_QCurve& Qualified1,const Geom2dGcc_QCurve& Qualified2,const Geom2dAdaptor_Curve& OnCurve,const Standard_Real Param1,const Standard_Real Param2,const Standard_Real ParamOn,const Standard_Real Tolerance);
  //! This method returns True if the construction <br>
//!          algorithm succeeded. <br>
  Standard_EXPORT     Standard_Boolean IsDone() const;
  //! Returns the solution. <br>//! It raises NotDone if the construction algorithm <br>
//!          didn't succeed. <br>
  Standard_EXPORT     gp_Circ2d ThisSolution() const;
  
  Standard_EXPORT     void WhichQualifier(GccEnt_Position& Qualif1,GccEnt_Position& Qualif2) const;
  //! Returns information about the tangency point between <br>
//!          the result and the first argument. <br>
//!          ParSol is the intrinsic parameter of the point PntSol <br>
//!          on the solution curv. <br>
//!          ParArg is the intrinsic parameter of the point PntSol <br>
//!          on the argument curv. <br>//! It raises NotDone if the construction algorithm <br>
//!          didn't succeed. <br>
  Standard_EXPORT     void Tangency1(Standard_Real& ParSol,Standard_Real& ParArg,gp_Pnt2d& PntSol) const;
  //! Returns information about the tangency point between <br>
//!          the result and the second argument. <br>
//!          ParSol is the intrinsic parameter of the point PntSol <br>
//!          on the solution curv. <br>
//!          ParArg is the intrinsic parameter of the point PntSol <br>
//!          on the argument curv. <br>//! It raises NotDone if the construction algorithm <br>
//!          didn't succeed. <br>
  Standard_EXPORT     void Tangency2(Standard_Real& ParSol,Standard_Real& ParArg,gp_Pnt2d& PntSol) const;
  //! Returns information about the center (on the curv) of the <br>
//!          result and the third argument. <br>//! It raises NotDone if the construction algorithm <br>
//!          didn't succeed. <br>
  Standard_EXPORT     void CenterOn3(Standard_Real& ParArg,gp_Pnt2d& PntSol) const;
  //! It raises NotDone if the construction algorithm <br>
//!          didn't succeed. <br>
  Standard_EXPORT     Standard_Boolean IsTheSame1() const;
  //! It raises NotDone if the construction algorithm <br>
//!          didn't succeed. <br>
  Standard_EXPORT     Standard_Boolean IsTheSame2() const;





protected:





private:



Standard_Boolean WellDone;
gp_Circ2d cirsol;
GccEnt_Position qualifier1;
GccEnt_Position qualifier2;
Standard_Boolean TheSame1;
Standard_Boolean TheSame2;
gp_Pnt2d pnttg1sol;
gp_Pnt2d pnttg2sol;
gp_Pnt2d pntcen;
Standard_Real par1sol;
Standard_Real par2sol;
Standard_Real pararg1;
Standard_Real pararg2;
Standard_Real parcen3;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
