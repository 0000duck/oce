// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _MoniTool_TransientElem_HeaderFile
#define _MoniTool_TransientElem_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_MoniTool_TransientElem_HeaderFile
#include <Handle_MoniTool_TransientElem.hxx>
#endif

#ifndef _Handle_Standard_Transient_HeaderFile
#include <Handle_Standard_Transient.hxx>
#endif
#ifndef _MoniTool_Element_HeaderFile
#include <MoniTool_Element.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Handle_MoniTool_Element_HeaderFile
#include <Handle_MoniTool_Element.hxx>
#endif
#ifndef _Handle_Standard_Type_HeaderFile
#include <Handle_Standard_Type.hxx>
#endif
#ifndef _Standard_CString_HeaderFile
#include <Standard_CString.hxx>
#endif
class Standard_Transient;
class MoniTool_Element;
class Standard_Type;


//! an TransientElem defines an Element for a specific input class <br>
//!           its definition includes the value of the Key to be mapped, <br>
//!           and the HashCoder associated to the class of the Key <br>
//! <br>
//!           Transient from Standard defines the class to be keyed <br>
//!           MapTransientHasher from TColStd is the associated Hasher <br>
//!           DataInfo from MoniTool   is an additionnal class which helps to provide <br>
//!             informations on the value (template : see DataInfo) <br>
class MoniTool_TransientElem : public MoniTool_Element {

public:

  //! Creates a TransientElem with a Value. This Value can then not be <br>
//!           changed. It is used by the Hasher to compute the HashCode, <br>
//!           which will then be stored for an immediate reading. <br>
  Standard_EXPORT   MoniTool_TransientElem(const Handle(Standard_Transient)& akey);
  //! Returns the contained value <br>
  Standard_EXPORT    const Handle_Standard_Transient& Value() const;
  //! Specific testof equallity : defined as False if <other> has <br>
//!           not the same true Type, else contents are compared (by <br>
//!           C++ operator ==) <br>
  Standard_EXPORT     Standard_Boolean Equates(const Handle(MoniTool_Element)& other) const;
  //! Returns the Type of the Value. By default, returns the <br>
//!           DynamicType of <me>, but can be redefined <br>
  Standard_EXPORT   virtual  Handle_Standard_Type ValueType() const;
  //! Returns the name of the Type of the Value. Default is name <br>
//!           of ValueType, unless it is for a non-handled object <br>
  Standard_EXPORT   virtual  Standard_CString ValueTypeName() const;




  DEFINE_STANDARD_RTTI(MoniTool_TransientElem)

protected:




private: 


Handle_Standard_Transient theval;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
