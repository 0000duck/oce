// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _MeshAlgo_Vertex_HeaderFile
#define _MeshAlgo_Vertex_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _MeshDS_DegreeOfFreedom_HeaderFile
#include <MeshDS_DegreeOfFreedom.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
class gp_XY;


//! Describes the data  structure for  a  vertex in  a <br>
//!          Delaunay triangulation. <br>
class MeshAlgo_Vertex  {
public:

  void* operator new(size_t,void* anAddress) 
  {
    return anAddress;
  }
  void* operator new(size_t size) 
  {
    return Standard::Allocate(size); 
  }
  void  operator delete(void *anAddress) 
  {
    if (anAddress) Standard::Free((Standard_Address&)anAddress); 
  }

  
  Standard_EXPORT    const gp_XY& Coord() const;
  
  Standard_EXPORT     MeshDS_DegreeOfFreedom Movability() const;
  //! For maping the Vertices. <br>
//!          Same Vertex -> Same HashCode <br>
//!          Different Vertices -> Not IsEqual but can have same HashCode <br>
  Standard_EXPORT     void SetMovability(const MeshDS_DegreeOfFreedom mov) ;
  
  Standard_EXPORT     Standard_Integer HashCode(const Standard_Integer Upper) const;
  
  Standard_EXPORT     Standard_Boolean IsEqual(const MeshAlgo_Vertex& Other) const;
    Standard_Boolean operator ==(const MeshAlgo_Vertex& Other) const
{
  return IsEqual(Other);
}





protected:

  
  Standard_EXPORT   MeshAlgo_Vertex(const Standard_Real x,const Standard_Real y,const MeshDS_DegreeOfFreedom theMov);




private:





};





// other Inline functions and methods (like "C++: function call" methods)
inline Standard_Integer HashCode(const MeshAlgo_Vertex& me,const Standard_Integer Upper) {
 return me.HashCode(Upper);
}



#endif
